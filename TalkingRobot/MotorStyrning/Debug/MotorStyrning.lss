
MotorStyrning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030a  00800200  00006bc6  00006c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070c  0080050a  0080050a  00006f64  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006f64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000dd8  00000000  00000000  00007000  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00031045  00000000  00000000  00007dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000069d6  00000000  00000000  00038e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009753  00000000  00000000  0003f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000352c  00000000  00000000  00048f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006deb  00000000  00000000  0004c474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00014729  00000000  00000000  0005325f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001048  00000000  00000000  00067988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__ctors_end>
       2:	00 00       	nop
       4:	91 c1       	rjmp	.+802    	; 0x328 <__bad_interrupt>
       6:	00 00       	nop
       8:	8f c1       	rjmp	.+798    	; 0x328 <__bad_interrupt>
       a:	00 00       	nop
       c:	8d c1       	rjmp	.+794    	; 0x328 <__bad_interrupt>
       e:	00 00       	nop
      10:	8b c1       	rjmp	.+790    	; 0x328 <__bad_interrupt>
      12:	00 00       	nop
      14:	89 c1       	rjmp	.+786    	; 0x328 <__bad_interrupt>
      16:	00 00       	nop
      18:	87 c1       	rjmp	.+782    	; 0x328 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	85 c1       	rjmp	.+778    	; 0x328 <__bad_interrupt>
      1e:	00 00       	nop
      20:	83 c1       	rjmp	.+774    	; 0x328 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_10>
      28:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_10>
      2c:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_10>
      30:	7b c1       	rjmp	.+758    	; 0x328 <__bad_interrupt>
      32:	00 00       	nop
      34:	79 c1       	rjmp	.+754    	; 0x328 <__bad_interrupt>
      36:	00 00       	nop
      38:	77 c1       	rjmp	.+750    	; 0x328 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	75 c1       	rjmp	.+746    	; 0x328 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <__vector_16>
      44:	0c 94 c2 28 	jmp	0x5184	; 0x5184 <__vector_17>
      48:	6f c1       	rjmp	.+734    	; 0x328 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6d c1       	rjmp	.+730    	; 0x328 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__vector_20>
      54:	69 c1       	rjmp	.+722    	; 0x328 <__bad_interrupt>
      56:	00 00       	nop
      58:	67 c1       	rjmp	.+718    	; 0x328 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__vector_23>
      60:	63 c1       	rjmp	.+710    	; 0x328 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_25>
      68:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_26>
      6c:	5d c1       	rjmp	.+698    	; 0x328 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5b c1       	rjmp	.+694    	; 0x328 <__bad_interrupt>
      72:	00 00       	nop
      74:	59 c1       	rjmp	.+690    	; 0x328 <__bad_interrupt>
      76:	00 00       	nop
      78:	57 c1       	rjmp	.+686    	; 0x328 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <__vector_16>
      80:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__vector_32>
      84:	51 c1       	rjmp	.+674    	; 0x328 <__bad_interrupt>
      86:	00 00       	nop
      88:	4f c1       	rjmp	.+670    	; 0x328 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__vector_20>
      90:	4b c1       	rjmp	.+662    	; 0x328 <__bad_interrupt>
      92:	00 00       	nop
      94:	49 c1       	rjmp	.+658    	; 0x328 <__bad_interrupt>
      96:	00 00       	nop
      98:	47 c1       	rjmp	.+654    	; 0x328 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	45 c1       	rjmp	.+650    	; 0x328 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	43 c1       	rjmp	.+646    	; 0x328 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <__vector_16>
      a8:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <__vector_42>
      ac:	3d c1       	rjmp	.+634    	; 0x328 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3b c1       	rjmp	.+630    	; 0x328 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__vector_20>
      b8:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <__vector_16>
      bc:	0c 94 46 29 	jmp	0x528c	; 0x528c <__vector_47>
      c0:	33 c1       	rjmp	.+614    	; 0x328 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	31 c1       	rjmp	.+610    	; 0x328 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__vector_20>
      cc:	2d c1       	rjmp	.+602    	; 0x328 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2b c1       	rjmp	.+598    	; 0x328 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	29 c1       	rjmp	.+594    	; 0x328 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_54>
      dc:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_55>
      e0:	23 c1       	rjmp	.+582    	; 0x328 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	99 05       	cpc	r25, r9
      e6:	bd 04       	cpc	r11, r13
      e8:	d3 04       	cpc	r13, r3
      ea:	ef 04       	cpc	r14, r15
      ec:	0b 05       	cpc	r16, r11
      ee:	21 05       	cpc	r18, r1
      f0:	3d 05       	cpc	r19, r13
      f2:	59 05       	cpc	r21, r9
      f4:	75 05       	cpc	r23, r5
      f6:	90 08       	sbc	r9, r0
      f8:	f5 09       	sbc	r31, r5
      fa:	f1 09       	sbc	r31, r1
      fc:	f5 09       	sbc	r31, r5
      fe:	59 08       	sbc	r5, r9
     100:	1d 09       	sbc	r17, r13
     102:	33 09       	sbc	r19, r3
     104:	6d 08       	sbc	r6, r13
     106:	a3 08       	sbc	r10, r3
     108:	f5 09       	sbc	r31, r5
     10a:	c8 08       	sbc	r12, r8
     10c:	f5 09       	sbc	r31, r5
     10e:	f5 09       	sbc	r31, r5
     110:	f5 09       	sbc	r31, r5
     112:	f5 09       	sbc	r31, r5
     114:	f5 09       	sbc	r31, r5
     116:	d9 08       	sbc	r13, r9
     118:	ea 08       	sbc	r14, r10
     11a:	f5 09       	sbc	r31, r5
     11c:	b5 09       	sbc	r27, r5
     11e:	eb 09       	sbc	r30, r11
     120:	f1 09       	sbc	r31, r1
     122:	4b 09       	sbc	r20, r11
     124:	f5 09       	sbc	r31, r5
     126:	f5 09       	sbc	r31, r5
     128:	f5 09       	sbc	r31, r5
     12a:	f5 09       	sbc	r31, r5
     12c:	f5 09       	sbc	r31, r5
     12e:	f5 09       	sbc	r31, r5
     130:	f5 09       	sbc	r31, r5
     132:	f5 09       	sbc	r31, r5
     134:	f5 09       	sbc	r31, r5
     136:	f5 09       	sbc	r31, r5
     138:	f5 09       	sbc	r31, r5
     13a:	f5 09       	sbc	r31, r5
     13c:	f5 09       	sbc	r31, r5
     13e:	f5 09       	sbc	r31, r5
     140:	f5 09       	sbc	r31, r5
     142:	f5 09       	sbc	r31, r5
     144:	f5 09       	sbc	r31, r5
     146:	f5 09       	sbc	r31, r5
     148:	f5 09       	sbc	r31, r5
     14a:	f5 09       	sbc	r31, r5
     14c:	f5 09       	sbc	r31, r5
     14e:	f5 09       	sbc	r31, r5
     150:	f5 09       	sbc	r31, r5
     152:	f5 09       	sbc	r31, r5
     154:	f5 09       	sbc	r31, r5
     156:	f5 09       	sbc	r31, r5
     158:	f5 09       	sbc	r31, r5
     15a:	f5 09       	sbc	r31, r5
     15c:	b5 09       	sbc	r27, r5
     15e:	eb 09       	sbc	r30, r11
     160:	48 09       	sbc	r20, r8
     162:	79 09       	sbc	r23, r9
     164:	46 12       	cpse	r4, r22
     166:	49 12       	cpse	r4, r25
     168:	38 12       	cpse	r3, r24
     16a:	3c 12       	cpse	r3, r28
     16c:	42 12       	cpse	r4, r18
     16e:	80 12       	cpse	r8, r16
     170:	4d 12       	cpse	r4, r29
     172:	51 12       	cpse	r5, r17
     174:	57 12       	cpse	r5, r23
     176:	5b 12       	cpse	r5, r27
     178:	5f 12       	cpse	r5, r31
     17a:	65 12       	cpse	r6, r21
     17c:	69 12       	cpse	r6, r25
     17e:	6d 12       	cpse	r6, r29
     180:	80 12       	cpse	r8, r16
     182:	73 12       	cpse	r7, r19
     184:	77 12       	cpse	r7, r23
     186:	7b 12       	cpse	r7, r27

00000188 <__trampolines_end>:
     188:	00 00       	nop
     18a:	0a 0b       	sbc	r16, r26
     18c:	02 09       	sbc	r16, r2
     18e:	0c 0d       	add	r16, r12
     190:	0e 08       	sbc	r0, r14
     192:	07 03       	mulsu	r16, r23
     194:	04 01       	movw	r0, r8
	...
     1b2:	00 00       	nop
     1b4:	12 11       	cpse	r17, r2
     1b6:	10 00       	.word	0x0010	; ????
	...

000001ce <digital_pin_to_bit_mask_PGM>:
     1ce:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1de:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1ee:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1fe:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     20e:	04 08 10 20 40 80                                   ... @.

00000214 <digital_pin_to_port_PGM>:
     214:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     224:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     234:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     244:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     254:	0b 0b 0b 0b 0b 0b                                   ......

0000025a <port_to_input_PGM>:
     25a:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     26a:	00 01 00 00 03 01 06 01 09 01                       ..........

00000274 <port_to_output_PGM>:
     274:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     284:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000028e <port_to_mode_PGM>:
     28e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     29e:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002a8 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     2a8:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000002b8 <__ctors_start>:
     2b8:	bc 0a       	sbc	r11, r28
     2ba:	eb 0e       	add	r14, r27
     2bc:	80 0f       	add	r24, r16
     2be:	1a 16       	cp	r1, r26
     2c0:	10 19       	sub	r17, r0
     2c2:	62 1c       	adc	r6, r2
     2c4:	1e 2f       	mov	r17, r30

000002c6 <__ctors_end>:
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d1 e2       	ldi	r29, 0x21	; 33
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	0c bf       	out	0x3c, r16	; 60

000002d6 <__do_copy_data>:
     2d6:	15 e0       	ldi	r17, 0x05	; 5
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b2 e0       	ldi	r27, 0x02	; 2
     2dc:	e6 ec       	ldi	r30, 0xC6	; 198
     2de:	fb e6       	ldi	r31, 0x6B	; 107
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	aa 30       	cpi	r26, 0x0A	; 10
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	2c e0       	ldi	r18, 0x0C	; 12
     2f2:	aa e0       	ldi	r26, 0x0A	; 10
     2f4:	b5 e0       	ldi	r27, 0x05	; 5
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a6 31       	cpi	r26, 0x16	; 22
     2fc:	b2 07       	cpc	r27, r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>

00000300 <__do_global_ctors>:
     300:	11 e0       	ldi	r17, 0x01	; 1
     302:	c3 e6       	ldi	r28, 0x63	; 99
     304:	d1 e0       	ldi	r29, 0x01	; 1
     306:	00 e0       	ldi	r16, 0x00	; 0
     308:	06 c0       	rjmp	.+12     	; 0x316 <__do_global_ctors+0x16>
     30a:	21 97       	sbiw	r28, 0x01	; 1
     30c:	01 09       	sbc	r16, r1
     30e:	80 2f       	mov	r24, r16
     310:	fe 01       	movw	r30, r28
     312:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <__tablejump2__>
     316:	cc 35       	cpi	r28, 0x5C	; 92
     318:	d1 07       	cpc	r29, r17
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	08 07       	cpc	r16, r24
     31e:	a9 f7       	brne	.-22     	; 0x30a <__do_global_ctors+0xa>
     320:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <main>
     324:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <_exit>

00000328 <__bad_interrupt>:
     328:	6b ce       	rjmp	.-810    	; 0x0 <__vectors>

0000032a <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     32a:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     32c:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     32e:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     330:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     332:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     334:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     336:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     338:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     33a:	05 c0       	rjmp	.+10     	; 0x346 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     33c:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     33e:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     340:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     342:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     344:	61 f1       	breq	.+88     	; 0x39e <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     346:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     348:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     34a:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     34c:	b9 f3       	breq	.-18     	; 0x33c <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     34e:	05 c0       	rjmp	.+10     	; 0x35a <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     350:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     352:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     354:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     356:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     358:	11 f1       	breq	.+68     	; 0x39e <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     35a:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     35c:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     35e:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     360:	f7 cf       	rjmp	.-18     	; 0x350 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     362:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     364:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     366:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     368:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     36a:	0a c0       	rjmp	.+20     	; 0x380 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     36c:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     36e:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     370:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     372:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     374:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     376:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     378:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     37a:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     37c:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     37e:	79 f0       	breq	.+30     	; 0x39e <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     380:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     382:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     384:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     386:	91 f3       	breq	.-28     	; 0x36c <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     388:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     38a:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     38c:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     38e:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     390:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     392:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     394:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     396:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     398:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     39a:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     39c:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     39e:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     3a0:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     3a2:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     3a4:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     3a6:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     3a8:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     3aa:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     3ac:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     3ae:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     3b0:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     3b2:	08 95       	ret

000003b4 <setup>:
	{
		return true;
	}

	return false;
}
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	6b 97       	sbiw	r28, 0x1b	; 27
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	26 e0       	ldi	r18, 0x06	; 6
     3ca:	40 e8       	ldi	r20, 0x80	; 128
     3cc:	55 e2       	ldi	r21, 0x25	; 37
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	8f eb       	ldi	r24, 0xBF	; 191
     3d4:	95 e0       	ldi	r25, 0x05	; 5
     3d6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN14HardwareSerial5beginEmh>
     3da:	26 e0       	ldi	r18, 0x06	; 6
     3dc:	40 e8       	ldi	r20, 0x80	; 128
     3de:	55 e2       	ldi	r21, 0x25	; 37
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	8c e5       	ldi	r24, 0x5C	; 92
     3e6:	96 e0       	ldi	r25, 0x06	; 6
     3e8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN14HardwareSerial5beginEmh>
     3ec:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     3f0:	80 e1       	ldi	r24, 0x10	; 16
     3f2:	95 e0       	ldi	r25, 0x05	; 5
     3f4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
     3f8:	64 e0       	ldi	r22, 0x04	; 4
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	95 e0       	ldi	r25, 0x05	; 5
     3fe:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
     402:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     406:	8e e0       	ldi	r24, 0x0E	; 14
     408:	95 e0       	ldi	r25, 0x05	; 5
     40a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
     40e:	64 e0       	ldi	r22, 0x04	; 4
     410:	8e e0       	ldi	r24, 0x0E	; 14
     412:	95 e0       	ldi	r25, 0x05	; 5
     414:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
     418:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     41c:	8c e0       	ldi	r24, 0x0C	; 12
     41e:	95 e0       	ldi	r25, 0x05	; 5
     420:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
     424:	64 e0       	ldi	r22, 0x04	; 4
     426:	8c e0       	ldi	r24, 0x0C	; 12
     428:	95 e0       	ldi	r25, 0x05	; 5
     42a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
     42e:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     432:	8a e0       	ldi	r24, 0x0A	; 10
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
     43a:	64 e0       	ldi	r22, 0x04	; 4
     43c:	8a e0       	ldi	r24, 0x0A	; 10
     43e:	95 e0       	ldi	r25, 0x05	; 5
     440:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
     444:	69 e0       	ldi	r22, 0x09	; 9
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	82 e1       	ldi	r24, 0x12	; 18
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	0e 94 39 2a 	call	0x5472	; 0x5472 <_ZN5Servo6attachEi>
     450:	6c e2       	ldi	r22, 0x2C	; 44
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
     45c:	6a e5       	ldi	r22, 0x5A	; 90
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	82 e1       	ldi	r24, 0x12	; 18
     462:	95 e0       	ldi	r25, 0x05	; 5
     464:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN5Servo5writeEi>
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	85 e2       	ldi	r24, 0x25	; 37
     46c:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	87 e2       	ldi	r24, 0x27	; 39
     474:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	8e e5       	ldi	r24, 0x5E	; 94
     47c:	95 e0       	ldi	r25, 0x05	; 5
     47e:	0e 94 06 2c 	call	0x580c	; 0x580c <_ZN6TMRpcm9setVolumeEc>
     482:	8e e2       	ldi	r24, 0x2E	; 46
     484:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <tmrpcm>
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	85 e3       	ldi	r24, 0x35	; 53
     48c:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
     490:	65 e3       	ldi	r22, 0x35	; 53
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	97 e0       	ldi	r25, 0x07	; 7
     496:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN5SDLib7SDClass5beginEh>
     49a:	81 11       	cpse	r24, r1
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     49e:	6e e6       	ldi	r22, 0x6E	; 110
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	1c c0       	rjmp	.+56     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	46 e7       	ldi	r20, 0x76	; 118
     4a8:	52 e0       	ldi	r21, 0x02	; 2
     4aa:	64 e0       	ldi	r22, 0x04	; 4
     4ac:	77 e0       	ldi	r23, 0x07	; 7
     4ae:	ce 01       	movw	r24, r28
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN5SDLib7SDClass4openEPKch>
     4b6:	ce 01       	movw	r24, r28
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN5SDLib4FilecvbEv>
     4be:	88 23       	and	r24, r24
     4c0:	59 f0       	breq	.+22     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4c2:	6c e7       	ldi	r22, 0x7C	; 124
     4c4:	72 e0       	ldi	r23, 0x02	; 2
     4c6:	8f eb       	ldi	r24, 0xBF	; 191
     4c8:	95 e0       	ldi	r25, 0x05	; 5
     4ca:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN5SDLib4File5closeEv>
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4d8:	68 e8       	ldi	r22, 0x88	; 136
     4da:	72 e0       	ldi	r23, 0x02	; 2
     4dc:	8f eb       	ldi	r24, 0xBF	; 191
     4de:	95 e0       	ldi	r25, 0x05	; 5
     4e0:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
     4e4:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
     4e8:	70 93 70 05 	sts	0x0570, r23	; 0x800570 <lastTimeISpoke+0x1>
     4ec:	60 93 6f 05 	sts	0x056F, r22	; 0x80056f <lastTimeISpoke>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <fileNameIndex+0x1>
     4f8:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <fileNameIndex>
     4fc:	6b 96       	adiw	r28, 0x1b	; 27
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <_Z23GetMinDistanceFromArrayv>:
//////////////////////////////////////////////////////////////////////////
/// Get minimum value in the array
/// <returns> index for the minimum value </returns>
//////////////////////////////////////////////////////////////////////////
int GetMinDistanceFromArray()
{
     50e:	4f 92       	push	r4
     510:	5f 92       	push	r5
     512:	6f 92       	push	r6
     514:	7f 92       	push	r7
     516:	8f 92       	push	r8
     518:	9f 92       	push	r9
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
	unsigned long minDistance = srfDistanceArray[0];
     526:	80 90 15 05 	lds	r8, 0x0515	; 0x800515 <srfDistanceArray>
     52a:	90 90 16 05 	lds	r9, 0x0516	; 0x800516 <srfDistanceArray+0x1>
     52e:	a0 90 17 05 	lds	r10, 0x0517	; 0x800517 <srfDistanceArray+0x2>
     532:	b0 90 18 05 	lds	r11, 0x0518	; 0x800518 <srfDistanceArray+0x3>
	int index = 0;
	for (int i = 1; i < numberOfSteps - 1; i++)
     536:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <numberOfSteps>
     53a:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <numberOfSteps+0x1>
     53e:	41 50       	subi	r20, 0x01	; 1
     540:	51 09       	sbc	r21, r1
	{
		if (srfDistanceArray[i] > minimumDistanceThreshold && srfDistanceArray[i] < minDistance)
     542:	40 90 0e 02 	lds	r4, 0x020E	; 0x80020e <minimumDistanceThreshold>
     546:	50 90 0f 02 	lds	r5, 0x020F	; 0x80020f <minimumDistanceThreshold+0x1>
     54a:	60 90 10 02 	lds	r6, 0x0210	; 0x800210 <minimumDistanceThreshold+0x2>
     54e:	70 90 11 02 	lds	r7, 0x0211	; 0x800211 <minimumDistanceThreshold+0x3>
     552:	e9 e1       	ldi	r30, 0x19	; 25
     554:	f5 e0       	ldi	r31, 0x05	; 5
//////////////////////////////////////////////////////////////////////////
int GetMinDistanceFromArray()
{
	unsigned long minDistance = srfDistanceArray[0];
	int index = 0;
	for (int i = 1; i < numberOfSteps - 1; i++)
     556:	21 e0       	ldi	r18, 0x01	; 1
     558:	30 e0       	ldi	r19, 0x00	; 0
/// <returns> index for the minimum value </returns>
//////////////////////////////////////////////////////////////////////////
int GetMinDistanceFromArray()
{
	unsigned long minDistance = srfDistanceArray[0];
	int index = 0;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 1; i < numberOfSteps - 1; i++)
     55e:	24 17       	cp	r18, r20
     560:	35 07       	cpc	r19, r21
     562:	a4 f4       	brge	.+40     	; 0x58c <_Z23GetMinDistanceFromArrayv+0x7e>
	{
		if (srfDistanceArray[i] > minimumDistanceThreshold && srfDistanceArray[i] < minDistance)
     564:	c1 90       	ld	r12, Z+
     566:	d1 90       	ld	r13, Z+
     568:	e1 90       	ld	r14, Z+
     56a:	f1 90       	ld	r15, Z+
     56c:	4c 14       	cp	r4, r12
     56e:	5d 04       	cpc	r5, r13
     570:	6e 04       	cpc	r6, r14
     572:	7f 04       	cpc	r7, r15
     574:	40 f4       	brcc	.+16     	; 0x586 <_Z23GetMinDistanceFromArrayv+0x78>
     576:	c8 14       	cp	r12, r8
     578:	d9 04       	cpc	r13, r9
     57a:	ea 04       	cpc	r14, r10
     57c:	fb 04       	cpc	r15, r11
     57e:	18 f4       	brcc	.+6      	; 0x586 <_Z23GetMinDistanceFromArrayv+0x78>
     580:	c9 01       	movw	r24, r18
     582:	46 01       	movw	r8, r12
     584:	57 01       	movw	r10, r14
//////////////////////////////////////////////////////////////////////////
int GetMinDistanceFromArray()
{
	unsigned long minDistance = srfDistanceArray[0];
	int index = 0;
	for (int i = 1; i < numberOfSteps - 1; i++)
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
     58a:	e9 cf       	rjmp	.-46     	; 0x55e <_Z23GetMinDistanceFromArrayv+0x50>
			//  }
		}
	}

	return index;
}
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	9f 90       	pop	r9
     59a:	8f 90       	pop	r8
     59c:	7f 90       	pop	r7
     59e:	6f 90       	pop	r6
     5a0:	5f 90       	pop	r5
     5a2:	4f 90       	pop	r4
     5a4:	08 95       	ret

000005a6 <_Z33MeasureDistanceWithUltrasonicInCmb>:
//*********************************************************************************************************
// Calculates the distance to an obstacle in front of the ultra sonic sensor.
// Returns the distance in centimeters.
//*********************************************************************************************************
float MeasureDistanceWithUltrasonicInCm(bool takeAverage)
{
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
	float measurement;
	int numberOfMeasurements = 1;
	unsigned long pulseTimeMicroSecMeasurement = 0;
	
	if(takeAverage)
     5b2:	88 23       	and	r24, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <_Z33MeasureDistanceWithUltrasonicInCmb+0x12>
     5b6:	42 c0       	rjmp	.+132    	; 0x63c <_Z33MeasureDistanceWithUltrasonicInCmb+0x96>
     5b8:	c3 e0       	ldi	r28, 0x03	; 3
     5ba:	d0 e0       	ldi	r29, 0x00	; 0
     5bc:	c1 2c       	mov	r12, r1
     5be:	d1 2c       	mov	r13, r1
     5c0:	76 01       	movw	r14, r12
		numberOfMeasurements = 3;
	}
	
	for(int i = 0; i < numberOfMeasurements; i++)
	{
		digitalWrite(TRIG, LOW);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	85 e2       	ldi	r24, 0x25	; 37
     5c6:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>
		delayMicroseconds(2);
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 99 11 	call	0x2332	; 0x2332 <delayMicroseconds>

		digitalWrite(TRIG, HIGH);
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	85 e2       	ldi	r24, 0x25	; 37
     5d6:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>
		delayMicroseconds(10);
     5da:	8a e0       	ldi	r24, 0x0A	; 10
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 99 11 	call	0x2332	; 0x2332 <delayMicroseconds>
		digitalWrite(TRIG, LOW);
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	85 e2       	ldi	r24, 0x25	; 37
     5e6:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>

		// wait for the pulse to return. The pulse goes from low to HIGH to low, so we specify
		// that we want a HIGH-going pulse below: result in micro seconds
		pulseTimeMicroSecMeasurement += pulseIn(ECHO, HIGH);
     5ea:	20 e4       	ldi	r18, 0x40	; 64
     5ec:	32 e4       	ldi	r19, 0x42	; 66
     5ee:	4f e0       	ldi	r20, 0x0F	; 15
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	87 e2       	ldi	r24, 0x27	; 39
     5f6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <pulseIn>
     5fa:	c6 0e       	add	r12, r22
     5fc:	d7 1e       	adc	r13, r23
     5fe:	e8 1e       	adc	r14, r24
     600:	f9 1e       	adc	r15, r25
     602:	21 97       	sbiw	r28, 0x01	; 1
	if(takeAverage)
	{
		numberOfMeasurements = 3;
	}
	
	for(int i = 0; i < numberOfMeasurements; i++)
     604:	f1 f6       	brne	.-68     	; 0x5c2 <_Z33MeasureDistanceWithUltrasonicInCmb+0x1c>
	int numberOfMeasurements = 1;
	unsigned long pulseTimeMicroSecMeasurement = 0;
	
	if(takeAverage)
	{
		numberOfMeasurements = 3;
     606:	23 e0       	ldi	r18, 0x03	; 3
     608:	30 e0       	ldi	r19, 0x00	; 0
	// Step by step calculations replaced by one step.
	// unsigned long pulseTimeSeconds = pulseTimeMicroSeconds / 1000000;
	// float distanceInMeters = pulseTimeSeconds * speedOfSound / 2;
	// return distanceInMeters * 100;
	pulseTimeMicroSecMeasurement /= numberOfMeasurements;
	return pulseTimeMicroSecMeasurement / 58.82352941176471;
     60a:	03 2e       	mov	r0, r19
     60c:	00 0c       	add	r0, r0
     60e:	44 0b       	sbc	r20, r20
     610:	55 0b       	sbc	r21, r21
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__udivmodsi4>
     61a:	ca 01       	movw	r24, r20
     61c:	b9 01       	movw	r22, r18
     61e:	0e 94 06 0c 	call	0x180c	; 0x180c <__floatunsisf>
     622:	2b e4       	ldi	r18, 0x4B	; 75
     624:	3b e4       	ldi	r19, 0x4B	; 75
     626:	4b e6       	ldi	r20, 0x6B	; 107
     628:	52 e4       	ldi	r21, 0x42	; 66
     62a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__divsf3>
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	08 95       	ret
		numberOfMeasurements = 3;
	}
	
	for(int i = 0; i < numberOfMeasurements; i++)
	{
		digitalWrite(TRIG, LOW);
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	85 e2       	ldi	r24, 0x25	; 37
     640:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>
		delayMicroseconds(2);
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 99 11 	call	0x2332	; 0x2332 <delayMicroseconds>

		digitalWrite(TRIG, HIGH);
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	85 e2       	ldi	r24, 0x25	; 37
     650:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>
		delayMicroseconds(10);
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 99 11 	call	0x2332	; 0x2332 <delayMicroseconds>
		digitalWrite(TRIG, LOW);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	85 e2       	ldi	r24, 0x25	; 37
     660:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>

		// wait for the pulse to return. The pulse goes from low to HIGH to low, so we specify
		// that we want a HIGH-going pulse below: result in micro seconds
		pulseTimeMicroSecMeasurement += pulseIn(ECHO, HIGH);
     664:	20 e4       	ldi	r18, 0x40	; 64
     666:	32 e4       	ldi	r19, 0x42	; 66
     668:	4f e0       	ldi	r20, 0x0F	; 15
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	87 e2       	ldi	r24, 0x27	; 39
     670:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <pulseIn>
     674:	6b 01       	movw	r12, r22
     676:	7c 01       	movw	r14, r24
// Returns the distance in centimeters.
//*********************************************************************************************************
float MeasureDistanceWithUltrasonicInCm(bool takeAverage)
{
	float measurement;
	int numberOfMeasurements = 1;
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	c6 cf       	rjmp	.-116    	; 0x60a <_Z33MeasureDistanceWithUltrasonicInCmb+0x64>

0000067e <_Z22FindTheNearestObstaclev>:
//
// Returns: the angle where the obstacle is located. If nothing can be
// found with the parameter maximumDistanceThreshold it will return -1
//////////////////////////////////////////////////////////////////////////
int FindTheNearestObstacle()
{
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	62 97       	sbiw	r28, 0x12	; 18
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	95 e1       	ldi	r25, 0x15	; 21
     6a4:	a9 2e       	mov	r10, r25
     6a6:	95 e0       	ldi	r25, 0x05	; 5
     6a8:	b9 2e       	mov	r11, r25
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	10 e0       	ldi	r17, 0x00	; 0
	int nearestObstaclePosition;
	unsigned long nearestObstacleDistance;

	for (int position = 0; position < numberOfSteps; position++)
     6ae:	e1 2c       	mov	r14, r1
     6b0:	f1 2c       	mov	r15, r1
     6b2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <numberOfSteps>
     6b6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <numberOfSteps+0x1>
     6ba:	e8 16       	cp	r14, r24
     6bc:	f9 06       	cpc	r15, r25
     6be:	0c f0       	brlt	.+2      	; 0x6c2 <_Z22FindTheNearestObstaclev+0x44>
     6c0:	5c c0       	rjmp	.+184    	; 0x77a <_Z22FindTheNearestObstaclev+0xfc>
	{
		// Tell servo to go to 180 degree, with step size SENSOR_STEP
		// Move to next position
		servoObjectFinderAndDistance.write(position * SENSOR_STEP);
     6c2:	b8 01       	movw	r22, r16
     6c4:	82 e1       	ldi	r24, 0x12	; 18
     6c6:	95 e0       	ldi	r25, 0x05	; 5
     6c8:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN5Servo5writeEi>

		if (position == 0)
     6cc:	e1 14       	cp	r14, r1
     6ce:	f1 04       	cpc	r15, r1
     6d0:	31 f4       	brne	.+12     	; 0x6de <_Z22FindTheNearestObstaclev+0x60>
		{
			// Pause to get it time to move to first position
			delay(1000);
     6d2:	68 ee       	ldi	r22, 0xE8	; 232
     6d4:	73 e0       	ldi	r23, 0x03	; 3
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
		}

		// Short pause to allow it to move, min 20ms
		delay(31);
     6de:	6f e1       	ldi	r22, 0x1F	; 31
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
		srfDistanceArray[position] = MeasureDistanceWithUltrasonicInCm(false);
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	5c df       	rcall	.-328    	; 0x5a6 <_Z33MeasureDistanceWithUltrasonicInCmb>
     6ee:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__fixunssfsi>
     6f2:	ab 01       	movw	r20, r22
     6f4:	bc 01       	movw	r22, r24
     6f6:	f5 01       	movw	r30, r10
     6f8:	41 93       	st	Z+, r20
     6fa:	51 93       	st	Z+, r21
     6fc:	61 93       	st	Z+, r22
     6fe:	71 93       	st	Z+, r23
     700:	5f 01       	movw	r10, r30

		Serial.println("Angle: " + String(position*SENSOR_STEP) + ", Distance: " + String(srfDistanceArray[position]) + " cm");
     702:	2a e0       	ldi	r18, 0x0A	; 10
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN6StringC1Emh>
     70c:	4a e0       	ldi	r20, 0x0A	; 10
     70e:	b8 01       	movw	r22, r16
     710:	ce 01       	movw	r24, r28
     712:	0d 96       	adiw	r24, 0x0d	; 13
     714:	0e 94 2d 14 	call	0x285a	; 0x285a <_ZN6StringC1Eih>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     718:	69 e9       	ldi	r22, 0x99	; 153
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	ce 01       	movw	r24, r28
     71e:	07 96       	adiw	r24, 0x07	; 7
     720:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN6StringC1EPKc>
     724:	be 01       	movw	r22, r28
     726:	63 5f       	subi	r22, 0xF3	; 243
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	ce 01       	movw	r24, r28
     72c:	07 96       	adiw	r24, 0x07	; 7
     72e:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZplRK15StringSumHelperRK6String>
     732:	61 ea       	ldi	r22, 0xA1	; 161
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZplRK15StringSumHelperPKc>
     73a:	be 01       	movw	r22, r28
     73c:	6f 5f       	subi	r22, 0xFF	; 255
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZplRK15StringSumHelperRK6String>
     744:	6e ea       	ldi	r22, 0xAE	; 174
     746:	72 e0       	ldi	r23, 0x02	; 2
     748:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZplRK15StringSumHelperPKc>
     74c:	bc 01       	movw	r22, r24
     74e:	8f eb       	ldi	r24, 0xBF	; 191
     750:	95 e0       	ldi	r25, 0x05	; 5
     752:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     756:	ce 01       	movw	r24, r28
     758:	07 96       	adiw	r24, 0x07	; 7
     75a:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN6StringD1Ev>
     75e:	ce 01       	movw	r24, r28
     760:	0d 96       	adiw	r24, 0x0d	; 13
     762:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN6StringD1Ev>
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN6StringD1Ev>
int FindTheNearestObstacle()
{
	int nearestObstaclePosition;
	unsigned long nearestObstacleDistance;

	for (int position = 0; position < numberOfSteps; position++)
     76e:	ff ef       	ldi	r31, 0xFF	; 255
     770:	ef 1a       	sub	r14, r31
     772:	ff 0a       	sbc	r15, r31
     774:	06 5f       	subi	r16, 0xF6	; 246
     776:	1f 4f       	sbci	r17, 0xFF	; 255
		srfDistanceArray[position] = MeasureDistanceWithUltrasonicInCm(false);

		Serial.println("Angle: " + String(position*SENSOR_STEP) + ", Distance: " + String(srfDistanceArray[position]) + " cm");
	}

	nearestObstaclePosition = GetMinDistanceFromArray();
     778:	9c cf       	rjmp	.-200    	; 0x6b2 <_Z22FindTheNearestObstaclev+0x34>
     77a:	c9 de       	rcall	.-622    	; 0x50e <_Z23GetMinDistanceFromArrayv>
     77c:	7c 01       	movw	r14, r24
	nearestObstacleDistance = srfDistanceArray[nearestObstaclePosition];
     77e:	fc 01       	movw	r30, r24
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	eb 5e       	subi	r30, 0xEB	; 235
     78a:	fa 4f       	sbci	r31, 0xFA	; 250
     78c:	80 80       	ld	r8, Z
     78e:	91 80       	ldd	r9, Z+1	; 0x01
     790:	a2 80       	ldd	r10, Z+2	; 0x02
     792:	b3 80       	ldd	r11, Z+3	; 0x03
	Serial.println("nearestObstaclePosition: " + String(nearestObstaclePosition * SENSOR_STEP) + " degrees, " + String(nearestObstacleDistance) +" cm");
     794:	2a e0       	ldi	r18, 0x0A	; 10
     796:	b5 01       	movw	r22, r10
     798:	a4 01       	movw	r20, r8
     79a:	ce 01       	movw	r24, r28
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN6StringC1Emh>
     7a2:	8a e0       	ldi	r24, 0x0A	; 10
     7a4:	8e 9d       	mul	r24, r14
     7a6:	80 01       	movw	r16, r0
     7a8:	8f 9d       	mul	r24, r15
     7aa:	10 0d       	add	r17, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	4a e0       	ldi	r20, 0x0A	; 10
     7b0:	b8 01       	movw	r22, r16
     7b2:	ce 01       	movw	r24, r28
     7b4:	0d 96       	adiw	r24, 0x0d	; 13
     7b6:	0e 94 2d 14 	call	0x285a	; 0x285a <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     7ba:	62 eb       	ldi	r22, 0xB2	; 178
     7bc:	72 e0       	ldi	r23, 0x02	; 2
     7be:	ce 01       	movw	r24, r28
     7c0:	07 96       	adiw	r24, 0x07	; 7
     7c2:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN6StringC1EPKc>
     7c6:	be 01       	movw	r22, r28
     7c8:	63 5f       	subi	r22, 0xF3	; 243
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	07 96       	adiw	r24, 0x07	; 7
     7d0:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZplRK15StringSumHelperRK6String>
     7d4:	6c ec       	ldi	r22, 0xCC	; 204
     7d6:	72 e0       	ldi	r23, 0x02	; 2
     7d8:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZplRK15StringSumHelperPKc>
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZplRK15StringSumHelperRK6String>
     7e6:	6e ea       	ldi	r22, 0xAE	; 174
     7e8:	72 e0       	ldi	r23, 0x02	; 2
     7ea:	0e 94 c2 14 	call	0x2984	; 0x2984 <_ZplRK15StringSumHelperPKc>
     7ee:	bc 01       	movw	r22, r24
     7f0:	8f eb       	ldi	r24, 0xBF	; 191
     7f2:	95 e0       	ldi	r25, 0x05	; 5
     7f4:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     7f8:	ce 01       	movw	r24, r28
     7fa:	07 96       	adiw	r24, 0x07	; 7
     7fc:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN6StringD1Ev>
     800:	ce 01       	movw	r24, r28
     802:	0d 96       	adiw	r24, 0x0d	; 13
     804:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN6StringD1Ev>
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN6StringD1Ev>
	if (nearestObstacleDistance < maximumDistanceThreshold)
     810:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <maximumDistanceThreshold>
     814:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <maximumDistanceThreshold+0x1>
     818:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <maximumDistanceThreshold+0x2>
     81c:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <maximumDistanceThreshold+0x3>
     820:	88 16       	cp	r8, r24
     822:	99 06       	cpc	r9, r25
     824:	aa 06       	cpc	r10, r26
     826:	bb 06       	cpc	r11, r27
     828:	60 f4       	brcc	.+24     	; 0x842 <_Z22FindTheNearestObstaclev+0x1c4>
	{
		// Tell servo to go to nearest obstacle position
		servoObjectFinderAndDistance.write(nearestObstaclePosition * SENSOR_STEP);
     82a:	b8 01       	movw	r22, r16
     82c:	82 e1       	ldi	r24, 0x12	; 18
     82e:	95 e0       	ldi	r25, 0x05	; 5
     830:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN5Servo5writeEi>

		// Pause to get it time to move
		delay(1500);
     834:	6c ed       	ldi	r22, 0xDC	; 220
     836:	75 e0       	ldi	r23, 0x05	; 5
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
		return nearestObstaclePosition * SENSOR_STEP;
     840:	02 c0       	rjmp	.+4      	; 0x846 <_Z22FindTheNearestObstaclev+0x1c8>
	}

	return -1;
     842:	0f ef       	ldi	r16, 0xFF	; 255
     844:	1f ef       	ldi	r17, 0xFF	; 255
}
     846:	c8 01       	movw	r24, r16
     848:	62 96       	adiw	r28, 0x12	; 18
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	bf 90       	pop	r11
     862:	af 90       	pop	r10
     864:	9f 90       	pop	r9
     866:	8f 90       	pop	r8
     868:	08 95       	ret

0000086a <_Z24ReadIRsensorDistanceInCmi>:
	return pulseTimeMicroSecMeasurement / 58.82352941176471;
}

int ReadIRsensorDistanceInCm(int irSensor)
{
	int distanceIRsensorFront = analogRead(irSensor);
     86a:	0e 94 06 12 	call	0x240c	; 0x240c <analogRead>
	float voltage = distanceIRsensorFront * (5.0 / 1023.0);
	if (distanceIRsensorFront > 17)
     86e:	82 31       	cpi	r24, 0x12	; 18
     870:	91 05       	cpc	r25, r1
     872:	54 f0       	brlt	.+20     	; 0x888 <_Z24ReadIRsensorDistanceInCmi+0x1e>
	{
		// https://home.roboticlab.eu/en/examples/sensor/ir_distance
		int distanceCm = 5461 / (distanceIRsensorFront - 17) - 2;
     874:	bc 01       	movw	r22, r24
     876:	61 51       	subi	r22, 0x11	; 17
     878:	71 09       	sbc	r23, r1
     87a:	85 e5       	ldi	r24, 0x55	; 85
     87c:	95 e1       	ldi	r25, 0x15	; 21
     87e:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <__divmodhi4>
		return distanceCm;
     882:	cb 01       	movw	r24, r22
     884:	02 97       	sbiw	r24, 0x02	; 2
     886:	08 95       	ret
	}
	return 5000;
     888:	88 e8       	ldi	r24, 0x88	; 136
     88a:	93 e1       	ldi	r25, 0x13	; 19
}
     88c:	08 95       	ret

0000088e <_Z5Speed5Motori>:

void Speed(Motor motor, int newSpeed)
{
     88e:	cf 93       	push	r28
     890:	c6 2f       	mov	r28, r22
	switch (motor)
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	c1 f1       	breq	.+112    	; 0x906 <_Z5Speed5Motori+0x78>
     896:	68 f4       	brcc	.+26     	; 0x8b2 <_Z5Speed5Motori+0x24>
     898:	88 23       	and	r24, r24
     89a:	69 f1       	breq	.+90     	; 0x8f6 <_Z5Speed5Motori+0x68>
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	09 f0       	breq	.+2      	; 0x8a2 <_Z5Speed5Motori+0x14>
     8a0:	45 c0       	rjmp	.+138    	; 0x92c <_Z5Speed5Motori+0x9e>
		FrontLeftMotor.setSpeed(newSpeed);
		FrontLeftMotor.run(RELEASE);
		break;

		case FrontRight:
		FrontRightMotor.setSpeed(newSpeed);
     8a2:	8e e0       	ldi	r24, 0x0E	; 14
     8a4:	95 e0       	ldi	r25, 0x05	; 5
     8a6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		FrontRightMotor.run(RELEASE);
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	8e e0       	ldi	r24, 0x0E	; 14
     8ae:	95 e0       	ldi	r25, 0x05	; 5
     8b0:	3a c0       	rjmp	.+116    	; 0x926 <_Z5Speed5Motori+0x98>
	return 5000;
}

void Speed(Motor motor, int newSpeed)
{
	switch (motor)
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	81 f1       	breq	.+96     	; 0x916 <_Z5Speed5Motori+0x88>
     8b6:	84 30       	cpi	r24, 0x04	; 4
     8b8:	c9 f5       	brne	.+114    	; 0x92c <_Z5Speed5Motori+0x9e>
		BackRightMotor.setSpeed(newSpeed);
		BackRightMotor.run(RELEASE);
		break;

		case All:
		FrontLeftMotor.setSpeed(newSpeed);
     8ba:	80 e1       	ldi	r24, 0x10	; 16
     8bc:	95 e0       	ldi	r25, 0x05	; 5
     8be:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		FrontLeftMotor.run(RELEASE);
     8c2:	64 e0       	ldi	r22, 0x04	; 4
     8c4:	80 e1       	ldi	r24, 0x10	; 16
     8c6:	95 e0       	ldi	r25, 0x05	; 5
     8c8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.setSpeed(newSpeed);
     8cc:	6c 2f       	mov	r22, r28
     8ce:	8e e0       	ldi	r24, 0x0E	; 14
     8d0:	95 e0       	ldi	r25, 0x05	; 5
     8d2:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		FrontRightMotor.run(RELEASE);
     8d6:	64 e0       	ldi	r22, 0x04	; 4
     8d8:	8e e0       	ldi	r24, 0x0E	; 14
     8da:	95 e0       	ldi	r25, 0x05	; 5
     8dc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.setSpeed(newSpeed);
     8e0:	6c 2f       	mov	r22, r28
     8e2:	8c e0       	ldi	r24, 0x0C	; 12
     8e4:	95 e0       	ldi	r25, 0x05	; 5
     8e6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		BackLeftMotor.run(RELEASE);
     8ea:	64 e0       	ldi	r22, 0x04	; 4
     8ec:	8c e0       	ldi	r24, 0x0C	; 12
     8ee:	95 e0       	ldi	r25, 0x05	; 5
     8f0:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
     8f4:	10 c0       	rjmp	.+32     	; 0x916 <_Z5Speed5Motori+0x88>
void Speed(Motor motor, int newSpeed)
{
	switch (motor)
	{
		case FrontLeft:
		FrontLeftMotor.setSpeed(newSpeed);
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	95 e0       	ldi	r25, 0x05	; 5
     8fa:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		FrontLeftMotor.run(RELEASE);
     8fe:	64 e0       	ldi	r22, 0x04	; 4
     900:	80 e1       	ldi	r24, 0x10	; 16
     902:	95 e0       	ldi	r25, 0x05	; 5
     904:	10 c0       	rjmp	.+32     	; 0x926 <_Z5Speed5Motori+0x98>
		FrontRightMotor.setSpeed(newSpeed);
		FrontRightMotor.run(RELEASE);
		break;

		case BackLeft:
		BackLeftMotor.setSpeed(newSpeed);
     906:	8c e0       	ldi	r24, 0x0C	; 12
     908:	95 e0       	ldi	r25, 0x05	; 5
     90a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		BackLeftMotor.run(RELEASE);
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	95 e0       	ldi	r25, 0x05	; 5
     914:	08 c0       	rjmp	.+16     	; 0x926 <_Z5Speed5Motori+0x98>
		FrontLeftMotor.run(RELEASE);
		FrontRightMotor.setSpeed(newSpeed);
		FrontRightMotor.run(RELEASE);
		BackLeftMotor.setSpeed(newSpeed);
		BackLeftMotor.run(RELEASE);
		BackRightMotor.setSpeed(newSpeed);
     916:	6c 2f       	mov	r22, r28
     918:	8a e0       	ldi	r24, 0x0A	; 10
     91a:	95 e0       	ldi	r25, 0x05	; 5
     91c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN10AF_DCMotor8setSpeedEh>
		BackRightMotor.run(RELEASE);
     920:	64 e0       	ldi	r22, 0x04	; 4
     922:	8a e0       	ldi	r24, 0x0A	; 10
     924:	95 e0       	ldi	r25, 0x05	; 5
		break;
	}
}
     926:	cf 91       	pop	r28
		FrontRightMotor.setSpeed(newSpeed);
		FrontRightMotor.run(RELEASE);
		BackLeftMotor.setSpeed(newSpeed);
		BackLeftMotor.run(RELEASE);
		BackRightMotor.setSpeed(newSpeed);
		BackRightMotor.run(RELEASE);
     928:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		break;
	}
}
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <_Z4Move9Direction>:

void Move(Direction robotMovement)
{
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	cf 93       	push	r28
     93a:	c8 2f       	mov	r28, r24
	int	turnspeed = speed * 0.3;
     93c:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     940:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
     944:	07 2e       	mov	r0, r23
     946:	00 0c       	add	r0, r0
     948:	88 0b       	sbc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	61 d7       	rcall	.+3778   	; 0x1810 <__floatsisf>
     94e:	2a e9       	ldi	r18, 0x9A	; 154
     950:	39 e9       	ldi	r19, 0x99	; 153
     952:	49 e9       	ldi	r20, 0x99	; 153
     954:	5e e3       	ldi	r21, 0x3E	; 62
     956:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3>
     95a:	27 d7       	rcall	.+3662   	; 0x17aa <__fixsfsi>
     95c:	6b 01       	movw	r12, r22
     95e:	7c 01       	movw	r14, r24

	switch (robotMovement)
     960:	8c 2f       	mov	r24, r28
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	89 30       	cpi	r24, 0x09	; 9
     966:	91 05       	cpc	r25, r1
     968:	08 f0       	brcs	.+2      	; 0x96c <_Z4Move9Direction+0x3c>
     96a:	dd c0       	rjmp	.+442    	; 0xb26 <_Z4Move9Direction+0x1f6>
     96c:	fc 01       	movw	r30, r24
     96e:	88 27       	eor	r24, r24
     970:	ee 58       	subi	r30, 0x8E	; 142
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	8f 4f       	sbci	r24, 0xFF	; 255
     976:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <__tablejump2__>
		BackRightMotor.run(RELEASE);
		RobotMovementDirection = Stop;
		break;

		case Forward:
		FrontLeftMotor.run(FORWARD);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	80 e1       	ldi	r24, 0x10	; 16
     97e:	95 e0       	ldi	r25, 0x05	; 5
     980:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(FORWARD);
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	8e e0       	ldi	r24, 0x0E	; 14
     988:	95 e0       	ldi	r25, 0x05	; 5
     98a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(FORWARD);
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	95 e0       	ldi	r25, 0x05	; 5
     994:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(FORWARD);
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	8a e0       	ldi	r24, 0x0A	; 10
     99c:	95 e0       	ldi	r25, 0x05	; 5
     99e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = Forward;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	bd c0       	rjmp	.+378    	; 0xb20 <_Z4Move9Direction+0x1f0>
		break;

		case ForwardLeft:
		Speed(FrontLeft, turnspeed);
     9a6:	b6 01       	movw	r22, r12
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	71 df       	rcall	.-286    	; 0x88e <_Z5Speed5Motori>
		FrontLeftMotor.run(FORWARD);
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	95 e0       	ldi	r25, 0x05	; 5
     9b2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		Speed(BackLeft, turnspeed);
     9b6:	b6 01       	movw	r22, r12
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	69 df       	rcall	.-302    	; 0x88e <_Z5Speed5Motori>
		BackLeftMotor.run(FORWARD);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	8c e0       	ldi	r24, 0x0C	; 12
     9c0:	95 e0       	ldi	r25, 0x05	; 5
     9c2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(FORWARD);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	8e e0       	ldi	r24, 0x0E	; 14
     9ca:	95 e0       	ldi	r25, 0x05	; 5
     9cc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(FORWARD);
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	8a e0       	ldi	r24, 0x0A	; 10
     9d4:	95 e0       	ldi	r25, 0x05	; 5
     9d6:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = ForwardLeft;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	a1 c0       	rjmp	.+322    	; 0xb20 <_Z4Move9Direction+0x1f0>
		break;

		case ForwardRight:
		FrontLeftMotor.run(FORWARD);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	95 e0       	ldi	r25, 0x05	; 5
     9e4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(FORWARD);
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	8c e0       	ldi	r24, 0x0C	; 12
     9ec:	95 e0       	ldi	r25, 0x05	; 5
     9ee:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		Speed(FrontRight, turnspeed);
     9f2:	b6 01       	movw	r22, r12
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	4b df       	rcall	.-362    	; 0x88e <_Z5Speed5Motori>
		FrontRightMotor.run(FORWARD);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	95 e0       	ldi	r25, 0x05	; 5
     9fe:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		Speed(BackRight, turnspeed);
     a02:	b6 01       	movw	r22, r12
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	43 df       	rcall	.-378    	; 0x88e <_Z5Speed5Motori>
		BackRightMotor.run(FORWARD);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	95 e0       	ldi	r25, 0x05	; 5
     a0e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = ForwardRight;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	85 c0       	rjmp	.+266    	; 0xb20 <_Z4Move9Direction+0x1f0>
		break;

		case Backward:
		FrontLeftMotor.run(BACKWARD);
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	80 e1       	ldi	r24, 0x10	; 16
     a1a:	95 e0       	ldi	r25, 0x05	; 5
     a1c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(BACKWARD);
     a20:	62 e0       	ldi	r22, 0x02	; 2
     a22:	8e e0       	ldi	r24, 0x0E	; 14
     a24:	95 e0       	ldi	r25, 0x05	; 5
     a26:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(BACKWARD);
     a2a:	62 e0       	ldi	r22, 0x02	; 2
     a2c:	8c e0       	ldi	r24, 0x0C	; 12
     a2e:	95 e0       	ldi	r25, 0x05	; 5
     a30:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(BACKWARD);
     a34:	62 e0       	ldi	r22, 0x02	; 2
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	95 e0       	ldi	r25, 0x05	; 5
     a3a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = Backward;
     a3e:	84 e0       	ldi	r24, 0x04	; 4
		break;

		case BackwardLeft:
		Speed(FrontLeft, turnspeed);
     a40:	6f c0       	rjmp	.+222    	; 0xb20 <_Z4Move9Direction+0x1f0>
     a42:	b6 01       	movw	r22, r12
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	23 df       	rcall	.-442    	; 0x88e <_Z5Speed5Motori>
		FrontLeftMotor.run(BACKWARD);
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	80 e1       	ldi	r24, 0x10	; 16
     a4c:	95 e0       	ldi	r25, 0x05	; 5
     a4e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		Speed(BackLeft, turnspeed);
     a52:	b6 01       	movw	r22, r12
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	1b df       	rcall	.-458    	; 0x88e <_Z5Speed5Motori>
		BackLeftMotor.run(BACKWARD);
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	8c e0       	ldi	r24, 0x0C	; 12
     a5c:	95 e0       	ldi	r25, 0x05	; 5
     a5e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(BACKWARD);
     a62:	62 e0       	ldi	r22, 0x02	; 2
     a64:	8e e0       	ldi	r24, 0x0E	; 14
     a66:	95 e0       	ldi	r25, 0x05	; 5
     a68:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(BACKWARD);
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	8a e0       	ldi	r24, 0x0A	; 10
     a70:	95 e0       	ldi	r25, 0x05	; 5
     a72:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = BackwardLeft;
     a76:	85 e0       	ldi	r24, 0x05	; 5
     a78:	53 c0       	rjmp	.+166    	; 0xb20 <_Z4Move9Direction+0x1f0>
		break;

		case BackwardRight:
		FrontLeftMotor.run(BACKWARD);
     a7a:	62 e0       	ldi	r22, 0x02	; 2
     a7c:	80 e1       	ldi	r24, 0x10	; 16
     a7e:	95 e0       	ldi	r25, 0x05	; 5
     a80:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(BACKWARD);
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	8c e0       	ldi	r24, 0x0C	; 12
     a88:	95 e0       	ldi	r25, 0x05	; 5
     a8a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		Speed(FrontRight, turnspeed);
     a8e:	b6 01       	movw	r22, r12
     a90:	81 e0       	ldi	r24, 0x01	; 1
		FrontRightMotor.run(BACKWARD);
     a92:	fd de       	rcall	.-518    	; 0x88e <_Z5Speed5Motori>
     a94:	62 e0       	ldi	r22, 0x02	; 2
     a96:	8e e0       	ldi	r24, 0x0E	; 14
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		Speed(BackRight, turnspeed);
     a9e:	b6 01       	movw	r22, r12
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	f5 de       	rcall	.-534    	; 0x88e <_Z5Speed5Motori>
		BackRightMotor.run(BACKWARD);
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	8a e0       	ldi	r24, 0x0A	; 10
     aa8:	95 e0       	ldi	r25, 0x05	; 5
     aaa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = BackwardRight;
     aae:	86 e0       	ldi	r24, 0x06	; 6
     ab0:	37 c0       	rjmp	.+110    	; 0xb20 <_Z4Move9Direction+0x1f0>
		break;

		case Left:
		Serial.println("Turning left");
     ab2:	67 ed       	ldi	r22, 0xD7	; 215
     ab4:	72 e0       	ldi	r23, 0x02	; 2
     ab6:	8f eb       	ldi	r24, 0xBF	; 191
     ab8:	95 e0       	ldi	r25, 0x05	; 5
     aba:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
		FrontLeftMotor.run(BACKWARD);
     abe:	62 e0       	ldi	r22, 0x02	; 2
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	95 e0       	ldi	r25, 0x05	; 5
     ac4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(BACKWARD);
     ac8:	62 e0       	ldi	r22, 0x02	; 2
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	95 e0       	ldi	r25, 0x05	; 5
     ace:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(FORWARD);
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	8e e0       	ldi	r24, 0x0E	; 14
     ad6:	95 e0       	ldi	r25, 0x05	; 5
     ad8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(FORWARD);
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	8a e0       	ldi	r24, 0x0A	; 10
     ae0:	95 e0       	ldi	r25, 0x05	; 5
     ae2:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = Left;
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	1b c0       	rjmp	.+54     	; 0xb20 <_Z4Move9Direction+0x1f0>
		break;

		case Right:
		Serial.println("Turning right");
     aea:	64 ee       	ldi	r22, 0xE4	; 228
     aec:	72 e0       	ldi	r23, 0x02	; 2
     aee:	8f eb       	ldi	r24, 0xBF	; 191
     af0:	95 e0       	ldi	r25, 0x05	; 5
     af2:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
		FrontLeftMotor.run(FORWARD);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	80 e1       	ldi	r24, 0x10	; 16
     afa:	95 e0       	ldi	r25, 0x05	; 5
     afc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(FORWARD);
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	8c e0       	ldi	r24, 0x0C	; 12
     b04:	95 e0       	ldi	r25, 0x05	; 5
     b06:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(BACKWARD);
     b0a:	62 e0       	ldi	r22, 0x02	; 2
     b0c:	8e e0       	ldi	r24, 0x0E	; 14
     b0e:	95 e0       	ldi	r25, 0x05	; 5
     b10:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(BACKWARD);
     b14:	62 e0       	ldi	r22, 0x02	; 2
     b16:	8a e0       	ldi	r24, 0x0A	; 10
     b18:	95 e0       	ldi	r25, 0x05	; 5
     b1a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = Right;
     b1e:	88 e0       	ldi	r24, 0x08	; 8
     b20:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <RobotMovementDirection>
		break;
     b24:	1c c0       	rjmp	.+56     	; 0xb5e <_Z4Move9Direction+0x22e>

		default:
		Serial.println("Default");
     b26:	62 ef       	ldi	r22, 0xF2	; 242
     b28:	72 e0       	ldi	r23, 0x02	; 2
     b2a:	8f eb       	ldi	r24, 0xBF	; 191
     b2c:	95 e0       	ldi	r25, 0x05	; 5
     b2e:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
		FrontLeftMotor.run(RELEASE);
     b32:	64 e0       	ldi	r22, 0x04	; 4
     b34:	80 e1       	ldi	r24, 0x10	; 16
     b36:	95 e0       	ldi	r25, 0x05	; 5
     b38:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		FrontRightMotor.run(RELEASE);
     b3c:	64 e0       	ldi	r22, 0x04	; 4
     b3e:	8e e0       	ldi	r24, 0x0E	; 14
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackLeftMotor.run(RELEASE);
     b46:	64 e0       	ldi	r22, 0x04	; 4
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	95 e0       	ldi	r25, 0x05	; 5
     b4c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		BackRightMotor.run(RELEASE);
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	8a e0       	ldi	r24, 0x0A	; 10
     b54:	95 e0       	ldi	r25, 0x05	; 5
     b56:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN10AF_DCMotor3runEh>
		RobotMovementDirection = Stop;
     b5a:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <RobotMovementDirection>
		break;
	}

	startTime = millis();
     b5e:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
     b62:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <startTime+0x1>
     b66:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <startTime>
}
     b6a:	cf 91       	pop	r28
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	08 95       	ret

00000b76 <_Z19TurnRobotToObstaclei>:

	return index;
}

void TurnRobotToObstacle(int obstacleAngle)
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	8c 01       	movw	r16, r24
	int delayTime;
	
	if (turningCounter < 10 )
     b80:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <turningCounter>
     b84:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <turningCounter+0x1>
     b88:	0a 97       	sbiw	r24, 0x0a	; 10
     b8a:	0c f0       	brlt	.+2      	; 0xb8e <_Z19TurnRobotToObstaclei+0x18>
     b8c:	64 c0       	rjmp	.+200    	; 0xc56 <_Z19TurnRobotToObstaclei+0xe0>
	{
		Speed(All, 200);
     b8e:	68 ec       	ldi	r22, 0xC8	; 200
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	7c de       	rcall	.-776    	; 0x88e <_Z5Speed5Motori>
		if (obstacleAngle >= 0 && obstacleAngle <= 45)
     b96:	0e 32       	cpi	r16, 0x2E	; 46
     b98:	11 05       	cpc	r17, r1
     b9a:	80 f4       	brcc	.+32     	; 0xbbc <_Z19TurnRobotToObstaclei+0x46>
		{
			Serial.println("Turn to target. Right 0-45 deg.");
     b9c:	6a ef       	ldi	r22, 0xFA	; 250
     b9e:	72 e0       	ldi	r23, 0x02	; 2
     ba0:	8f eb       	ldi	r24, 0xBF	; 191
     ba2:	95 e0       	ldi	r25, 0x05	; 5
     ba4:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
			Move(Forward);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	c2 de       	rcall	.-636    	; 0x930 <_Z4Move9Direction>
			delay(100);
     bac:	64 e6       	ldi	r22, 0x64	; 100
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
			Move(Right);
     bb8:	88 e0       	ldi	r24, 0x08	; 8
     bba:	28 c0       	rjmp	.+80     	; 0xc0c <_Z19TurnRobotToObstaclei+0x96>
			delayTime = 500;
		}
		else if (obstacleAngle > 45 && obstacleAngle < 90)
     bbc:	c8 01       	movw	r24, r16
     bbe:	8e 97       	sbiw	r24, 0x2e	; 46
     bc0:	8c 97       	sbiw	r24, 0x2c	; 44
     bc2:	80 f4       	brcc	.+32     	; 0xbe4 <_Z19TurnRobotToObstaclei+0x6e>
		{
			Serial.println("Turn to target. Right 45-89 deg.");
     bc4:	6a e1       	ldi	r22, 0x1A	; 26
     bc6:	73 e0       	ldi	r23, 0x03	; 3
     bc8:	8f eb       	ldi	r24, 0xBF	; 191
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
			Move(Forward);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	ae de       	rcall	.-676    	; 0x930 <_Z4Move9Direction>
			delay(100);
     bd4:	64 e6       	ldi	r22, 0x64	; 100
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
			Move(Right);
     be0:	88 e0       	ldi	r24, 0x08	; 8
     be2:	2c c0       	rjmp	.+88     	; 0xc3c <_Z19TurnRobotToObstaclei+0xc6>
			delayTime = 1000;
		}
		else if (obstacleAngle > 90 && obstacleAngle <= 135)
     be4:	c8 01       	movw	r24, r16
     be6:	8b 55       	subi	r24, 0x5B	; 91
     be8:	91 09       	sbc	r25, r1
     bea:	8d 97       	sbiw	r24, 0x2d	; 45
     bec:	98 f4       	brcc	.+38     	; 0xc14 <_Z19TurnRobotToObstaclei+0x9e>
		{
			Serial.println("Turn to target. Left 91-135 deg.");
     bee:	6b e3       	ldi	r22, 0x3B	; 59
     bf0:	73 e0       	ldi	r23, 0x03	; 3
     bf2:	8f eb       	ldi	r24, 0xBF	; 191
     bf4:	95 e0       	ldi	r25, 0x05	; 5
     bf6:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
			Move(Forward);
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	99 de       	rcall	.-718    	; 0x930 <_Z4Move9Direction>
			delay(100);
     bfe:	64 e6       	ldi	r22, 0x64	; 100
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
			Move(Left);
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	91 de       	rcall	.-734    	; 0x930 <_Z4Move9Direction>
			delayTime = 500;
     c0e:	c4 ef       	ldi	r28, 0xF4	; 244
     c10:	d1 e0       	ldi	r29, 0x01	; 1
     c12:	17 c0       	rjmp	.+46     	; 0xc42 <_Z19TurnRobotToObstaclei+0xcc>
		}
		else if (obstacleAngle > 135 && obstacleAngle <= 180)
     c14:	08 58       	subi	r16, 0x88	; 136
     c16:	11 09       	sbc	r17, r1
     c18:	0d 32       	cpi	r16, 0x2D	; 45
     c1a:	11 05       	cpc	r17, r1
     c1c:	90 f4       	brcc	.+36     	; 0xc42 <_Z19TurnRobotToObstaclei+0xcc>
		{
			Serial.println("Turn to target. Left 135-180 deg.");
     c1e:	6c e5       	ldi	r22, 0x5C	; 92
     c20:	73 e0       	ldi	r23, 0x03	; 3
     c22:	8f eb       	ldi	r24, 0xBF	; 191
     c24:	95 e0       	ldi	r25, 0x05	; 5
     c26:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
			Move(Forward);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	81 de       	rcall	.-766    	; 0x930 <_Z4Move9Direction>
			delay(100);
     c2e:	64 e6       	ldi	r22, 0x64	; 100
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
			Move(Left);
     c3a:	87 e0       	ldi	r24, 0x07	; 7
     c3c:	79 de       	rcall	.-782    	; 0x930 <_Z4Move9Direction>
			delayTime = 1000;
     c3e:	c8 ee       	ldi	r28, 0xE8	; 232
     c40:	d3 e0       	ldi	r29, 0x03	; 3
		}

		turningCounter++;
     c42:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <turningCounter>
     c46:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <turningCounter+0x1>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <turningCounter+0x1>
     c50:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <turningCounter>
	}
	else
	{
		Move(Stop);
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <_Z19TurnRobotToObstaclei+0xe4>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	6b de       	rcall	.-810    	; 0x930 <_Z4Move9Direction>
	}
	
	delay(delayTime);
     c5a:	be 01       	movw	r22, r28
     c5c:	dd 0f       	add	r29, r29
     c5e:	88 0b       	sbc	r24, r24
     c60:	99 0b       	sbc	r25, r25
     c62:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
	Move(Stop);
}
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
	{
		Move(Stop);
	}
	
	delay(delayTime);
	Move(Stop);
     c6e:	0f 91       	pop	r16
     c70:	5f ce       	rjmp	.-834    	; 0x930 <_Z4Move9Direction>

00000c72 <_Z13PlaySoundFilePc>:
//////////////////////////////////////////////////////////////////////////
// Plays a file from a SD card connected to the Arduino
//
//////////////////////////////////////////////////////////////////////////
void PlaySoundFile(char charBuf[12])
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
	Serial.println(charBuf);
     c78:	bc 01       	movw	r22, r24
     c7a:	8f eb       	ldi	r24, 0xBF	; 191
     c7c:	95 e0       	ldi	r25, 0x05	; 5
     c7e:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
	tmrpcm.play(charBuf);
     c82:	be 01       	movw	r22, r28
     c84:	8e e5       	ldi	r24, 0x5E	; 94
     c86:	95 e0       	ldi	r25, 0x05	; 5
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
//
//////////////////////////////////////////////////////////////////////////
void PlaySoundFile(char charBuf[12])
{
	Serial.println(charBuf);
	tmrpcm.play(charBuf);
     c8c:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <_ZN6TMRpcm4playEPc>

00000c90 <_Z18SaySomethingRandomv>:
//////////////////////////////////////////////////////////////////////////
// Plays a random file within the range of 1 to  22
//
//////////////////////////////////////////////////////////////////////////
void SaySomethingRandom()
{
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	2c 97       	sbiw	r28, 0x0c	; 12
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	int file = random(minFileName, maxFileName);
     ca8:	26 e1       	ldi	r18, 0x16	; 22
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 37 13 	call	0x266e	; 0x266e <_Z6randomll>
	char charBuf[12];
	sprintf(charBuf, "%d.wav", file);
     cbc:	7f 93       	push	r23
     cbe:	6f 93       	push	r22
     cc0:	8e e7       	ldi	r24, 0x7E	; 126
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	8e 01       	movw	r16, r28
     cca:	0f 5f       	subi	r16, 0xFF	; 255
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	1f 93       	push	r17
     cd0:	0f 93       	push	r16
     cd2:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <sprintf>
	PlaySoundFile(charBuf);
     cd6:	c8 01       	movw	r24, r16
     cd8:	cc df       	rcall	.-104    	; 0xc72 <_Z13PlaySoundFilePc>
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	2c 96       	adiw	r28, 0x0c	; 12
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <_Z10Autonomousii>:
		}
	}
}

void Autonomous(int distanceIrSensorFront, int distanceIrSensorBack)
{
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	8b 01       	movw	r16, r22
	float distanceUltraSonicFront = MeasureDistanceWithUltrasonicInCm(true);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	49 dc       	rcall	.-1902   	; 0x5a6 <_Z33MeasureDistanceWithUltrasonicInCmb>
     d14:	6b 01       	movw	r12, r22
     d16:	7c 01       	movw	r14, r24

	//Serial.print("distanceUltraSonicFront ");
	//Serial.println(distanceUltraSonicFront);

	if (distanceUltraSonicFront <= 10 || distanceIrSensorFront <= 10)
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	d8 d4       	rcall	.+2480   	; 0x16d2 <__cmpsf2>
     d22:	18 16       	cp	r1, r24
     d24:	1c f4       	brge	.+6      	; 0xd2c <_Z10Autonomousii+0x30>
     d26:	cb 30       	cpi	r28, 0x0B	; 11
     d28:	d1 05       	cpc	r29, r1
     d2a:	64 f5       	brge	.+88     	; 0xd84 <_Z10Autonomousii+0x88>
	{
		if (speed != SPEED_FAST || RobotMovementDirection != Backward)
     d2c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <speed>
     d30:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <speed+0x1>
     d34:	88 3c       	cpi	r24, 0xC8	; 200
     d36:	91 05       	cpc	r25, r1
     d38:	29 f4       	brne	.+10     	; 0xd44 <_Z10Autonomousii+0x48>
     d3a:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
     d3e:	84 30       	cpi	r24, 0x04	; 4
     d40:	09 f4       	brne	.+2      	; 0xd44 <_Z10Autonomousii+0x48>
     d42:	1e c1       	rjmp	.+572    	; 0xf80 <_Z10Autonomousii+0x284>
		{
			speed = SPEED_FAST;
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <speed+0x1>
     d4c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <speed>

			if( distanceIrSensorBack < 15 )
     d50:	0f 30       	cpi	r16, 0x0F	; 15
     d52:	11 05       	cpc	r17, r1
     d54:	64 f4       	brge	.+24     	; 0xd6e <_Z10Autonomousii+0x72>
			{
				Speed(All, speed);
     d56:	68 ec       	ldi	r22, 0xC8	; 200
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	84 e0       	ldi	r24, 0x04	; 4
				Move(Left);
     d5c:	98 dd       	rcall	.-1232   	; 0x88e <_Z5Speed5Motori>
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	e7 dd       	rcall	.-1074   	; 0x930 <_Z4Move9Direction>
				delay(500);
     d62:	64 ef       	ldi	r22, 0xF4	; 244
     d64:	71 e0       	ldi	r23, 0x01	; 1
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
			}

			Speed(All, speed);
     d6e:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     d72:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
     d76:	84 e0       	ldi	r24, 0x04	; 4
			Move(Backward);
     d78:	8a dd       	rcall	.-1260   	; 0x88e <_Z5Speed5Motori>
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	d9 dd       	rcall	.-1102   	; 0x930 <_Z4Move9Direction>
			Serial.println("Back Fast from Target");
     d7e:	65 e8       	ldi	r22, 0x85	; 133
     d80:	73 e0       	ldi	r23, 0x03	; 3
     d82:	3d c0       	rjmp	.+122    	; 0xdfe <_Z10Autonomousii+0x102>
		}
	}
	else if ((distanceUltraSonicFront <= 20 || distanceIrSensorFront <= 20) && (distanceUltraSonicFront > 10 || distanceIrSensorFront > 10))
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 ea       	ldi	r20, 0xA0	; 160
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	a0 d4       	rcall	.+2368   	; 0x16d2 <__cmpsf2>
     d92:	18 16       	cp	r1, r24
     d94:	1c f4       	brge	.+6      	; 0xd9c <_Z10Autonomousii+0xa0>
     d96:	c5 31       	cpi	r28, 0x15	; 21
     d98:	d1 05       	cpc	r29, r1
     d9a:	b4 f5       	brge	.+108    	; 0xe08 <_Z10Autonomousii+0x10c>
	{
		if (speed != SPEED_MEDIUM || RobotMovementDirection != Backward)
     d9c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <speed>
     da0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <speed+0x1>
     da4:	84 36       	cpi	r24, 0x64	; 100
     da6:	91 05       	cpc	r25, r1
     da8:	29 f4       	brne	.+10     	; 0xdb4 <_Z10Autonomousii+0xb8>
     daa:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
     dae:	84 30       	cpi	r24, 0x04	; 4
     db0:	09 f4       	brne	.+2      	; 0xdb4 <_Z10Autonomousii+0xb8>
     db2:	e6 c0       	rjmp	.+460    	; 0xf80 <_Z10Autonomousii+0x284>
		{
			speed = SPEED_MEDIUM;
     db4:	84 e6       	ldi	r24, 0x64	; 100
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <speed+0x1>
     dbc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <speed>
			if( distanceIrSensorBack < 15 )
     dc0:	0f 30       	cpi	r16, 0x0F	; 15
			{
				Speed(All, speed);
     dc2:	11 05       	cpc	r17, r1
     dc4:	64 f4       	brge	.+24     	; 0xdde <_Z10Autonomousii+0xe2>
     dc6:	64 e6       	ldi	r22, 0x64	; 100
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	84 e0       	ldi	r24, 0x04	; 4
				Move(Left);
     dcc:	60 dd       	rcall	.-1344   	; 0x88e <_Z5Speed5Motori>
     dce:	87 e0       	ldi	r24, 0x07	; 7
     dd0:	af dd       	rcall	.-1186   	; 0x930 <_Z4Move9Direction>
				delay(500);
     dd2:	64 ef       	ldi	r22, 0xF4	; 244
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
			}

			Speed(All, speed);
     dda:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
     dde:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
     de2:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
     de6:	84 e0       	ldi	r24, 0x04	; 4
			Move(Backward);
     de8:	52 dd       	rcall	.-1372   	; 0x88e <_Z5Speed5Motori>
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	a1 dd       	rcall	.-1214   	; 0x930 <_Z4Move9Direction>
			startTime = millis();
     dee:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
     df2:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <startTime+0x1>
     df6:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <startTime>
			Serial.println("Back Slow from target");
     dfa:	6b e9       	ldi	r22, 0x9B	; 155
     dfc:	73 e0       	ldi	r23, 0x03	; 3
     dfe:	8f eb       	ldi	r24, 0xBF	; 191
     e00:	95 e0       	ldi	r25, 0x05	; 5
     e02:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
		}
	}
	else if ((distanceUltraSonicFront <= 40 || distanceIrSensorFront <= 40) && (distanceUltraSonicFront > 20 || distanceIrSensorFront > 20))
     e06:	bc c0       	rjmp	.+376    	; 0xf80 <_Z10Autonomousii+0x284>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e2       	ldi	r20, 0x20	; 32
     e0e:	52 e4       	ldi	r21, 0x42	; 66
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	5e d4       	rcall	.+2236   	; 0x16d2 <__cmpsf2>
     e16:	18 16       	cp	r1, r24
     e18:	1c f4       	brge	.+6      	; 0xe20 <_Z10Autonomousii+0x124>
     e1a:	c9 32       	cpi	r28, 0x29	; 41
     e1c:	d1 05       	cpc	r29, r1
     e1e:	d4 f4       	brge	.+52     	; 0xe54 <_Z10Autonomousii+0x158>
	{
		if (speed != SPEED_STOP || RobotMovementDirection != Stop)
     e20:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <speed>
     e24:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <speed+0x1>
     e28:	89 2b       	or	r24, r25
     e2a:	29 f4       	brne	.+10     	; 0xe36 <_Z10Autonomousii+0x13a>
     e2c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <_Z10Autonomousii+0x13a>
		{
			speed = SPEED_STOP;
     e34:	a5 c0       	rjmp	.+330    	; 0xf80 <_Z10Autonomousii+0x284>
     e36:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <speed+0x1>
     e3a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <speed>
			Move(Stop);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	77 dd       	rcall	.-1298   	; 0x930 <_Z4Move9Direction>
			delay(50);
     e42:	62 e3       	ldi	r22, 0x32	; 50
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
			Serial.println("Stop at target");
     e4e:	61 eb       	ldi	r22, 0xB1	; 177
     e50:	73 e0       	ldi	r23, 0x03	; 3
		}
	}
	else if ((distanceUltraSonicFront <= 60 || distanceIrSensorFront <= 60) && (distanceUltraSonicFront > 40 || distanceIrSensorFront > 40))
     e52:	d5 cf       	rjmp	.-86     	; 0xdfe <_Z10Autonomousii+0x102>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e7       	ldi	r20, 0x70	; 112
     e5a:	52 e4       	ldi	r21, 0x42	; 66
     e5c:	c7 01       	movw	r24, r14
     e5e:	b6 01       	movw	r22, r12
     e60:	38 d4       	rcall	.+2160   	; 0x16d2 <__cmpsf2>
     e62:	18 16       	cp	r1, r24
     e64:	14 f4       	brge	.+4      	; 0xe6a <_Z10Autonomousii+0x16e>
     e66:	ed 97       	sbiw	r28, 0x3d	; 61
     e68:	fc f4       	brge	.+62     	; 0xea8 <_Z10Autonomousii+0x1ac>
	{
		if (speed != SPEED_MEDIUM || RobotMovementDirection != Forward)
     e6a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <speed>
     e6e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <speed+0x1>
     e72:	84 36       	cpi	r24, 0x64	; 100
     e74:	91 05       	cpc	r25, r1
     e76:	29 f4       	brne	.+10     	; 0xe82 <_Z10Autonomousii+0x186>
     e78:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
     e7c:	81 30       	cpi	r24, 0x01	; 1
		{
			speed = SPEED_MEDIUM;
     e7e:	09 f4       	brne	.+2      	; 0xe82 <_Z10Autonomousii+0x186>
     e80:	7f c0       	rjmp	.+254    	; 0xf80 <_Z10Autonomousii+0x284>
     e82:	84 e6       	ldi	r24, 0x64	; 100
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <speed+0x1>
			Speed(All, speed);
     e8a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <speed>
     e8e:	64 e6       	ldi	r22, 0x64	; 100
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	84 e0       	ldi	r24, 0x04	; 4
			Move(Forward);
     e94:	fc dc       	rcall	.-1544   	; 0x88e <_Z5Speed5Motori>
     e96:	81 e0       	ldi	r24, 0x01	; 1
	}
}

void ResetTurningCounter()
{
	turningCounter = 0;
     e98:	4b dd       	rcall	.-1386   	; 0x930 <_Z4Move9Direction>
     e9a:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <turningCounter+0x1>
     e9e:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <turningCounter>
		{
			speed = SPEED_MEDIUM;
			Speed(All, speed);
			Move(Forward);
			ResetTurningCounter();
			Serial.println("Move Slow to Target");
     ea2:	60 ec       	ldi	r22, 0xC0	; 192
		}
	}
	else if (distanceUltraSonicFront <= 350 && distanceUltraSonicFront > 60)
     ea4:	73 e0       	ldi	r23, 0x03	; 3
     ea6:	ab cf       	rjmp	.-170    	; 0xdfe <_Z10Autonomousii+0x102>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4f ea       	ldi	r20, 0xAF	; 175
     eae:	53 e4       	ldi	r21, 0x43	; 67
     eb0:	c7 01       	movw	r24, r14
     eb2:	b6 01       	movw	r22, r12
     eb4:	0e d4       	rcall	.+2076   	; 0x16d2 <__cmpsf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	44 f1       	brlt	.+80     	; 0xf0a <_Z10Autonomousii+0x20e>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e7       	ldi	r20, 0x70	; 112
     ec0:	52 e4       	ldi	r21, 0x42	; 66
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	54 d5       	rcall	.+2728   	; 0x1970 <__gesf2>
     ec8:	18 16       	cp	r1, r24
     eca:	fc f4       	brge	.+62     	; 0xf0a <_Z10Autonomousii+0x20e>
	{
		if (speed != SPEED_FAST || RobotMovementDirection != Forward)
     ecc:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <speed>
     ed0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <speed+0x1>
     ed4:	88 3c       	cpi	r24, 0xC8	; 200
     ed6:	91 05       	cpc	r25, r1
     ed8:	29 f4       	brne	.+10     	; 0xee4 <_Z10Autonomousii+0x1e8>
     eda:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
     ede:	81 30       	cpi	r24, 0x01	; 1
		{
			speed = SPEED_FAST;
     ee0:	09 f4       	brne	.+2      	; 0xee4 <_Z10Autonomousii+0x1e8>
     ee2:	4e c0       	rjmp	.+156    	; 0xf80 <_Z10Autonomousii+0x284>
     ee4:	88 ec       	ldi	r24, 0xC8	; 200
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <speed+0x1>
			Speed(All, speed);
     eec:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <speed>
     ef0:	68 ec       	ldi	r22, 0xC8	; 200
     ef2:	70 e0       	ldi	r23, 0x00	; 0
			Move(Forward);
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	cb dc       	rcall	.-1642   	; 0x88e <_Z5Speed5Motori>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
	}
}

void ResetTurningCounter()
{
	turningCounter = 0;
     efa:	1a dd       	rcall	.-1484   	; 0x930 <_Z4Move9Direction>
     efc:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <turningCounter+0x1>
     f00:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <turningCounter>
		{
			speed = SPEED_FAST;
			Speed(All, speed);
			Move(Forward);
			ResetTurningCounter();
			Serial.println("Move Fast to target");
     f04:	64 ed       	ldi	r22, 0xD4	; 212
     f06:	73 e0       	ldi	r23, 0x03	; 3
		}
	}
	else if (distanceUltraSonicFront > 300 && RobotMovementDirection != Left && RobotMovementDirection != Right)
     f08:	7a cf       	rjmp	.-268    	; 0xdfe <_Z10Autonomousii+0x102>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	46 e9       	ldi	r20, 0x96	; 150
     f10:	53 e4       	ldi	r21, 0x43	; 67
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	2c d5       	rcall	.+2648   	; 0x1970 <__gesf2>
     f18:	18 16       	cp	r1, r24
     f1a:	94 f5       	brge	.+100    	; 0xf80 <_Z10Autonomousii+0x284>
     f1c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
	{
		Serial.println("Find Target");
     f20:	87 50       	subi	r24, 0x07	; 7
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	68 f1       	brcs	.+90     	; 0xf80 <_Z10Autonomousii+0x284>
     f26:	68 ee       	ldi	r22, 0xE8	; 232
     f28:	73 e0       	ldi	r23, 0x03	; 3
		Move(Stop);
     f2a:	8f eb       	ldi	r24, 0xBF	; 191
     f2c:	95 e0       	ldi	r25, 0x05	; 5
     f2e:	0e 94 21 10 	call	0x2042	; 0x2042 <_ZN5Print7printlnEPKc>
		int nearestObstacleAngle = FindTheNearestObstacle();
     f32:	80 e0       	ldi	r24, 0x00	; 0
		if (nearestObstacleAngle != -1)
     f34:	fd dc       	rcall	.-1542   	; 0x930 <_Z4Move9Direction>
     f36:	a3 db       	rcall	.-2234   	; 0x67e <_Z22FindTheNearestObstaclev>
     f38:	8f 3f       	cpi	r24, 0xFF	; 255
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
		{
			TurnRobotToObstacle(nearestObstacleAngle);
     f3c:	92 07       	cpc	r25, r18
     f3e:	11 f0       	breq	.+4      	; 0xf44 <_Z10Autonomousii+0x248>
     f40:	1a de       	rcall	.-972    	; 0xb76 <_Z19TurnRobotToObstaclei>
		}
		else
		{
			// No obstacle found continue driving forward
			speed = SPEED_FAST;
     f42:	12 c0       	rjmp	.+36     	; 0xf68 <_Z10Autonomousii+0x26c>
     f44:	88 ec       	ldi	r24, 0xC8	; 200
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <speed+0x1>
     f4c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <speed>
			Speed(All, speed);
     f50:	68 ec       	ldi	r22, 0xC8	; 200
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	84 e0       	ldi	r24, 0x04	; 4
     f56:	9b dc       	rcall	.-1738   	; 0x88e <_Z5Speed5Motori>
			Move(Forward);
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	ea dc       	rcall	.-1580   	; 0x930 <_Z4Move9Direction>
     f5c:	68 ee       	ldi	r22, 0xE8	; 232
			delay(1000);
     f5e:	73 e0       	ldi	r23, 0x03	; 3
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
     f68:	6a e5       	ldi	r22, 0x5A	; 90
		}

		// Look straight forward with the ultrasonic sensor
		servoObjectFinderAndDistance.write(90);
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	82 e1       	ldi	r24, 0x12	; 18
     f6e:	95 e0       	ldi	r25, 0x05	; 5
     f70:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN5Servo5writeEi>
     f74:	6c e2       	ldi	r22, 0x2C	; 44
		delay(300);
     f76:	71 e0       	ldi	r23, 0x01	; 1
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
     f80:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
	}

	if (RobotMovementDirection == Stop)
     f84:	81 11       	cpse	r24, r1
     f86:	4c c0       	rjmp	.+152    	; 0x1020 <_Z10Autonomousii+0x324>
	{
		int timeStandingStill = millis() - startTime;
     f88:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
     f8c:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <startTime>
     f90:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <startTime+0x1>
     f94:	62 1b       	sub	r22, r18
     f96:	73 0b       	sbc	r23, r19

		if (timeStandingStill > 500 && timeStandingStill < 1000)
     f98:	cb 01       	movw	r24, r22
     f9a:	85 5f       	subi	r24, 0xF5	; 245
     f9c:	91 40       	sbci	r25, 0x01	; 1
     f9e:	83 3f       	cpi	r24, 0xF3	; 243
     fa0:	91 40       	sbci	r25, 0x01	; 1
		{
			int timeSinceILastSpoke = millis() - lastTimeISpoke;
     fa2:	98 f4       	brcc	.+38     	; 0xfca <_Z10Autonomousii+0x2ce>
     fa4:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
			
			if(timeSinceILastSpoke > 3000)
     fa8:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <lastTimeISpoke>
     fac:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <lastTimeISpoke+0x1>
     fb0:	62 1b       	sub	r22, r18
     fb2:	73 0b       	sbc	r23, r19
     fb4:	69 3b       	cpi	r22, 0xB9	; 185
			{
				SaySomethingRandom();
     fb6:	7b 40       	sbci	r23, 0x0B	; 11
     fb8:	9c f1       	brlt	.+102    	; 0x1020 <_Z10Autonomousii+0x324>
				lastTimeISpoke = millis();
     fba:	6a de       	rcall	.-812    	; 0xc90 <_Z18SaySomethingRandomv>
     fbc:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
     fc0:	70 93 70 05 	sts	0x0570, r23	; 0x800570 <lastTimeISpoke+0x1>
     fc4:	60 93 6f 05 	sts	0x056F, r22	; 0x80056f <lastTimeISpoke>
			}
		}
		else if (timeStandingStill > 2000)
     fc8:	2b c0       	rjmp	.+86     	; 0x1020 <_Z10Autonomousii+0x324>
     fca:	61 3d       	cpi	r22, 0xD1	; 209
     fcc:	77 40       	sbci	r23, 0x07	; 7
		{
			Speed(All, SPEED_TURN);
     fce:	44 f1       	brlt	.+80     	; 0x1020 <_Z10Autonomousii+0x324>
     fd0:	66 e9       	ldi	r22, 0x96	; 150
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	5b dc       	rcall	.-1866   	; 0x88e <_Z5Speed5Motori>

			
			if (moveLeft)
     fd8:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <moveLeft>
     fdc:	88 23       	and	r24, r24
     fde:	29 f0       	breq	.+10     	; 0xfea <_Z10Autonomousii+0x2ee>
			{
				Move(Left);
     fe0:	87 e0       	ldi	r24, 0x07	; 7
     fe2:	a6 dc       	rcall	.-1716   	; 0x930 <_Z4Move9Direction>
     fe4:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <moveLeft>
				moveLeft = false;
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <_Z10Autonomousii+0x2f8>
			}
			else
			{
				Move(Right);
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	a1 dc       	rcall	.-1726   	; 0x930 <_Z4Move9Direction>
     fee:	81 e0       	ldi	r24, 0x01	; 1
				moveLeft = true;
     ff0:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <moveLeft>
     ff4:	26 ed       	ldi	r18, 0xD6	; 214
			}

			delay(random(500, 1750));
     ff6:	36 e0       	ldi	r19, 0x06	; 6
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	64 ef       	ldi	r22, 0xF4	; 244
     ffe:	71 e0       	ldi	r23, 0x01	; 1
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 37 13 	call	0x266e	; 0x266e <_Z6randomll>
    1008:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
    100c:	80 e0       	ldi	r24, 0x00	; 0
			Move(Stop);
    100e:	df 91       	pop	r29
		}
	}
}
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	88 cc       	rjmp	.-1776   	; 0x930 <_Z4Move9Direction>
				Move(Right);
				moveLeft = true;
			}

			delay(random(500, 1750));
			Move(Stop);
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
		}
	}
}
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <_Z16BluetoothControlii>:
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
		BluetoothControl(distanceIrSensorFront, distanceIrSensorBack);
	}
}

void BluetoothControl(int distanceIrSensorFront, int distanceIrSensorBack)
{
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	2c 97       	sbiw	r28, 0x0c	; 12
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	7c 01       	movw	r14, r24
    1050:	8b 01       	movw	r16, r22
	if (newCharacterRecieved)
    1052:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <newCharacterRecieved>
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <_Z16BluetoothControlii+0x2a>
    105a:	08 c2       	rjmp	.+1040   	; 0x146c <_Z16BluetoothControlii+0x43a>
	{
		newCharacterRecieved = false;
    105c:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <newCharacterRecieved>
		timePreviousCommand = millis();
    1060:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    1064:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <timePreviousCommand>
    1068:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <timePreviousCommand+0x1>
    106c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <timePreviousCommand+0x2>
    1070:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <timePreviousCommand+0x3>
		prevCommand = command;
    1074:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <command>
    1078:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <prevCommand>
		command = receivedCharacter;
    107c:	60 91 7a 05 	lds	r22, 0x057A	; 0x80057a <receivedCharacter>
    1080:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <command>
		
		//Change pin mode only if new command is different from previous.
		if (command != prevCommand)
    1084:	86 17       	cp	r24, r22
    1086:	09 f4       	brne	.+2      	; 0x108a <_Z16BluetoothControlii+0x58>
    1088:	cb c1       	rjmp	.+918    	; 0x1420 <_Z16BluetoothControlii+0x3ee>
		{
			Serial.println(command);
    108a:	8f eb       	ldi	r24, 0xBF	; 191
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	e9 d7       	rcall	.+4050   	; 0x2062 <_ZN5Print7printlnEc>
			switch (command)
    1090:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <command>
    1094:	49 2f       	mov	r20, r25
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	fa 01       	movw	r30, r20
    109a:	e2 54       	subi	r30, 0x42	; 66
    109c:	f1 09       	sbc	r31, r1
    109e:	e7 33       	cpi	r30, 0x37	; 55
    10a0:	f1 05       	cpc	r31, r1
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <_Z16BluetoothControlii+0x74>
    10a4:	a2 c1       	rjmp	.+836    	; 0x13ea <_Z16BluetoothControlii+0x3b8>
    10a6:	88 27       	eor	r24, r24
    10a8:	e5 58       	subi	r30, 0x85	; 133
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	8f 4f       	sbci	r24, 0xFF	; 255
    10ae:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <__tablejump2__>
			{
				// Forward
				case 'F':
				if(!runAutonomous && RobotMovementDirection != Forward && distanceIrSensorFront > DISTANCE_TO_OBJECT)
    10b2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    10b6:	81 11       	cpse	r24, r1
    10b8:	15 c0       	rjmp	.+42     	; 0x10e4 <_Z16BluetoothControlii+0xb2>
    10ba:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	89 f0       	breq	.+34     	; 0x10e4 <_Z16BluetoothControlii+0xb2>
    10c2:	2f e1       	ldi	r18, 0x1F	; 31
    10c4:	e2 16       	cp	r14, r18
    10c6:	f1 04       	cpc	r15, r1
    10c8:	94 f0       	brlt	.+36     	; 0x10ee <_Z16BluetoothControlii+0xbc>
				{
					Speed(All, speed);
    10ca:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    10ce:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    10d2:	84 e0       	ldi	r24, 0x04	; 4
    10d4:	dc db       	rcall	.-2120   	; 0x88e <_Z5Speed5Motori>
					Move(Forward);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	c8 c1       	rjmp	.+912    	; 0x146a <_Z16BluetoothControlii+0x438>
				
				break;
				
				// Forward Right
				case 'I':
				if(!runAutonomous && RobotMovementDirection != ForwardRight && distanceIrSensorFront > DISTANCE_TO_OBJECT)
    10da:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <_Z16BluetoothControlii+0xb2>
    10e2:	88 c0       	rjmp	.+272    	; 0x11f4 <_Z16BluetoothControlii+0x1c2>
				{
					Speed(All, speed);
					Move(Forward);
				}

				if(distanceIrSensorFront <= DISTANCE_TO_OBJECT)
    10e4:	8f e1       	ldi	r24, 0x1F	; 31
    10e6:	e8 16       	cp	r14, r24
    10e8:	f1 04       	cpc	r15, r1
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <_Z16BluetoothControlii+0xbc>
    10ec:	bf c1       	rjmp	.+894    	; 0x146c <_Z16BluetoothControlii+0x43a>
				{
					Move(Backward);
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	1f dc       	rcall	.-1986   	; 0x930 <_Z4Move9Direction>
					delay(100);
    10f2:	64 e6       	ldi	r22, 0x64	; 100
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
					Move(Stop);
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	17 dc       	rcall	.-2002   	; 0x930 <_Z4Move9Direction>
					Serial.print("distanceIrSensorFront: ");
    1102:	64 ef       	ldi	r22, 0xF4	; 244
    1104:	73 e0       	ldi	r23, 0x03	; 3
    1106:	8f eb       	ldi	r24, 0xBF	; 191
    1108:	95 e0       	ldi	r25, 0x05	; 5
    110a:	80 d7       	rcall	.+3840   	; 0x200c <_ZN5Print5printEPKc>
					Serial.println(distanceIrSensorFront);
    110c:	4a e0       	ldi	r20, 0x0A	; 10
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	b7 01       	movw	r22, r14
    1112:	8f eb       	ldi	r24, 0xBF	; 191
    1114:	95 e0       	ldi	r25, 0x05	; 5
    1116:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN5Print7printlnEii>
					Serial.println("Item too close will not drive forward");
    111a:	6c e0       	ldi	r22, 0x0C	; 12
    111c:	74 e0       	ldi	r23, 0x04	; 4
    111e:	34 c0       	rjmp	.+104    	; 0x1188 <_Z16BluetoothControlii+0x156>
				}
				break;
				
				// Backward
				case 'B':
				if(!runAutonomous && RobotMovementDirection != Backward && distanceIrSensorBack > DISTANCE_TO_OBJECT)
    1120:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    1124:	81 11       	cpse	r24, r1
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <_Z16BluetoothControlii+0x11e>
    1128:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	81 f0       	breq	.+32     	; 0x1150 <_Z16BluetoothControlii+0x11e>
    1130:	0f 31       	cpi	r16, 0x1F	; 31
    1132:	11 05       	cpc	r17, r1
    1134:	8c f0       	brlt	.+34     	; 0x1158 <_Z16BluetoothControlii+0x126>
				{
					Speed(All, speed);
    1136:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    113a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    113e:	84 e0       	ldi	r24, 0x04	; 4
    1140:	a6 db       	rcall	.-2228   	; 0x88e <_Z5Speed5Motori>
					Move(Backward);
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	92 c1       	rjmp	.+804    	; 0x146a <_Z16BluetoothControlii+0x438>
				}
				break;
				
				// Backward Right
				case 'J':
				if(!runAutonomous && RobotMovementDirection != BackwardRight && distanceIrSensorBack > DISTANCE_TO_OBJECT)
    1146:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    114a:	88 23       	and	r24, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <_Z16BluetoothControlii+0x11e>
    114e:	64 c0       	rjmp	.+200    	; 0x1218 <_Z16BluetoothControlii+0x1e6>
				{
					Speed(All, speed);
					Move(Backward);
				}

				if(distanceIrSensorBack <= DISTANCE_TO_OBJECT)
    1150:	0f 31       	cpi	r16, 0x1F	; 31
    1152:	11 05       	cpc	r17, r1
    1154:	0c f0       	brlt	.+2      	; 0x1158 <_Z16BluetoothControlii+0x126>
				{
					Move(Forward);
    1156:	8a c1       	rjmp	.+788    	; 0x146c <_Z16BluetoothControlii+0x43a>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	ea db       	rcall	.-2092   	; 0x930 <_Z4Move9Direction>
					delay(100);
    115c:	64 e6       	ldi	r22, 0x64	; 100
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 5f 11 	call	0x22be	; 0x22be <delay>
					Move(Stop);
    1168:	80 e0       	ldi	r24, 0x00	; 0
					Serial.print("distanceIrSensorBack: ");
    116a:	e2 db       	rcall	.-2108   	; 0x930 <_Z4Move9Direction>
    116c:	62 e3       	ldi	r22, 0x32	; 50
    116e:	74 e0       	ldi	r23, 0x04	; 4
    1170:	8f eb       	ldi	r24, 0xBF	; 191
    1172:	95 e0       	ldi	r25, 0x05	; 5
    1174:	4b d7       	rcall	.+3734   	; 0x200c <_ZN5Print5printEPKc>
					Serial.println(distanceIrSensorBack);
    1176:	4a e0       	ldi	r20, 0x0A	; 10
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	b8 01       	movw	r22, r16
    117c:	8f eb       	ldi	r24, 0xBF	; 191
    117e:	95 e0       	ldi	r25, 0x05	; 5
    1180:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <_ZN5Print7printlnEii>
					Serial.println("Item too close will not drive backward");
    1184:	69 e4       	ldi	r22, 0x49	; 73
    1186:	74 e0       	ldi	r23, 0x04	; 4
    1188:	8f eb       	ldi	r24, 0xBF	; 191
    118a:	95 e0       	ldi	r25, 0x05	; 5
    118c:	5a d7       	rcall	.+3764   	; 0x2042 <_ZN5Print7printlnEPKc>
    118e:	6e c1       	rjmp	.+732    	; 0x146c <_Z16BluetoothControlii+0x43a>
				}
				break;

				// Left
				case 'L':
				if(!runAutonomous && RobotMovementDirection != Left )
    1190:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    1194:	81 11       	cpse	r24, r1
    1196:	6a c1       	rjmp	.+724    	; 0x146c <_Z16BluetoothControlii+0x43a>
    1198:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    119c:	87 30       	cpi	r24, 0x07	; 7
    119e:	09 f4       	brne	.+2      	; 0x11a2 <_Z16BluetoothControlii+0x170>
				{
					Speed(All, speed);
    11a0:	65 c1       	rjmp	.+714    	; 0x146c <_Z16BluetoothControlii+0x43a>
    11a2:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    11a6:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	70 db       	rcall	.-2336   	; 0x88e <_Z5Speed5Motori>
					Move(Left);
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	5c c1       	rjmp	.+696    	; 0x146a <_Z16BluetoothControlii+0x438>
				
				break;
				
				// Right
				case 'R':
				if(!runAutonomous && RobotMovementDirection != Right)
    11b2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    11b6:	81 11       	cpse	r24, r1
    11b8:	59 c1       	rjmp	.+690    	; 0x146c <_Z16BluetoothControlii+0x43a>
    11ba:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <_Z16BluetoothControlii+0x192>
				{
					Speed(All, speed);
    11c2:	54 c1       	rjmp	.+680    	; 0x146c <_Z16BluetoothControlii+0x43a>
    11c4:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    11c8:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    11cc:	84 e0       	ldi	r24, 0x04	; 4
    11ce:	5f db       	rcall	.-2370   	; 0x88e <_Z5Speed5Motori>
					Move(Right);
    11d0:	88 e0       	ldi	r24, 0x08	; 8
    11d2:	4b c1       	rjmp	.+662    	; 0x146a <_Z16BluetoothControlii+0x438>
				
				break;
				
				// Stop
				case 'S':
				if(!runAutonomous && RobotMovementDirection != Stop)
    11d4:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    11d8:	81 11       	cpse	r24, r1
    11da:	48 c1       	rjmp	.+656    	; 0x146c <_Z16BluetoothControlii+0x43a>
    11dc:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    11e0:	88 23       	and	r24, r24
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <_Z16BluetoothControlii+0x1b4>
				{
					Speed(All, speed);
    11e4:	43 c1       	rjmp	.+646    	; 0x146c <_Z16BluetoothControlii+0x43a>
    11e6:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    11ea:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    11ee:	84 e0       	ldi	r24, 0x04	; 4
    11f0:	4e db       	rcall	.-2404   	; 0x88e <_Z5Speed5Motori>
    11f2:	3a c1       	rjmp	.+628    	; 0x1468 <_Z16BluetoothControlii+0x436>
				
				break;
				
				// Forward Right
				case 'I':
				if(!runAutonomous && RobotMovementDirection != ForwardRight && distanceIrSensorFront > DISTANCE_TO_OBJECT)
    11f4:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	09 f4       	brne	.+2      	; 0x11fe <_Z16BluetoothControlii+0x1cc>
    11fc:	73 cf       	rjmp	.-282    	; 0x10e4 <_Z16BluetoothControlii+0xb2>
    11fe:	2f e1       	ldi	r18, 0x1F	; 31
    1200:	e2 16       	cp	r14, r18
    1202:	f1 04       	cpc	r15, r1
    1204:	0c f4       	brge	.+2      	; 0x1208 <_Z16BluetoothControlii+0x1d6>
				{
					Speed(All, speed);
    1206:	73 cf       	rjmp	.-282    	; 0x10ee <_Z16BluetoothControlii+0xbc>
    1208:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    120c:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	3d db       	rcall	.-2438   	; 0x88e <_Z5Speed5Motori>
					Move(ForwardRight);
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	29 c1       	rjmp	.+594    	; 0x146a <_Z16BluetoothControlii+0x438>
				}
				break;
				
				// Backward Right
				case 'J':
				if(!runAutonomous && RobotMovementDirection != BackwardRight && distanceIrSensorBack > DISTANCE_TO_OBJECT)
    1218:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    121c:	86 30       	cpi	r24, 0x06	; 6
    121e:	09 f4       	brne	.+2      	; 0x1222 <_Z16BluetoothControlii+0x1f0>
    1220:	97 cf       	rjmp	.-210    	; 0x1150 <_Z16BluetoothControlii+0x11e>
    1222:	0f 31       	cpi	r16, 0x1F	; 31
    1224:	11 05       	cpc	r17, r1
    1226:	0c f4       	brge	.+2      	; 0x122a <_Z16BluetoothControlii+0x1f8>
				{
					Speed(All, speed);
    1228:	97 cf       	rjmp	.-210    	; 0x1158 <_Z16BluetoothControlii+0x126>
    122a:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    122e:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	2c db       	rcall	.-2472   	; 0x88e <_Z5Speed5Motori>
					Move(BackwardRight);
    1236:	86 e0       	ldi	r24, 0x06	; 6
    1238:	18 c1       	rjmp	.+560    	; 0x146a <_Z16BluetoothControlii+0x438>
				
				break;
				
				// Forward Left
				case 'G':
				if(!runAutonomous && RobotMovementDirection != ForwardLeft && distanceIrSensorFront > DISTANCE_TO_OBJECT)
    123a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    123e:	81 11       	cpse	r24, r1
    1240:	51 cf       	rjmp	.-350    	; 0x10e4 <_Z16BluetoothControlii+0xb2>
    1242:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	09 f4       	brne	.+2      	; 0x124c <_Z16BluetoothControlii+0x21a>
    124a:	4c cf       	rjmp	.-360    	; 0x10e4 <_Z16BluetoothControlii+0xb2>
    124c:	2f e1       	ldi	r18, 0x1F	; 31
    124e:	e2 16       	cp	r14, r18
    1250:	f1 04       	cpc	r15, r1
    1252:	0c f4       	brge	.+2      	; 0x1256 <_Z16BluetoothControlii+0x224>
				{
					Speed(All, speed);
    1254:	4c cf       	rjmp	.-360    	; 0x10ee <_Z16BluetoothControlii+0xbc>
    1256:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    125a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    125e:	84 e0       	ldi	r24, 0x04	; 4
    1260:	16 db       	rcall	.-2516   	; 0x88e <_Z5Speed5Motori>
					Move(ForwardLeft);
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	02 c1       	rjmp	.+516    	; 0x146a <_Z16BluetoothControlii+0x438>
				}
				break;
				
				// Backwards Left
				case 'H':
				if(!runAutonomous && RobotMovementDirection != ForwardRight && distanceIrSensorBack > DISTANCE_TO_OBJECT)
    1266:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    126a:	81 11       	cpse	r24, r1
    126c:	71 cf       	rjmp	.-286    	; 0x1150 <_Z16BluetoothControlii+0x11e>
    126e:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	09 f4       	brne	.+2      	; 0x1278 <_Z16BluetoothControlii+0x246>
    1276:	6c cf       	rjmp	.-296    	; 0x1150 <_Z16BluetoothControlii+0x11e>
    1278:	0f 31       	cpi	r16, 0x1F	; 31
    127a:	11 05       	cpc	r17, r1
    127c:	0c f4       	brge	.+2      	; 0x1280 <_Z16BluetoothControlii+0x24e>
				{
					Speed(All, speed);
    127e:	6c cf       	rjmp	.-296    	; 0x1158 <_Z16BluetoothControlii+0x126>
    1280:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <speed>
    1284:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <speed+0x1>
    1288:	84 e0       	ldi	r24, 0x04	; 4
					Move(BackwardLeft);
    128a:	01 db       	rcall	.-2558   	; 0x88e <_Z5Speed5Motori>
    128c:	85 e0       	ldi	r24, 0x05	; 5
				break;
				
				// App: Front Lights OFF
				// Implementation: Autonomous OFF
				case 'w':
				runAutonomous = false;
    128e:	ed c0       	rjmp	.+474    	; 0x146a <_Z16BluetoothControlii+0x438>
    1290:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <runAutonomous>
				break;

				// App: Warning Triangle OFF
				// Implementation: Will play a fill base on number of times the user clicks on warning triangle
				case 'X':
				if(!runAutonomous)
    1294:	eb c0       	rjmp	.+470    	; 0x146c <_Z16BluetoothControlii+0x43a>
    1296:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
				{
					if(!playFileRequestRecieved)
    129a:	81 11       	cpse	r24, r1
    129c:	e7 c0       	rjmp	.+462    	; 0x146c <_Z16BluetoothControlii+0x43a>
    129e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <playFileRequestRecieved>
					{
						timeLastRequest = millis();
    12a2:	81 11       	cpse	r24, r1
    12a4:	0b c0       	rjmp	.+22     	; 0x12bc <_Z16BluetoothControlii+0x28a>
    12a6:	da d7       	rcall	.+4020   	; 0x225c <millis>
    12a8:	70 93 6a 05 	sts	0x056A, r23	; 0x80056a <timeLastRequest+0x1>
    12ac:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <timeLastRequest>
						playFileRequestRecieved = true;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <playFileRequestRecieved>
						fileNameRequestIndex = minFileName;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
					}
					else
					{
						if(playFileRequestRecieved)
						{
							timeLastRequest = millis();
    12ba:	0a c0       	rjmp	.+20     	; 0x12d0 <_Z16BluetoothControlii+0x29e>
    12bc:	cf d7       	rcall	.+3998   	; 0x225c <millis>
    12be:	70 93 6a 05 	sts	0x056A, r23	; 0x80056a <timeLastRequest+0x1>
    12c2:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <timeLastRequest>
							fileNameRequestIndex++;
    12c6:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <fileNameRequestIndex>
    12ca:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <fileNameRequestIndex+0x1>
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <fileNameRequestIndex+0x1>
    12d4:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <fileNameRequestIndex>
						}
					}

					if(fileNameIndex > maxFileName)
    12d8:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <fileNameIndex>
    12dc:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <fileNameIndex+0x1>
    12e0:	47 97       	sbiw	r24, 0x17	; 23
					{
						fileNameIndex=minFileName;
    12e2:	a4 f1       	brlt	.+104    	; 0x134c <_Z16BluetoothControlii+0x31a>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <fileNameIndex+0x1>
    12ec:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <fileNameIndex>
				break;
				
				// App: Warning Triangle OFF
				// Implementation: Will play a fill base on number of times the user clicks on warning triangle
				case 'x':
				if(!runAutonomous)
    12f0:	2d c0       	rjmp	.+90     	; 0x134c <_Z16BluetoothControlii+0x31a>
    12f2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    12f6:	81 11       	cpse	r24, r1
				{
					if(!playFileRequestRecieved)
    12f8:	b9 c0       	rjmp	.+370    	; 0x146c <_Z16BluetoothControlii+0x43a>
    12fa:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <playFileRequestRecieved>
					{
						timeLastRequest = millis();
    12fe:	81 11       	cpse	r24, r1
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <_Z16BluetoothControlii+0x2e6>
    1302:	ac d7       	rcall	.+3928   	; 0x225c <millis>
    1304:	70 93 6a 05 	sts	0x056A, r23	; 0x80056a <timeLastRequest+0x1>
    1308:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <timeLastRequest>
						playFileRequestRecieved = true;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <playFileRequestRecieved>
						fileNameRequestIndex = minFileName;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
					}
					else
					{
						if(playFileRequestRecieved)
						{
							timeLastRequest = millis();
    1316:	0a c0       	rjmp	.+20     	; 0x132c <_Z16BluetoothControlii+0x2fa>
    1318:	a1 d7       	rcall	.+3906   	; 0x225c <millis>
    131a:	70 93 6a 05 	sts	0x056A, r23	; 0x80056a <timeLastRequest+0x1>
    131e:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <timeLastRequest>
							fileNameRequestIndex++;
    1322:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <fileNameRequestIndex>
    1326:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <fileNameRequestIndex+0x1>
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <fileNameRequestIndex+0x1>
    1330:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <fileNameRequestIndex>
						}
					}

					if(fileNameRequestIndex > maxFileName)
    1334:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <fileNameRequestIndex>
    1338:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <fileNameRequestIndex+0x1>
    133c:	47 97       	sbiw	r24, 0x17	; 23
					{
						fileNameRequestIndex=minFileName;
    133e:	34 f0       	brlt	.+12     	; 0x134c <_Z16BluetoothControlii+0x31a>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <fileNameRequestIndex+0x1>
					}

					Serial.print("fileNameRequestIndex: ");
    1348:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <fileNameRequestIndex>
    134c:	60 e7       	ldi	r22, 0x70	; 112
    134e:	74 e0       	ldi	r23, 0x04	; 4
    1350:	8f eb       	ldi	r24, 0xBF	; 191
    1352:	95 e0       	ldi	r25, 0x05	; 5
					Serial.println(fileNameRequestIndex);
    1354:	5b d6       	rcall	.+3254   	; 0x200c <_ZN5Print5printEPKc>
    1356:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <fileNameRequestIndex>
    135a:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <fileNameRequestIndex+0x1>
    135e:	4a e0       	ldi	r20, 0x0A	; 10
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	8f eb       	ldi	r24, 0xBF	; 191
    1364:	95 e0       	ldi	r25, 0x05	; 5
    1366:	20 d7       	rcall	.+3648   	; 0x21a8 <_ZN5Print7printlnEii>
    1368:	81 c0       	rjmp	.+258    	; 0x146c <_Z16BluetoothControlii+0x43a>
				break;
				
				// App: Back Lights Off
				// Implementation: Plays a sound files in sequence
				case 'u':
				if(!runAutonomous)
    136a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    136e:	81 11       	cpse	r24, r1
    1370:	7d c0       	rjmp	.+250    	; 0x146c <_Z16BluetoothControlii+0x43a>
				{
					char charBuf[12];
					sprintf(charBuf, "%d.wav", fileNameIndex++);
    1372:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <fileNameIndex>
    1376:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <fileNameIndex+0x1>
    137a:	9c 01       	movw	r18, r24
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	30 93 6e 05 	sts	0x056E, r19	; 0x80056e <fileNameIndex+0x1>
    1384:	20 93 6d 05 	sts	0x056D, r18	; 0x80056d <fileNameIndex>
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	8e e7       	ldi	r24, 0x7E	; 126
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	8e 01       	movw	r16, r28
    1396:	0f 5f       	subi	r16, 0xFF	; 255
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	1f 93       	push	r17
    139c:	0f 93       	push	r16
					Serial.println(charBuf);
    139e:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <sprintf>
    13a2:	b8 01       	movw	r22, r16
    13a4:	8f eb       	ldi	r24, 0xBF	; 191
    13a6:	95 e0       	ldi	r25, 0x05	; 5
					PlaySoundFile(charBuf);
    13a8:	4c d6       	rcall	.+3224   	; 0x2042 <_ZN5Print7printlnEPKc>
    13aa:	c8 01       	movw	r24, r16
    13ac:	62 dc       	rcall	.-1852   	; 0xc72 <_Z13PlaySoundFilePc>

					if(fileNameIndex > maxFileName)
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <fileNameIndex>
    13be:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <fileNameIndex+0x1>
    13c2:	47 97       	sbiw	r24, 0x17	; 23
    13c4:	0c f4       	brge	.+2      	; 0x13c8 <_Z16BluetoothControlii+0x396>
					{
						fileNameIndex=minFileName;
    13c6:	52 c0       	rjmp	.+164    	; 0x146c <_Z16BluetoothControlii+0x43a>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <fileNameIndex+0x1>
    13d0:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <fileNameIndex>
				break;

				// App: Horn ON
				// Implementation: Play Sound in Speaker
				case 'V':
				if(!runAutonomous)
    13d4:	4b c0       	rjmp	.+150    	; 0x146c <_Z16BluetoothControlii+0x43a>
    13d6:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
    13da:	81 11       	cpse	r24, r1
				{
					SaySomethingRandom();
    13dc:	47 c0       	rjmp	.+142    	; 0x146c <_Z16BluetoothControlii+0x43a>
    13de:	58 dc       	rcall	.-1872   	; 0xc90 <_Z18SaySomethingRandomv>
    13e0:	45 c0       	rjmp	.+138    	; 0x146c <_Z16BluetoothControlii+0x43a>
				break;
				
				// App: Disconnect from BT Module. Everything OFF
				// Implementation: Run Autonomous
				case 'D':
				runAutonomous = true;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <runAutonomous>
				break;
    13e8:	41 c0       	rjmp	.+130    	; 0x146c <_Z16BluetoothControlii+0x43a>
				
				// Get velocity
				default:
				if (command == 'q')
    13ea:	91 37       	cpi	r25, 0x71	; 113
    13ec:	39 f4       	brne	.+14     	; 0x13fc <_Z16BluetoothControlii+0x3ca>
				{
					// Full velocity
					//Serial.println("Velocity Max");
					speed = 255;
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <speed+0x1>
    13f6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <speed>
				}
				else
				{
					// Chars '0' - '9' have an integer equivalence of 48 - 57, accordingly.
					if ((command >= 48) && (command <= 57))
    13fa:	38 c0       	rjmp	.+112    	; 0x146c <_Z16BluetoothControlii+0x43a>
    13fc:	80 ed       	ldi	r24, 0xD0	; 208
    13fe:	89 0f       	add	r24, r25
    1400:	8a 30       	cpi	r24, 0x0A	; 10
					{
						// Subtracting 48 changes the range from 48-57 to 0-9.
						// Multiplying by 25 changes the range from 0-9 to 0-225.
						speed = (command - 48) * 25;
    1402:	a0 f5       	brcc	.+104    	; 0x146c <_Z16BluetoothControlii+0x43a>
    1404:	89 2f       	mov	r24, r25
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	c0 97       	sbiw	r24, 0x30	; 48
    140a:	49 e1       	ldi	r20, 0x19	; 25
    140c:	48 9f       	mul	r20, r24
    140e:	90 01       	movw	r18, r0
    1410:	49 9f       	mul	r20, r25
    1412:	30 0d       	add	r19, r0
    1414:	11 24       	eor	r1, r1
    1416:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <speed+0x1>
    141a:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <speed>
			}
		}
		else
		{
			// Get the current time (millis since execution started).
			timeCurrentCommand = millis();
    141e:	26 c0       	rjmp	.+76     	; 0x146c <_Z16BluetoothControlii+0x43a>
    1420:	1d d7       	rcall	.+3642   	; 0x225c <millis>
    1422:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <timeCurrentCommand>
    1426:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <timeCurrentCommand+0x1>
    142a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <timeCurrentCommand+0x2>
    142e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <timeCurrentCommand+0x3>
			
			// Check if it has been 500ms since we received last command.
			if ((timeCurrentCommand - timePreviousCommand) > 500 && !runAutonomous)
    1432:	00 91 75 05 	lds	r16, 0x0575	; 0x800575 <timePreviousCommand>
    1436:	10 91 76 05 	lds	r17, 0x0576	; 0x800576 <timePreviousCommand+0x1>
    143a:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <timePreviousCommand+0x2>
    143e:	30 91 78 05 	lds	r19, 0x0578	; 0x800578 <timePreviousCommand+0x3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	80 1b       	sub	r24, r16
    1448:	91 0b       	sbc	r25, r17
    144a:	a2 0b       	sbc	r26, r18
    144c:	b3 0b       	sbc	r27, r19
    144e:	85 3f       	cpi	r24, 0xF5	; 245
    1450:	91 40       	sbci	r25, 0x01	; 1
    1452:	a1 05       	cpc	r26, r1
    1454:	b1 05       	cpc	r27, r1
    1456:	50 f0       	brcs	.+20     	; 0x146c <_Z16BluetoothControlii+0x43a>
    1458:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
			{
				if (RobotMovementDirection != Stop)
    145c:	81 11       	cpse	r24, r1
    145e:	06 c0       	rjmp	.+12     	; 0x146c <_Z16BluetoothControlii+0x43a>
    1460:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <RobotMovementDirection>
				{
					// More than 500ms have passed since last command received, car is out of range.
					// Therefore stop the car and turn lights off.
					//Serial.println("Turn off lights and stop car");
					Move(Stop);
    1464:	88 23       	and	r24, r24
    1466:	11 f0       	breq	.+4      	; 0x146c <_Z16BluetoothControlii+0x43a>
    1468:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

	}

	if(playFileRequestRecieved)
    146a:	62 da       	rcall	.-2876   	; 0x930 <_Z4Move9Direction>
    146c:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <playFileRequestRecieved>
    1470:	88 23       	and	r24, r24
	{
		int timeSinceLastRequest = millis() - timeLastRequest;
    1472:	79 f1       	breq	.+94     	; 0x14d2 <_Z16BluetoothControlii+0x4a0>
    1474:	f3 d6       	rcall	.+3558   	; 0x225c <millis>
		if(timeSinceLastRequest > 750)
    1476:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <timeLastRequest>
    147a:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <timeLastRequest+0x1>
    147e:	62 1b       	sub	r22, r18
    1480:	73 0b       	sbc	r23, r19
    1482:	6f 3e       	cpi	r22, 0xEF	; 239
		{
			char charBuf[12];
			sprintf(charBuf, "%d.wav", fileNameRequestIndex);
    1484:	72 40       	sbci	r23, 0x02	; 2
    1486:	2c f1       	brlt	.+74     	; 0x14d2 <_Z16BluetoothControlii+0x4a0>
    1488:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <fileNameRequestIndex+0x1>
    148c:	8f 93       	push	r24
    148e:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <fileNameRequestIndex>
    1492:	8f 93       	push	r24
    1494:	8e e7       	ldi	r24, 0x7E	; 126
    1496:	93 e0       	ldi	r25, 0x03	; 3
    1498:	9f 93       	push	r25
    149a:	8f 93       	push	r24
    149c:	8e 01       	movw	r16, r28
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	1f 93       	push	r17
    14a4:	0f 93       	push	r16
			Serial.println(charBuf);
    14a6:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <sprintf>
    14aa:	b8 01       	movw	r22, r16
    14ac:	8f eb       	ldi	r24, 0xBF	; 191
    14ae:	95 e0       	ldi	r25, 0x05	; 5
			PlaySoundFile(charBuf);
    14b0:	c8 d5       	rcall	.+2960   	; 0x2042 <_ZN5Print7printlnEPKc>
    14b2:	c8 01       	movw	r24, r16
    14b4:	de db       	rcall	.-2116   	; 0xc72 <_Z13PlaySoundFilePc>
			fileNameRequestIndex = minFileName;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <fileNameRequestIndex+0x1>
    14be:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <fileNameRequestIndex>
			playFileRequestRecieved = false;
    14c2:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <playFileRequestRecieved>
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
		}
	}
}
    14d2:	2c 96       	adiw	r28, 0x0c	; 12
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	08 95       	ret

000014ec <loop>:
	lastTimeISpoke = millis();
	fileNameIndex = minFileName;
}

void loop()
{
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
	int distanceIrSensorFront = ReadIRsensorDistanceInCm(IRsensorFront);
    14f4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <IRsensorFront>
    14f8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <IRsensorFront+0x1>
    14fc:	b6 d9       	rcall	.-3220   	; 0x86a <_Z24ReadIRsensorDistanceInCmi>
    14fe:	ec 01       	movw	r28, r24
	int distanceIrSensorBack = ReadIRsensorDistanceInCm(IRsensorBack);
    1500:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <IRsensorBack>
    1504:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <IRsensorBack+0x1>
    1508:	b0 d9       	rcall	.-3232   	; 0x86a <_Z24ReadIRsensorDistanceInCmi>
    150a:	8c 01       	movw	r16, r24
		Serial.println(distanceIrSensorFront);
		Serial.print("distanceIrSensorBack: ");
		Serial.println(distanceIrSensorBack);
	}

	if (newCharacterRecieved)
    150c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <newCharacterRecieved>
    1510:	88 23       	and	r24, r24
    1512:	09 f1       	breq	.+66     	; 0x1556 <loop+0x6a>
	{
		switch (receivedCharacter)
    1514:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <receivedCharacter>
    1518:	87 35       	cpi	r24, 0x57	; 87
    151a:	29 f0       	breq	.+10     	; 0x1526 <loop+0x3a>
    151c:	87 37       	cpi	r24, 0x77	; 119
    151e:	d9 f4       	brne	.+54     	; 0x1556 <loop+0x6a>
			break;
			
			// App: Front Lights OFF
			// Implementation: Autonomous OFF
			case 'w':
			runAutonomous = false;
    1520:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <runAutonomous>
    1524:	03 c0       	rjmp	.+6      	; 0x152c <loop+0x40>
		switch (receivedCharacter)
		{
			// App: Front lights ON
			// Implementation: Autonomous ON
			case 'W':
			runAutonomous = true;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <runAutonomous>
			
			// App: Front Lights OFF
			// Implementation: Autonomous OFF
			case 'w':
			runAutonomous = false;
			timePreviousCommand = millis();
    152c:	97 d6       	rcall	.+3374   	; 0x225c <millis>
    152e:	60 93 75 05 	sts	0x0575, r22	; 0x800575 <timePreviousCommand>
    1532:	70 93 76 05 	sts	0x0576, r23	; 0x800576 <timePreviousCommand+0x1>
    1536:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <timePreviousCommand+0x2>
    153a:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <timePreviousCommand+0x3>
			prevCommand = command;
    153e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <command>
    1542:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <prevCommand>
			command = receivedCharacter;
    1546:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <receivedCharacter>
    154a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <command>
			newCharacterRecieved = false;
    154e:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <newCharacterRecieved>
			Move(Stop);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	ed d9       	rcall	.-3110   	; 0x930 <_Z4Move9Direction>
			break;
		}
	}

	if(runAutonomous)
    1556:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <runAutonomous>
	{
		Autonomous(distanceIrSensorFront, distanceIrSensorBack);
    155a:	b8 01       	movw	r22, r16
			Move(Stop);
			break;
		}
	}

	if(runAutonomous)
    155c:	88 23       	and	r24, r24
    155e:	31 f0       	breq	.+12     	; 0x156c <loop+0x80>
	{
		Autonomous(distanceIrSensorFront, distanceIrSensorBack);
    1560:	ce 01       	movw	r24, r28
	}
	else
	{
		BluetoothControl(distanceIrSensorFront, distanceIrSensorBack);
	}
}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
		}
	}

	if(runAutonomous)
	{
		Autonomous(distanceIrSensorFront, distanceIrSensorBack);
    1568:	0f 91       	pop	r16
    156a:	c8 cb       	rjmp	.-2160   	; 0xcfc <_Z10Autonomousii>
	}
	else
	{
		BluetoothControl(distanceIrSensorFront, distanceIrSensorBack);
	}
}
    156c:	ce 01       	movw	r24, r28
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
	{
		Autonomous(distanceIrSensorFront, distanceIrSensorBack);
	}
	else
	{
		BluetoothControl(distanceIrSensorFront, distanceIrSensorBack);
    1574:	0f 91       	pop	r16
    1576:	5d cd       	rjmp	.-1350   	; 0x1032 <_Z16BluetoothControlii>

00001578 <_GLOBAL__sub_I_IRsensorFront>:
unsigned long srfDistanceArray[180 / SENSOR_STEP];
unsigned long minimumDistanceThreshold = 10;
unsigned long maximumDistanceThreshold = 400;

// Servo for Distance Measurements
Servo servoObjectFinderAndDistance;
    1578:	82 e1       	ldi	r24, 0x12	; 18
    157a:	95 e0       	ldi	r25, 0x05	; 5
    157c:	0e 94 72 29 	call	0x52e4	; 0x52e4 <_ZN5ServoC1Ev>
// DC motor on M1
AF_DCMotor FrontLeftMotor(1);
    1580:	42 e0       	ldi	r20, 0x02	; 2
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	80 e1       	ldi	r24, 0x10	; 16
    1586:	95 e0       	ldi	r25, 0x05	; 5
    1588:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN10AF_DCMotorC1Ehh>
// DC motor on M2
AF_DCMotor FrontRightMotor(2);
    158c:	42 e0       	ldi	r20, 0x02	; 2
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	8e e0       	ldi	r24, 0x0E	; 14
    1592:	95 e0       	ldi	r25, 0x05	; 5
    1594:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN10AF_DCMotorC1Ehh>
// DC motor on M3
AF_DCMotor BackLeftMotor(3);
    1598:	42 e0       	ldi	r20, 0x02	; 2
    159a:	63 e0       	ldi	r22, 0x03	; 3
    159c:	8c e0       	ldi	r24, 0x0C	; 12
    159e:	95 e0       	ldi	r25, 0x05	; 5
    15a0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN10AF_DCMotorC1Ehh>
// DC motor on M4 -
AF_DCMotor BackRightMotor(4);
    15a4:	42 e0       	ldi	r20, 0x02	; 2
    15a6:	64 e0       	ldi	r22, 0x04	; 4
    15a8:	8a e0       	ldi	r24, 0x0A	; 10
    15aa:	95 e0       	ldi	r25, 0x05	; 5
    15ac:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <_ZN10AF_DCMotorC1Ehh>

000015b0 <_Z12serialEvent3v>:
	tmrpcm.play(charBuf);
}

void serialEvent3()
{
	if (Serial3.available() > 0)
    15b0:	8c e5       	ldi	r24, 0x5C	; 92
    15b2:	96 e0       	ldi	r25, 0x06	; 6
    15b4:	44 d2       	rcall	.+1160   	; 0x1a3e <_ZN14HardwareSerial9availableEv>
    15b6:	18 16       	cp	r1, r24
    15b8:	19 06       	cpc	r1, r25
    15ba:	44 f4       	brge	.+16     	; 0x15cc <_Z12serialEvent3v+0x1c>
	{
		receivedCharacter = Serial3.read();
    15bc:	8c e5       	ldi	r24, 0x5C	; 92
    15be:	96 e0       	ldi	r25, 0x06	; 6
    15c0:	58 d2       	rcall	.+1200   	; 0x1a72 <_ZN14HardwareSerial4readEv>
    15c2:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <receivedCharacter>
		newCharacterRecieved = true;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <newCharacterRecieved>
    15cc:	08 95       	ret

000015ce <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	08 95       	ret

000015d4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    15d4:	08 95       	ret

000015d6 <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	0b b6       	in	r0, 0x3b	; 59
    15e2:	0f 92       	push	r0
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	ef 93       	push	r30
    15fa:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    15fc:	e0 91 bd 05 	lds	r30, 0x05BD	; 0x8005bd <_ZN14SoftwareSerial13active_objectE>
    1600:	f0 91 be 05 	lds	r31, 0x05BE	; 0x8005be <_ZN14SoftwareSerial13active_objectE+0x1>
    1604:	30 97       	sbiw	r30, 0x00	; 0
    1606:	09 f4       	brne	.+2      	; 0x160a <__vector_10+0x34>
    1608:	51 c0       	rjmp	.+162    	; 0x16ac <__vector_10+0xd6>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    160a:	96 8d       	ldd	r25, Z+30	; 0x1e
    160c:	a6 85       	ldd	r26, Z+14	; 0x0e
    160e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1610:	85 85       	ldd	r24, Z+13	; 0x0d
    1612:	91 ff       	sbrs	r25, 1
    1614:	04 c0       	rjmp	.+8      	; 0x161e <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1616:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1618:	89 23       	and	r24, r25
    161a:	29 f4       	brne	.+10     	; 0x1626 <__vector_10+0x50>
    161c:	47 c0       	rjmp	.+142    	; 0x16ac <__vector_10+0xd6>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    161e:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1620:	89 23       	and	r24, r25
    1622:	09 f0       	breq	.+2      	; 0x1626 <__vector_10+0x50>
    1624:	43 c0       	rjmp	.+134    	; 0x16ac <__vector_10+0xd6>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1626:	a3 89       	ldd	r26, Z+19	; 0x13
    1628:	b4 89       	ldd	r27, Z+20	; 0x14
    162a:	9c 91       	ld	r25, X
    162c:	85 89       	ldd	r24, Z+21	; 0x15
    162e:	80 95       	com	r24
    1630:	89 23       	and	r24, r25
    1632:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1634:	86 89       	ldd	r24, Z+22	; 0x16
    1636:	97 89       	ldd	r25, Z+23	; 0x17
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    163c:	60 8d       	ldd	r22, Z+24	; 0x18
    163e:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1640:	a6 85       	ldd	r26, Z+14	; 0x0e
    1642:	b7 85       	ldd	r27, Z+15	; 0x0f
    1644:	55 85       	ldd	r21, Z+13	; 0x0d
    1646:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	cb 01       	movw	r24, r22
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    1650:	82 2f       	mov	r24, r18
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	95 95       	asr	r25
    1656:	87 95       	ror	r24
    1658:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    165a:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    165c:	45 23       	and	r20, r21
    165e:	09 f0       	breq	.+2      	; 0x1662 <__vector_10+0x8c>
        d |= 0x80;
    1660:	20 68       	ori	r18, 0x80	; 128
    1662:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    1664:	91 f7       	brne	.-28     	; 0x164a <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    1666:	86 8d       	ldd	r24, Z+30	; 0x1e
    1668:	81 fd       	sbrc	r24, 1
      d = ~d;
    166a:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    166c:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	8f 73       	andi	r24, 0x3F	; 63
    1676:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
    1678:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <_ZN14SoftwareSerial20_receive_buffer_headE>
    167c:	38 17       	cp	r19, r24
    167e:	49 f0       	breq	.+18     	; 0x1692 <__vector_10+0xbc>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    1680:	a0 91 7c 05 	lds	r26, 0x057C	; 0x80057c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	a3 58       	subi	r26, 0x83	; 131
    1688:	ba 4f       	sbci	r27, 0xFA	; 250
    168a:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
    168c:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <__vector_10+0xc2>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    1692:	86 8d       	ldd	r24, Z+30	; 0x1e
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	86 8f       	std	Z+30, r24	; 0x1e
    1698:	82 8d       	ldd	r24, Z+26	; 0x1a
    169a:	93 8d       	ldd	r25, Z+27	; 0x1b
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <__vector_10+0xc6>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    16a0:	a3 89       	ldd	r26, Z+19	; 0x13
    16a2:	b4 89       	ldd	r27, Z+20	; 0x14
    16a4:	9c 91       	ld	r25, X
    16a6:	85 89       	ldd	r24, Z+21	; 0x15
    16a8:	89 2b       	or	r24, r25
    16aa:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0b be       	out	0x3b, r0	; 59
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <__cmpsf2>:
    16d2:	d9 d0       	rcall	.+434    	; 0x1886 <__fp_cmp>
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <__cmpsf2+0x6>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	08 95       	ret

000016da <__divsf3>:
    16da:	0c d0       	rcall	.+24     	; 0x16f4 <__divsf3x>
    16dc:	0f c1       	rjmp	.+542    	; 0x18fc <__fp_round>
    16de:	07 d1       	rcall	.+526    	; 0x18ee <__fp_pscB>
    16e0:	40 f0       	brcs	.+16     	; 0x16f2 <__divsf3+0x18>
    16e2:	fe d0       	rcall	.+508    	; 0x18e0 <__fp_pscA>
    16e4:	30 f0       	brcs	.+12     	; 0x16f2 <__divsf3+0x18>
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <__divsf3+0x16>
    16e8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <__divsf3+0x18>
    16ec:	f0 c0       	rjmp	.+480    	; 0x18ce <__fp_inf>
    16ee:	51 11       	cpse	r21, r1
    16f0:	39 c1       	rjmp	.+626    	; 0x1964 <__fp_szero>
    16f2:	f3 c0       	rjmp	.+486    	; 0x18da <__fp_nan>

000016f4 <__divsf3x>:
    16f4:	14 d1       	rcall	.+552    	; 0x191e <__fp_split3>
    16f6:	98 f3       	brcs	.-26     	; 0x16de <__divsf3+0x4>

000016f8 <__divsf3_pse>:
    16f8:	99 23       	and	r25, r25
    16fa:	c9 f3       	breq	.-14     	; 0x16ee <__divsf3+0x14>
    16fc:	55 23       	and	r21, r21
    16fe:	b1 f3       	breq	.-20     	; 0x16ec <__divsf3+0x12>
    1700:	95 1b       	sub	r25, r21
    1702:	55 0b       	sbc	r21, r21
    1704:	bb 27       	eor	r27, r27
    1706:	aa 27       	eor	r26, r26
    1708:	62 17       	cp	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	84 07       	cpc	r24, r20
    170e:	38 f0       	brcs	.+14     	; 0x171e <__divsf3_pse+0x26>
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	44 1f       	adc	r20, r20
    171a:	aa 1f       	adc	r26, r26
    171c:	a9 f3       	breq	.-22     	; 0x1708 <__divsf3_pse+0x10>
    171e:	33 d0       	rcall	.+102    	; 0x1786 <__divsf3_pse+0x8e>
    1720:	0e 2e       	mov	r0, r30
    1722:	3a f0       	brmi	.+14     	; 0x1732 <__divsf3_pse+0x3a>
    1724:	e0 e8       	ldi	r30, 0x80	; 128
    1726:	30 d0       	rcall	.+96     	; 0x1788 <__divsf3_pse+0x90>
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	50 40       	sbci	r21, 0x00	; 0
    172c:	e6 95       	lsr	r30
    172e:	00 1c       	adc	r0, r0
    1730:	ca f7       	brpl	.-14     	; 0x1724 <__divsf3_pse+0x2c>
    1732:	29 d0       	rcall	.+82     	; 0x1786 <__divsf3_pse+0x8e>
    1734:	fe 2f       	mov	r31, r30
    1736:	27 d0       	rcall	.+78     	; 0x1786 <__divsf3_pse+0x8e>
    1738:	66 0f       	add	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	88 1f       	adc	r24, r24
    173e:	bb 1f       	adc	r27, r27
    1740:	26 17       	cp	r18, r22
    1742:	37 07       	cpc	r19, r23
    1744:	48 07       	cpc	r20, r24
    1746:	ab 07       	cpc	r26, r27
    1748:	b0 e8       	ldi	r27, 0x80	; 128
    174a:	09 f0       	breq	.+2      	; 0x174e <__divsf3_pse+0x56>
    174c:	bb 0b       	sbc	r27, r27
    174e:	80 2d       	mov	r24, r0
    1750:	bf 01       	movw	r22, r30
    1752:	ff 27       	eor	r31, r31
    1754:	93 58       	subi	r25, 0x83	; 131
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	2a f0       	brmi	.+10     	; 0x1764 <__divsf3_pse+0x6c>
    175a:	9e 3f       	cpi	r25, 0xFE	; 254
    175c:	51 05       	cpc	r21, r1
    175e:	68 f0       	brcs	.+26     	; 0x177a <__divsf3_pse+0x82>
    1760:	b6 c0       	rjmp	.+364    	; 0x18ce <__fp_inf>
    1762:	00 c1       	rjmp	.+512    	; 0x1964 <__fp_szero>
    1764:	5f 3f       	cpi	r21, 0xFF	; 255
    1766:	ec f3       	brlt	.-6      	; 0x1762 <__divsf3_pse+0x6a>
    1768:	98 3e       	cpi	r25, 0xE8	; 232
    176a:	dc f3       	brlt	.-10     	; 0x1762 <__divsf3_pse+0x6a>
    176c:	86 95       	lsr	r24
    176e:	77 95       	ror	r23
    1770:	67 95       	ror	r22
    1772:	b7 95       	ror	r27
    1774:	f7 95       	ror	r31
    1776:	9f 5f       	subi	r25, 0xFF	; 255
    1778:	c9 f7       	brne	.-14     	; 0x176c <__divsf3_pse+0x74>
    177a:	88 0f       	add	r24, r24
    177c:	91 1d       	adc	r25, r1
    177e:	96 95       	lsr	r25
    1780:	87 95       	ror	r24
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret
    1786:	e1 e0       	ldi	r30, 0x01	; 1
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	bb 1f       	adc	r27, r27
    1790:	62 17       	cp	r22, r18
    1792:	73 07       	cpc	r23, r19
    1794:	84 07       	cpc	r24, r20
    1796:	ba 07       	cpc	r27, r26
    1798:	20 f0       	brcs	.+8      	; 0x17a2 <__divsf3_pse+0xaa>
    179a:	62 1b       	sub	r22, r18
    179c:	73 0b       	sbc	r23, r19
    179e:	84 0b       	sbc	r24, r20
    17a0:	ba 0b       	sbc	r27, r26
    17a2:	ee 1f       	adc	r30, r30
    17a4:	88 f7       	brcc	.-30     	; 0x1788 <__divsf3_pse+0x90>
    17a6:	e0 95       	com	r30
    17a8:	08 95       	ret

000017aa <__fixsfsi>:
    17aa:	04 d0       	rcall	.+8      	; 0x17b4 <__fixunssfsi>
    17ac:	68 94       	set
    17ae:	b1 11       	cpse	r27, r1
    17b0:	d9 c0       	rjmp	.+434    	; 0x1964 <__fp_szero>
    17b2:	08 95       	ret

000017b4 <__fixunssfsi>:
    17b4:	bc d0       	rcall	.+376    	; 0x192e <__fp_splitA>
    17b6:	88 f0       	brcs	.+34     	; 0x17da <__fixunssfsi+0x26>
    17b8:	9f 57       	subi	r25, 0x7F	; 127
    17ba:	90 f0       	brcs	.+36     	; 0x17e0 <__fixunssfsi+0x2c>
    17bc:	b9 2f       	mov	r27, r25
    17be:	99 27       	eor	r25, r25
    17c0:	b7 51       	subi	r27, 0x17	; 23
    17c2:	a0 f0       	brcs	.+40     	; 0x17ec <__fixunssfsi+0x38>
    17c4:	d1 f0       	breq	.+52     	; 0x17fa <__fixunssfsi+0x46>
    17c6:	66 0f       	add	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	1a f0       	brmi	.+6      	; 0x17d6 <__fixunssfsi+0x22>
    17d0:	ba 95       	dec	r27
    17d2:	c9 f7       	brne	.-14     	; 0x17c6 <__fixunssfsi+0x12>
    17d4:	12 c0       	rjmp	.+36     	; 0x17fa <__fixunssfsi+0x46>
    17d6:	b1 30       	cpi	r27, 0x01	; 1
    17d8:	81 f0       	breq	.+32     	; 0x17fa <__fixunssfsi+0x46>
    17da:	c3 d0       	rcall	.+390    	; 0x1962 <__fp_zero>
    17dc:	b1 e0       	ldi	r27, 0x01	; 1
    17de:	08 95       	ret
    17e0:	c0 c0       	rjmp	.+384    	; 0x1962 <__fp_zero>
    17e2:	67 2f       	mov	r22, r23
    17e4:	78 2f       	mov	r23, r24
    17e6:	88 27       	eor	r24, r24
    17e8:	b8 5f       	subi	r27, 0xF8	; 248
    17ea:	39 f0       	breq	.+14     	; 0x17fa <__fixunssfsi+0x46>
    17ec:	b9 3f       	cpi	r27, 0xF9	; 249
    17ee:	cc f3       	brlt	.-14     	; 0x17e2 <__fixunssfsi+0x2e>
    17f0:	86 95       	lsr	r24
    17f2:	77 95       	ror	r23
    17f4:	67 95       	ror	r22
    17f6:	b3 95       	inc	r27
    17f8:	d9 f7       	brne	.-10     	; 0x17f0 <__fixunssfsi+0x3c>
    17fa:	3e f4       	brtc	.+14     	; 0x180a <__fixunssfsi+0x56>
    17fc:	90 95       	com	r25
    17fe:	80 95       	com	r24
    1800:	70 95       	com	r23
    1802:	61 95       	neg	r22
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	08 95       	ret

0000180c <__floatunsisf>:
    180c:	e8 94       	clt
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <__floatsisf+0x12>

00001810 <__floatsisf>:
    1810:	97 fb       	bst	r25, 7
    1812:	3e f4       	brtc	.+14     	; 0x1822 <__floatsisf+0x12>
    1814:	90 95       	com	r25
    1816:	80 95       	com	r24
    1818:	70 95       	com	r23
    181a:	61 95       	neg	r22
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f 4f       	sbci	r24, 0xFF	; 255
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	99 23       	and	r25, r25
    1824:	a9 f0       	breq	.+42     	; 0x1850 <__floatsisf+0x40>
    1826:	f9 2f       	mov	r31, r25
    1828:	96 e9       	ldi	r25, 0x96	; 150
    182a:	bb 27       	eor	r27, r27
    182c:	93 95       	inc	r25
    182e:	f6 95       	lsr	r31
    1830:	87 95       	ror	r24
    1832:	77 95       	ror	r23
    1834:	67 95       	ror	r22
    1836:	b7 95       	ror	r27
    1838:	f1 11       	cpse	r31, r1
    183a:	f8 cf       	rjmp	.-16     	; 0x182c <__floatsisf+0x1c>
    183c:	fa f4       	brpl	.+62     	; 0x187c <__floatsisf+0x6c>
    183e:	bb 0f       	add	r27, r27
    1840:	11 f4       	brne	.+4      	; 0x1846 <__floatsisf+0x36>
    1842:	60 ff       	sbrs	r22, 0
    1844:	1b c0       	rjmp	.+54     	; 0x187c <__floatsisf+0x6c>
    1846:	6f 5f       	subi	r22, 0xFF	; 255
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	8f 4f       	sbci	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	16 c0       	rjmp	.+44     	; 0x187c <__floatsisf+0x6c>
    1850:	88 23       	and	r24, r24
    1852:	11 f0       	breq	.+4      	; 0x1858 <__floatsisf+0x48>
    1854:	96 e9       	ldi	r25, 0x96	; 150
    1856:	11 c0       	rjmp	.+34     	; 0x187a <__floatsisf+0x6a>
    1858:	77 23       	and	r23, r23
    185a:	21 f0       	breq	.+8      	; 0x1864 <__floatsisf+0x54>
    185c:	9e e8       	ldi	r25, 0x8E	; 142
    185e:	87 2f       	mov	r24, r23
    1860:	76 2f       	mov	r23, r22
    1862:	05 c0       	rjmp	.+10     	; 0x186e <__floatsisf+0x5e>
    1864:	66 23       	and	r22, r22
    1866:	71 f0       	breq	.+28     	; 0x1884 <__floatsisf+0x74>
    1868:	96 e8       	ldi	r25, 0x86	; 134
    186a:	86 2f       	mov	r24, r22
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	2a f0       	brmi	.+10     	; 0x187c <__floatsisf+0x6c>
    1872:	9a 95       	dec	r25
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	88 1f       	adc	r24, r24
    187a:	da f7       	brpl	.-10     	; 0x1872 <__floatsisf+0x62>
    187c:	88 0f       	add	r24, r24
    187e:	96 95       	lsr	r25
    1880:	87 95       	ror	r24
    1882:	97 f9       	bld	r25, 7
    1884:	08 95       	ret

00001886 <__fp_cmp>:
    1886:	99 0f       	add	r25, r25
    1888:	00 08       	sbc	r0, r0
    188a:	55 0f       	add	r21, r21
    188c:	aa 0b       	sbc	r26, r26
    188e:	e0 e8       	ldi	r30, 0x80	; 128
    1890:	fe ef       	ldi	r31, 0xFE	; 254
    1892:	16 16       	cp	r1, r22
    1894:	17 06       	cpc	r1, r23
    1896:	e8 07       	cpc	r30, r24
    1898:	f9 07       	cpc	r31, r25
    189a:	c0 f0       	brcs	.+48     	; 0x18cc <__fp_cmp+0x46>
    189c:	12 16       	cp	r1, r18
    189e:	13 06       	cpc	r1, r19
    18a0:	e4 07       	cpc	r30, r20
    18a2:	f5 07       	cpc	r31, r21
    18a4:	98 f0       	brcs	.+38     	; 0x18cc <__fp_cmp+0x46>
    18a6:	62 1b       	sub	r22, r18
    18a8:	73 0b       	sbc	r23, r19
    18aa:	84 0b       	sbc	r24, r20
    18ac:	95 0b       	sbc	r25, r21
    18ae:	39 f4       	brne	.+14     	; 0x18be <__fp_cmp+0x38>
    18b0:	0a 26       	eor	r0, r26
    18b2:	61 f0       	breq	.+24     	; 0x18cc <__fp_cmp+0x46>
    18b4:	23 2b       	or	r18, r19
    18b6:	24 2b       	or	r18, r20
    18b8:	25 2b       	or	r18, r21
    18ba:	21 f4       	brne	.+8      	; 0x18c4 <__fp_cmp+0x3e>
    18bc:	08 95       	ret
    18be:	0a 26       	eor	r0, r26
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <__fp_cmp+0x3e>
    18c2:	a1 40       	sbci	r26, 0x01	; 1
    18c4:	a6 95       	lsr	r26
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	81 1d       	adc	r24, r1
    18ca:	81 1d       	adc	r24, r1
    18cc:	08 95       	ret

000018ce <__fp_inf>:
    18ce:	97 f9       	bld	r25, 7
    18d0:	9f 67       	ori	r25, 0x7F	; 127
    18d2:	80 e8       	ldi	r24, 0x80	; 128
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	08 95       	ret

000018da <__fp_nan>:
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	80 ec       	ldi	r24, 0xC0	; 192
    18de:	08 95       	ret

000018e0 <__fp_pscA>:
    18e0:	00 24       	eor	r0, r0
    18e2:	0a 94       	dec	r0
    18e4:	16 16       	cp	r1, r22
    18e6:	17 06       	cpc	r1, r23
    18e8:	18 06       	cpc	r1, r24
    18ea:	09 06       	cpc	r0, r25
    18ec:	08 95       	ret

000018ee <__fp_pscB>:
    18ee:	00 24       	eor	r0, r0
    18f0:	0a 94       	dec	r0
    18f2:	12 16       	cp	r1, r18
    18f4:	13 06       	cpc	r1, r19
    18f6:	14 06       	cpc	r1, r20
    18f8:	05 06       	cpc	r0, r21
    18fa:	08 95       	ret

000018fc <__fp_round>:
    18fc:	09 2e       	mov	r0, r25
    18fe:	03 94       	inc	r0
    1900:	00 0c       	add	r0, r0
    1902:	11 f4       	brne	.+4      	; 0x1908 <__fp_round+0xc>
    1904:	88 23       	and	r24, r24
    1906:	52 f0       	brmi	.+20     	; 0x191c <__fp_round+0x20>
    1908:	bb 0f       	add	r27, r27
    190a:	40 f4       	brcc	.+16     	; 0x191c <__fp_round+0x20>
    190c:	bf 2b       	or	r27, r31
    190e:	11 f4       	brne	.+4      	; 0x1914 <__fp_round+0x18>
    1910:	60 ff       	sbrs	r22, 0
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__fp_round+0x20>
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	8f 4f       	sbci	r24, 0xFF	; 255
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	08 95       	ret

0000191e <__fp_split3>:
    191e:	57 fd       	sbrc	r21, 7
    1920:	90 58       	subi	r25, 0x80	; 128
    1922:	44 0f       	add	r20, r20
    1924:	55 1f       	adc	r21, r21
    1926:	59 f0       	breq	.+22     	; 0x193e <__fp_splitA+0x10>
    1928:	5f 3f       	cpi	r21, 0xFF	; 255
    192a:	71 f0       	breq	.+28     	; 0x1948 <__fp_splitA+0x1a>
    192c:	47 95       	ror	r20

0000192e <__fp_splitA>:
    192e:	88 0f       	add	r24, r24
    1930:	97 fb       	bst	r25, 7
    1932:	99 1f       	adc	r25, r25
    1934:	61 f0       	breq	.+24     	; 0x194e <__fp_splitA+0x20>
    1936:	9f 3f       	cpi	r25, 0xFF	; 255
    1938:	79 f0       	breq	.+30     	; 0x1958 <__fp_splitA+0x2a>
    193a:	87 95       	ror	r24
    193c:	08 95       	ret
    193e:	12 16       	cp	r1, r18
    1940:	13 06       	cpc	r1, r19
    1942:	14 06       	cpc	r1, r20
    1944:	55 1f       	adc	r21, r21
    1946:	f2 cf       	rjmp	.-28     	; 0x192c <__fp_split3+0xe>
    1948:	46 95       	lsr	r20
    194a:	f1 df       	rcall	.-30     	; 0x192e <__fp_splitA>
    194c:	08 c0       	rjmp	.+16     	; 0x195e <__fp_splitA+0x30>
    194e:	16 16       	cp	r1, r22
    1950:	17 06       	cpc	r1, r23
    1952:	18 06       	cpc	r1, r24
    1954:	99 1f       	adc	r25, r25
    1956:	f1 cf       	rjmp	.-30     	; 0x193a <__fp_splitA+0xc>
    1958:	86 95       	lsr	r24
    195a:	71 05       	cpc	r23, r1
    195c:	61 05       	cpc	r22, r1
    195e:	08 94       	sec
    1960:	08 95       	ret

00001962 <__fp_zero>:
    1962:	e8 94       	clt

00001964 <__fp_szero>:
    1964:	bb 27       	eor	r27, r27
    1966:	66 27       	eor	r22, r22
    1968:	77 27       	eor	r23, r23
    196a:	cb 01       	movw	r24, r22
    196c:	97 f9       	bld	r25, 7
    196e:	08 95       	ret

00001970 <__gesf2>:
    1970:	8a df       	rcall	.-236    	; 0x1886 <__fp_cmp>
    1972:	08 f4       	brcc	.+2      	; 0x1976 <__gesf2+0x6>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	08 95       	ret

00001978 <__mulsf3>:
    1978:	0b d0       	rcall	.+22     	; 0x1990 <__mulsf3x>
    197a:	c0 cf       	rjmp	.-128    	; 0x18fc <__fp_round>
    197c:	b1 df       	rcall	.-158    	; 0x18e0 <__fp_pscA>
    197e:	28 f0       	brcs	.+10     	; 0x198a <__mulsf3+0x12>
    1980:	b6 df       	rcall	.-148    	; 0x18ee <__fp_pscB>
    1982:	18 f0       	brcs	.+6      	; 0x198a <__mulsf3+0x12>
    1984:	95 23       	and	r25, r21
    1986:	09 f0       	breq	.+2      	; 0x198a <__mulsf3+0x12>
    1988:	a2 cf       	rjmp	.-188    	; 0x18ce <__fp_inf>
    198a:	a7 cf       	rjmp	.-178    	; 0x18da <__fp_nan>
    198c:	11 24       	eor	r1, r1
    198e:	ea cf       	rjmp	.-44     	; 0x1964 <__fp_szero>

00001990 <__mulsf3x>:
    1990:	c6 df       	rcall	.-116    	; 0x191e <__fp_split3>
    1992:	a0 f3       	brcs	.-24     	; 0x197c <__mulsf3+0x4>

00001994 <__mulsf3_pse>:
    1994:	95 9f       	mul	r25, r21
    1996:	d1 f3       	breq	.-12     	; 0x198c <__mulsf3+0x14>
    1998:	95 0f       	add	r25, r21
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	55 1f       	adc	r21, r21
    199e:	62 9f       	mul	r22, r18
    19a0:	f0 01       	movw	r30, r0
    19a2:	72 9f       	mul	r23, r18
    19a4:	bb 27       	eor	r27, r27
    19a6:	f0 0d       	add	r31, r0
    19a8:	b1 1d       	adc	r27, r1
    19aa:	63 9f       	mul	r22, r19
    19ac:	aa 27       	eor	r26, r26
    19ae:	f0 0d       	add	r31, r0
    19b0:	b1 1d       	adc	r27, r1
    19b2:	aa 1f       	adc	r26, r26
    19b4:	64 9f       	mul	r22, r20
    19b6:	66 27       	eor	r22, r22
    19b8:	b0 0d       	add	r27, r0
    19ba:	a1 1d       	adc	r26, r1
    19bc:	66 1f       	adc	r22, r22
    19be:	82 9f       	mul	r24, r18
    19c0:	22 27       	eor	r18, r18
    19c2:	b0 0d       	add	r27, r0
    19c4:	a1 1d       	adc	r26, r1
    19c6:	62 1f       	adc	r22, r18
    19c8:	73 9f       	mul	r23, r19
    19ca:	b0 0d       	add	r27, r0
    19cc:	a1 1d       	adc	r26, r1
    19ce:	62 1f       	adc	r22, r18
    19d0:	83 9f       	mul	r24, r19
    19d2:	a0 0d       	add	r26, r0
    19d4:	61 1d       	adc	r22, r1
    19d6:	22 1f       	adc	r18, r18
    19d8:	74 9f       	mul	r23, r20
    19da:	33 27       	eor	r19, r19
    19dc:	a0 0d       	add	r26, r0
    19de:	61 1d       	adc	r22, r1
    19e0:	23 1f       	adc	r18, r19
    19e2:	84 9f       	mul	r24, r20
    19e4:	60 0d       	add	r22, r0
    19e6:	21 1d       	adc	r18, r1
    19e8:	82 2f       	mov	r24, r18
    19ea:	76 2f       	mov	r23, r22
    19ec:	6a 2f       	mov	r22, r26
    19ee:	11 24       	eor	r1, r1
    19f0:	9f 57       	subi	r25, 0x7F	; 127
    19f2:	50 40       	sbci	r21, 0x00	; 0
    19f4:	8a f0       	brmi	.+34     	; 0x1a18 <__mulsf3_pse+0x84>
    19f6:	e1 f0       	breq	.+56     	; 0x1a30 <__mulsf3_pse+0x9c>
    19f8:	88 23       	and	r24, r24
    19fa:	4a f0       	brmi	.+18     	; 0x1a0e <__mulsf3_pse+0x7a>
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	bb 1f       	adc	r27, r27
    1a02:	66 1f       	adc	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	88 1f       	adc	r24, r24
    1a08:	91 50       	subi	r25, 0x01	; 1
    1a0a:	50 40       	sbci	r21, 0x00	; 0
    1a0c:	a9 f7       	brne	.-22     	; 0x19f8 <__mulsf3_pse+0x64>
    1a0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a10:	51 05       	cpc	r21, r1
    1a12:	70 f0       	brcs	.+28     	; 0x1a30 <__mulsf3_pse+0x9c>
    1a14:	5c cf       	rjmp	.-328    	; 0x18ce <__fp_inf>
    1a16:	a6 cf       	rjmp	.-180    	; 0x1964 <__fp_szero>
    1a18:	5f 3f       	cpi	r21, 0xFF	; 255
    1a1a:	ec f3       	brlt	.-6      	; 0x1a16 <__mulsf3_pse+0x82>
    1a1c:	98 3e       	cpi	r25, 0xE8	; 232
    1a1e:	dc f3       	brlt	.-10     	; 0x1a16 <__mulsf3_pse+0x82>
    1a20:	86 95       	lsr	r24
    1a22:	77 95       	ror	r23
    1a24:	67 95       	ror	r22
    1a26:	b7 95       	ror	r27
    1a28:	f7 95       	ror	r31
    1a2a:	e7 95       	ror	r30
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	c1 f7       	brne	.-16     	; 0x1a20 <__mulsf3_pse+0x8c>
    1a30:	fe 2b       	or	r31, r30
    1a32:	88 0f       	add	r24, r24
    1a34:	91 1d       	adc	r25, r1
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	08 95       	ret

00001a3e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1a3e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1a40:	91 8d       	ldd	r25, Z+25	; 0x19
    1a42:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a44:	89 2f       	mov	r24, r25
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	80 5c       	subi	r24, 0xC0	; 192
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	82 1b       	sub	r24, r18
    1a4e:	91 09       	sbc	r25, r1
}
    1a50:	8f 73       	andi	r24, 0x3F	; 63
    1a52:	99 27       	eor	r25, r25
    1a54:	08 95       	ret

00001a56 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1a56:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a58:	91 8d       	ldd	r25, Z+25	; 0x19
    1a5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a5c:	98 17       	cp	r25, r24
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1a60:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a62:	e8 0f       	add	r30, r24
    1a64:	f1 1d       	adc	r31, r1
    1a66:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1a70:	08 95       	ret

00001a72 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1a72:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a74:	91 8d       	ldd	r25, Z+25	; 0x19
    1a76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a78:	98 17       	cp	r25, r24
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1a7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a7e:	df 01       	movw	r26, r30
    1a80:	a8 0f       	add	r26, r24
    1a82:	b1 1d       	adc	r27, r1
    1a84:	5d 96       	adiw	r26, 0x1d	; 29
    1a86:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a88:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a8a:	9f 5f       	subi	r25, 0xFF	; 255
    1a8c:	9f 73       	andi	r25, 0x3F	; 63
    1a8e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1a98:	08 95       	ret

00001a9a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    1a9e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1aa0:	25 2f       	mov	r18, r21
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	84 2f       	mov	r24, r20
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1aa8:	82 1b       	sub	r24, r18
    1aaa:	93 0b       	sbc	r25, r19
    1aac:	54 17       	cp	r21, r20
    1aae:	10 f0       	brcs	.+4      	; 0x1ab4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1ab0:	cf 96       	adiw	r24, 0x3f	; 63
    1ab2:	08 95       	ret
  return tail - head - 1;
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
}
    1ab6:	08 95       	ret

00001ab8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1ab8:	82 ee       	ldi	r24, 0xE2	; 226
    1aba:	9e e0       	ldi	r25, 0x0E	; 14
    1abc:	89 2b       	or	r24, r25
    1abe:	39 f0       	breq	.+14     	; 0x1ace <_Z14serialEventRunv+0x16>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	89 2b       	or	r24, r25
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <_Z14serialEventRunv+0x16>
    1ac8:	7d d1       	rcall	.+762    	; 0x1dc4 <_Z17Serial0_availablev>
    1aca:	81 11       	cpse	r24, r1
    1acc:	24 c0       	rjmp	.+72     	; 0x1b16 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	89 2b       	or	r24, r25
    1ad4:	41 f0       	breq	.+16     	; 0x1ae6 <_Z14serialEventRunv+0x2e>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	89 2b       	or	r24, r25
    1adc:	21 f0       	breq	.+8      	; 0x1ae6 <_Z14serialEventRunv+0x2e>
    1ade:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ae2:	81 11       	cpse	r24, r1
    1ae4:	1b c0       	rjmp	.+54     	; 0x1b1c <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	89 2b       	or	r24, r25
    1aec:	41 f0       	breq	.+16     	; 0x1afe <_Z14serialEventRunv+0x46>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	89 2b       	or	r24, r25
    1af4:	21 f0       	breq	.+8      	; 0x1afe <_Z14serialEventRunv+0x46>
    1af6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1afa:	81 11       	cpse	r24, r1
    1afc:	12 c0       	rjmp	.+36     	; 0x1b22 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1afe:	87 e7       	ldi	r24, 0x77	; 119
    1b00:	9f e0       	ldi	r25, 0x0F	; 15
    1b02:	89 2b       	or	r24, r25
    1b04:	91 f0       	breq	.+36     	; 0x1b2a <_Z14serialEventRunv+0x72>
    1b06:	88 ed       	ldi	r24, 0xD8	; 216
    1b08:	9a e0       	ldi	r25, 0x0A	; 10
    1b0a:	89 2b       	or	r24, r25
    1b0c:	71 f0       	breq	.+28     	; 0x1b2a <_Z14serialEventRunv+0x72>
    1b0e:	ef d1       	rcall	.+990    	; 0x1eee <_Z17Serial3_availablev>
    1b10:	81 11       	cpse	r24, r1
    1b12:	0a c0       	rjmp	.+20     	; 0x1b28 <_Z14serialEventRunv+0x70>
    1b14:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1b16:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b1a:	d9 cf       	rjmp	.-78     	; 0x1ace <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1b1c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b20:	e2 cf       	rjmp	.-60     	; 0x1ae6 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1b22:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1b26:	eb cf       	rjmp	.-42     	; 0x1afe <_Z14serialEventRunv+0x46>
    1b28:	43 cd       	rjmp	.-1402   	; 0x15b0 <_Z12serialEvent3v>
    1b2a:	08 95       	ret

00001b2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1b2c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b2e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b30:	df 01       	movw	r26, r30
    1b32:	a8 0f       	add	r26, r24
    1b34:	b1 1d       	adc	r27, r1
    1b36:	a3 5a       	subi	r26, 0xA3	; 163
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b3c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	8f 73       	andi	r24, 0x3F	; 63
    1b44:	99 27       	eor	r25, r25
    1b46:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1b48:	a6 89       	ldd	r26, Z+22	; 0x16
    1b4a:	b7 89       	ldd	r27, Z+23	; 0x17
    1b4c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1b4e:	a0 89       	ldd	r26, Z+16	; 0x10
    1b50:	b1 89       	ldd	r27, Z+17	; 0x11
    1b52:	8c 91       	ld	r24, X
    1b54:	80 64       	ori	r24, 0x40	; 64
    1b56:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1b58:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b5a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b5c:	98 13       	cpse	r25, r24
    1b5e:	06 c0       	rjmp	.+12     	; 0x1b6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1b60:	02 88       	ldd	r0, Z+18	; 0x12
    1b62:	f3 89       	ldd	r31, Z+19	; 0x13
    1b64:	e0 2d       	mov	r30, r0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7d       	andi	r24, 0xDF	; 223
    1b6a:	80 83       	st	Z, r24
    1b6c:	08 95       	ret

00001b6e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
  _written = true;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b84:	98 13       	cpse	r25, r24
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <_ZN14HardwareSerial5writeEh+0x24>
    1b88:	e8 89       	ldd	r30, Y+16	; 0x10
    1b8a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b8c:	80 81       	ld	r24, Z
    1b8e:	85 fd       	sbrc	r24, 5
    1b90:	23 c0       	rjmp	.+70     	; 0x1bd8 <_ZN14HardwareSerial5writeEh+0x6a>
    1b92:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b94:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	0f 5f       	subi	r16, 0xFF	; 255
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	0f 73       	andi	r16, 0x3F	; 63
    1b9e:	11 27       	eor	r17, r17
    1ba0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1ba2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ba4:	e8 12       	cpse	r14, r24
    1ba6:	0b c0       	rjmp	.+22     	; 0x1bbe <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	07 fc       	sbrc	r0, 7
    1bac:	fa cf       	rjmp	.-12     	; 0x1ba2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1bae:	e8 89       	ldd	r30, Y+16	; 0x10
    1bb0:	f9 89       	ldd	r31, Y+17	; 0x11
    1bb2:	80 81       	ld	r24, Z
    1bb4:	85 ff       	sbrs	r24, 5
    1bb6:	f5 cf       	rjmp	.-22     	; 0x1ba2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1bb8:	ce 01       	movw	r24, r28
    1bba:	b8 df       	rcall	.-144    	; 0x1b2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1bbc:	f2 cf       	rjmp	.-28     	; 0x1ba2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1bbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	e8 0f       	add	r30, r24
    1bc4:	f1 1d       	adc	r31, r1
    1bc6:	e3 5a       	subi	r30, 0xA3	; 163
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1bcc:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1bce:	ea 89       	ldd	r30, Y+18	; 0x12
    1bd0:	fb 89       	ldd	r31, Y+19	; 0x13
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 62       	ori	r24, 0x20	; 32
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1bd8:	ee 89       	ldd	r30, Y+22	; 0x16
    1bda:	ff 89       	ldd	r31, Y+23	; 0x17
    1bdc:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1bde:	e8 89       	ldd	r30, Y+16	; 0x10
    1be0:	f9 89       	ldd	r31, Y+17	; 0x11
    1be2:	80 81       	ld	r24, Z
    1be4:	80 64       	ori	r24, 0x40	; 64
    1be6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	08 95       	ret

00001bfa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1c00:	88 8d       	ldd	r24, Y+24	; 0x18
    1c02:	88 23       	and	r24, r24
    1c04:	c1 f0       	breq	.+48     	; 0x1c36 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1c06:	ea 89       	ldd	r30, Y+18	; 0x12
    1c08:	fb 89       	ldd	r31, Y+19	; 0x13
    1c0a:	80 81       	ld	r24, Z
    1c0c:	85 fd       	sbrc	r24, 5
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <_ZN14HardwareSerial5flushEv+0x20>
    1c10:	a8 89       	ldd	r26, Y+16	; 0x10
    1c12:	b9 89       	ldd	r27, Y+17	; 0x11
    1c14:	8c 91       	ld	r24, X
    1c16:	86 fd       	sbrc	r24, 6
    1c18:	0e c0       	rjmp	.+28     	; 0x1c36 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	07 fc       	sbrc	r0, 7
    1c1e:	f5 cf       	rjmp	.-22     	; 0x1c0a <_ZN14HardwareSerial5flushEv+0x10>
    1c20:	80 81       	ld	r24, Z
    1c22:	85 ff       	sbrs	r24, 5
    1c24:	f2 cf       	rjmp	.-28     	; 0x1c0a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1c26:	a8 89       	ldd	r26, Y+16	; 0x10
    1c28:	b9 89       	ldd	r27, Y+17	; 0x11
    1c2a:	8c 91       	ld	r24, X
    1c2c:	85 ff       	sbrs	r24, 5
    1c2e:	ed cf       	rjmp	.-38     	; 0x1c0a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1c30:	ce 01       	movw	r24, r28
    1c32:	7c df       	rcall	.-264    	; 0x1b2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1c34:	e8 cf       	rjmp	.-48     	; 0x1c06 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	6a 01       	movw	r12, r20
    1c4e:	7b 01       	movw	r14, r22
    1c50:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1c52:	e8 89       	ldd	r30, Y+16	; 0x10
    1c54:	f9 89       	ldd	r31, Y+17	; 0x11
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c5a:	41 15       	cp	r20, r1
    1c5c:	51 4e       	sbci	r21, 0xE1	; 225
    1c5e:	61 05       	cpc	r22, r1
    1c60:	71 05       	cpc	r23, r1
    1c62:	b1 f0       	breq	.+44     	; 0x1c90 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	79 e0       	ldi	r23, 0x09	; 9
    1c68:	8d e3       	ldi	r24, 0x3D	; 61
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a7 01       	movw	r20, r14
    1c6e:	96 01       	movw	r18, r12
    1c70:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__udivmodsi4>
    1c74:	da 01       	movw	r26, r20
    1c76:	c9 01       	movw	r24, r18
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	a1 09       	sbc	r26, r1
    1c7c:	b1 09       	sbc	r27, r1
    1c7e:	b6 95       	lsr	r27
    1c80:	a7 95       	ror	r26
    1c82:	97 95       	ror	r25
    1c84:	87 95       	ror	r24
    1c86:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c88:	21 15       	cp	r18, r1
    1c8a:	80 e1       	ldi	r24, 0x10	; 16
    1c8c:	38 07       	cpc	r19, r24
    1c8e:	a8 f0       	brcs	.+42     	; 0x1cba <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1c90:	e8 89       	ldd	r30, Y+16	; 0x10
    1c92:	f9 89       	ldd	r31, Y+17	; 0x11
    1c94:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c96:	60 e8       	ldi	r22, 0x80	; 128
    1c98:	74 e8       	ldi	r23, 0x84	; 132
    1c9a:	8e e1       	ldi	r24, 0x1E	; 30
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a7 01       	movw	r20, r14
    1ca0:	96 01       	movw	r18, r12
    1ca2:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__udivmodsi4>
    1ca6:	da 01       	movw	r26, r20
    1ca8:	c9 01       	movw	r24, r18
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	a1 09       	sbc	r26, r1
    1cae:	b1 09       	sbc	r27, r1
    1cb0:	b6 95       	lsr	r27
    1cb2:	a7 95       	ror	r26
    1cb4:	97 95       	ror	r25
    1cb6:	87 95       	ror	r24
    1cb8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1cba:	ec 85       	ldd	r30, Y+12	; 0x0c
    1cbc:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cbe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1cc0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1cc2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1cc4:	20 83       	st	Z, r18

  _written = false;
    1cc6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1cc8:	ec 89       	ldd	r30, Y+20	; 0x14
    1cca:	fd 89       	ldd	r31, Y+21	; 0x15
    1ccc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1cce:	ea 89       	ldd	r30, Y+18	; 0x12
    1cd0:	fb 89       	ldd	r31, Y+19	; 0x13
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 61       	ori	r24, 0x10	; 16
    1cd6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1cd8:	ea 89       	ldd	r30, Y+18	; 0x12
    1cda:	fb 89       	ldd	r31, Y+19	; 0x13
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 60       	ori	r24, 0x08	; 8
    1ce0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1ce2:	ea 89       	ldd	r30, Y+18	; 0x12
    1ce4:	fb 89       	ldd	r31, Y+19	; 0x13
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1cec:	ea 89       	ldd	r30, Y+18	; 0x12
    1cee:	fb 89       	ldd	r31, Y+19	; 0x13
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 7d       	andi	r24, 0xDF	; 223
    1cf4:	80 83       	st	Z, r24
}
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	08 95       	ret

00001d06 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	0b b6       	in	r0, 0x3b	; 59
    1d12:	0f 92       	push	r0
    1d14:	2f 93       	push	r18
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	ef 93       	push	r30
    1d1c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1d1e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <Serial+0x10>
    1d22:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <Serial+0x11>
    1d26:	80 81       	ld	r24, Z
    1d28:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <Serial+0x16>
    1d2c:	f0 91 d6 05 	lds	r31, 0x05D6	; 0x8005d6 <Serial+0x17>
    1d30:	82 fd       	sbrc	r24, 2
    1d32:	12 c0       	rjmp	.+36     	; 0x1d58 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1d34:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1d36:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <Serial+0x19>
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1d3e:	20 91 d9 05 	lds	r18, 0x05D9	; 0x8005d9 <Serial+0x1a>
    1d42:	82 17       	cp	r24, r18
    1d44:	51 f0       	breq	.+20     	; 0x1d5a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1d46:	e0 91 d8 05 	lds	r30, 0x05D8	; 0x8005d8 <Serial+0x19>
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	e1 54       	subi	r30, 0x41	; 65
    1d4e:	fa 4f       	sbci	r31, 0xFA	; 250
    1d50:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1d52:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <Serial+0x19>
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1d58:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1d5a:	ff 91       	pop	r31
    1d5c:	ef 91       	pop	r30
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0b be       	out	0x3b, r0	; 59
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	0b b6       	in	r0, 0x3b	; 59
    1d7e:	0f 92       	push	r0
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1d98:	8f eb       	ldi	r24, 0xBF	; 191
    1d9a:	95 e0       	ldi	r25, 0x05	; 5
    1d9c:	c7 de       	rcall	.-626    	; 0x1b2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0b be       	out	0x3b, r0	; 59
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1dc4:	8f eb       	ldi	r24, 0xBF	; 191
    1dc6:	95 e0       	ldi	r25, 0x05	; 5
    1dc8:	3a de       	rcall	.-908    	; 0x1a3e <_ZN14HardwareSerial9availableEv>
    1dca:	21 e0       	ldi	r18, 0x01	; 1
    1dcc:	89 2b       	or	r24, r25
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <_Z17Serial0_availablev+0xe>
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
}
    1dd2:	82 2f       	mov	r24, r18
    1dd4:	08 95       	ret

00001dd6 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1dd6:	ef eb       	ldi	r30, 0xBF	; 191
    1dd8:	f5 e0       	ldi	r31, 0x05	; 5
    1dda:	13 82       	std	Z+3, r1	; 0x03
    1ddc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1dde:	88 ee       	ldi	r24, 0xE8	; 232
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	84 83       	std	Z+4, r24	; 0x04
    1de8:	95 83       	std	Z+5, r25	; 0x05
    1dea:	a6 83       	std	Z+6, r26	; 0x06
    1dec:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1dee:	8b e8       	ldi	r24, 0x8B	; 139
    1df0:	94 e0       	ldi	r25, 0x04	; 4
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	85 ec       	ldi	r24, 0xC5	; 197
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	95 87       	std	Z+13, r25	; 0x0d
    1dfc:	84 87       	std	Z+12, r24	; 0x0c
    1dfe:	84 ec       	ldi	r24, 0xC4	; 196
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	97 87       	std	Z+15, r25	; 0x0f
    1e04:	86 87       	std	Z+14, r24	; 0x0e
    1e06:	80 ec       	ldi	r24, 0xC0	; 192
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	91 8b       	std	Z+17, r25	; 0x11
    1e0c:	80 8b       	std	Z+16, r24	; 0x10
    1e0e:	81 ec       	ldi	r24, 0xC1	; 193
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	93 8b       	std	Z+19, r25	; 0x13
    1e14:	82 8b       	std	Z+18, r24	; 0x12
    1e16:	82 ec       	ldi	r24, 0xC2	; 194
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	95 8b       	std	Z+21, r25	; 0x15
    1e1c:	84 8b       	std	Z+20, r24	; 0x14
    1e1e:	86 ec       	ldi	r24, 0xC6	; 198
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	97 8b       	std	Z+23, r25	; 0x17
    1e24:	86 8b       	std	Z+22, r24	; 0x16
    1e26:	11 8e       	std	Z+25, r1	; 0x19
    1e28:	12 8e       	std	Z+26, r1	; 0x1a
    1e2a:	13 8e       	std	Z+27, r1	; 0x1b
    1e2c:	14 8e       	std	Z+28, r1	; 0x1c
    1e2e:	08 95       	ret

00001e30 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    1e30:	1f 92       	push	r1
    1e32:	0f 92       	push	r0
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	0f 92       	push	r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	0b b6       	in	r0, 0x3b	; 59
    1e3c:	0f 92       	push	r0
    1e3e:	2f 93       	push	r18
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e48:	e0 91 6c 06 	lds	r30, 0x066C	; 0x80066c <Serial3+0x10>
    1e4c:	f0 91 6d 06 	lds	r31, 0x066D	; 0x80066d <Serial3+0x11>
    1e50:	80 81       	ld	r24, Z
    1e52:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <Serial3+0x16>
    1e56:	f0 91 73 06 	lds	r31, 0x0673	; 0x800673 <Serial3+0x17>
    1e5a:	82 fd       	sbrc	r24, 2
    1e5c:	12 c0       	rjmp	.+36     	; 0x1e82 <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e5e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e60:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <Serial3+0x19>
    1e64:	8f 5f       	subi	r24, 0xFF	; 255
    1e66:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e68:	20 91 76 06 	lds	r18, 0x0676	; 0x800676 <Serial3+0x1a>
    1e6c:	82 17       	cp	r24, r18
    1e6e:	51 f0       	breq	.+20     	; 0x1e84 <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    1e70:	e0 91 75 06 	lds	r30, 0x0675	; 0x800675 <Serial3+0x19>
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	e4 5a       	subi	r30, 0xA4	; 164
    1e78:	f9 4f       	sbci	r31, 0xF9	; 249
    1e7a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1e7c:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <Serial3+0x19>
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e82:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	2f 91       	pop	r18
    1e8e:	0f 90       	pop	r0
    1e90:	0b be       	out	0x3b, r0	; 59
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	0f 90       	pop	r0
    1e98:	1f 90       	pop	r1
    1e9a:	18 95       	reti

00001e9c <__vector_55>:

ISR(USART3_UDRE_vect)
{
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	0b b6       	in	r0, 0x3b	; 59
    1ea8:	0f 92       	push	r0
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	4f 93       	push	r20
    1eb0:	5f 93       	push	r21
    1eb2:	6f 93       	push	r22
    1eb4:	7f 93       	push	r23
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	ef 93       	push	r30
    1ec0:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    1ec2:	8c e5       	ldi	r24, 0x5C	; 92
    1ec4:	96 e0       	ldi	r25, 0x06	; 6
    1ec6:	32 de       	rcall	.-924    	; 0x1b2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	bf 91       	pop	r27
    1ece:	af 91       	pop	r26
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	7f 91       	pop	r23
    1ed6:	6f 91       	pop	r22
    1ed8:	5f 91       	pop	r21
    1eda:	4f 91       	pop	r20
    1edc:	3f 91       	pop	r19
    1ede:	2f 91       	pop	r18
    1ee0:	0f 90       	pop	r0
    1ee2:	0b be       	out	0x3b, r0	; 59
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	0f 90       	pop	r0
    1eea:	1f 90       	pop	r1
    1eec:	18 95       	reti

00001eee <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    1eee:	8c e5       	ldi	r24, 0x5C	; 92
    1ef0:	96 e0       	ldi	r25, 0x06	; 6
    1ef2:	a5 dd       	rcall	.-1206   	; 0x1a3e <_ZN14HardwareSerial9availableEv>
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	89 2b       	or	r24, r25
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <_Z17Serial3_availablev+0xe>
    1efa:	20 e0       	ldi	r18, 0x00	; 0
}
    1efc:	82 2f       	mov	r24, r18
    1efe:	08 95       	ret

00001f00 <_GLOBAL__sub_I___vector_54>:
    1f00:	ec e5       	ldi	r30, 0x5C	; 92
    1f02:	f6 e0       	ldi	r31, 0x06	; 6
    1f04:	13 82       	std	Z+3, r1	; 0x03
    1f06:	12 82       	std	Z+2, r1	; 0x02
    1f08:	88 ee       	ldi	r24, 0xE8	; 232
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	84 83       	std	Z+4, r24	; 0x04
    1f12:	95 83       	std	Z+5, r25	; 0x05
    1f14:	a6 83       	std	Z+6, r26	; 0x06
    1f16:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f18:	8b e8       	ldi	r24, 0x8B	; 139
    1f1a:	94 e0       	ldi	r25, 0x04	; 4
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	85 e3       	ldi	r24, 0x35	; 53
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	95 87       	std	Z+13, r25	; 0x0d
    1f26:	84 87       	std	Z+12, r24	; 0x0c
    1f28:	84 e3       	ldi	r24, 0x34	; 52
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	97 87       	std	Z+15, r25	; 0x0f
    1f2e:	86 87       	std	Z+14, r24	; 0x0e
    1f30:	80 e3       	ldi	r24, 0x30	; 48
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	91 8b       	std	Z+17, r25	; 0x11
    1f36:	80 8b       	std	Z+16, r24	; 0x10
    1f38:	81 e3       	ldi	r24, 0x31	; 49
    1f3a:	91 e0       	ldi	r25, 0x01	; 1
    1f3c:	93 8b       	std	Z+19, r25	; 0x13
    1f3e:	82 8b       	std	Z+18, r24	; 0x12
    1f40:	82 e3       	ldi	r24, 0x32	; 50
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	95 8b       	std	Z+21, r25	; 0x15
    1f46:	84 8b       	std	Z+20, r24	; 0x14
    1f48:	86 e3       	ldi	r24, 0x36	; 54
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	97 8b       	std	Z+23, r25	; 0x17
    1f4e:	86 8b       	std	Z+22, r24	; 0x16
    1f50:	11 8e       	std	Z+25, r1	; 0x19
    1f52:	12 8e       	std	Z+26, r1	; 0x1a
    1f54:	13 8e       	std	Z+27, r1	; 0x1b
    1f56:	14 8e       	std	Z+28, r1	; 0x1c
    1f58:	08 95       	ret

00001f5a <initVariant>:
    1f5a:	08 95       	ret

00001f5c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1f5c:	f5 d1       	rcall	.+1002   	; 0x2348 <init>

	initVariant();
    1f5e:	fd df       	rcall	.-6      	; 0x1f5a <initVariant>
    1f60:	0e 94 da 01 	call	0x3b4	; 0x3b4 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1f64:	cc e5       	ldi	r28, 0x5C	; 92
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1f66:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1f68:	c1 da       	rcall	.-2686   	; 0x14ec <loop>
		if (serialEventRun) serialEventRun();
    1f6a:	20 97       	sbiw	r28, 0x00	; 0
    1f6c:	e9 f3       	breq	.-6      	; 0x1f68 <main+0xc>
    1f6e:	a4 dd       	rcall	.-1208   	; 0x1ab8 <_Z14serialEventRunv>
    1f70:	fb cf       	rjmp	.-10     	; 0x1f68 <main+0xc>

00001f72 <_ZN5Print5writeEPKhj>:
    1f72:	cf 92       	push	r12
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	6c 01       	movw	r12, r24
    1f84:	7a 01       	movw	r14, r20
    1f86:	8b 01       	movw	r16, r22
    1f88:	c0 e0       	ldi	r28, 0x00	; 0
    1f8a:	d0 e0       	ldi	r29, 0x00	; 0
    1f8c:	ce 15       	cp	r28, r14
    1f8e:	df 05       	cpc	r29, r15
    1f90:	81 f0       	breq	.+32     	; 0x1fb2 <_ZN5Print5writeEPKhj+0x40>
    1f92:	d8 01       	movw	r26, r16
    1f94:	6d 91       	ld	r22, X+
    1f96:	8d 01       	movw	r16, r26
    1f98:	d6 01       	movw	r26, r12
    1f9a:	ed 91       	ld	r30, X+
    1f9c:	fc 91       	ld	r31, X
    1f9e:	01 90       	ld	r0, Z+
    1fa0:	f0 81       	ld	r31, Z
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	c6 01       	movw	r24, r12
    1fa6:	19 95       	eicall
    1fa8:	89 2b       	or	r24, r25
    1faa:	11 f0       	breq	.+4      	; 0x1fb0 <_ZN5Print5writeEPKhj+0x3e>
    1fac:	21 96       	adiw	r28, 0x01	; 1
    1fae:	ee cf       	rjmp	.-36     	; 0x1f8c <_ZN5Print5writeEPKhj+0x1a>
    1fb0:	7e 01       	movw	r14, r28
    1fb2:	c7 01       	movw	r24, r14
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	08 95       	ret

00001fc6 <_ZN5Print5writeEPKc>:
    1fc6:	61 15       	cp	r22, r1
    1fc8:	71 05       	cpc	r23, r1
    1fca:	79 f0       	breq	.+30     	; 0x1fea <_ZN5Print5writeEPKc+0x24>
    1fcc:	fb 01       	movw	r30, r22
    1fce:	01 90       	ld	r0, Z+
    1fd0:	00 20       	and	r0, r0
    1fd2:	e9 f7       	brne	.-6      	; 0x1fce <_ZN5Print5writeEPKc+0x8>
    1fd4:	31 97       	sbiw	r30, 0x01	; 1
    1fd6:	af 01       	movw	r20, r30
    1fd8:	46 1b       	sub	r20, r22
    1fda:	57 0b       	sbc	r21, r23
    1fdc:	dc 01       	movw	r26, r24
    1fde:	ed 91       	ld	r30, X+
    1fe0:	fc 91       	ld	r31, X
    1fe2:	02 80       	ldd	r0, Z+2	; 0x02
    1fe4:	f3 81       	ldd	r31, Z+3	; 0x03
    1fe6:	e0 2d       	mov	r30, r0
    1fe8:	19 94       	eijmp
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	08 95       	ret

00001ff0 <_ZN5Print5printERK6String>:
    1ff0:	db 01       	movw	r26, r22
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	4d 91       	ld	r20, X+
    1ff6:	5c 91       	ld	r21, X
    1ff8:	15 97       	sbiw	r26, 0x05	; 5
    1ffa:	6d 91       	ld	r22, X+
    1ffc:	7c 91       	ld	r23, X
    1ffe:	dc 01       	movw	r26, r24
    2000:	ed 91       	ld	r30, X+
    2002:	fc 91       	ld	r31, X
    2004:	02 80       	ldd	r0, Z+2	; 0x02
    2006:	f3 81       	ldd	r31, Z+3	; 0x03
    2008:	e0 2d       	mov	r30, r0
    200a:	19 94       	eijmp

0000200c <_ZN5Print5printEPKc>:
    200c:	dc cf       	rjmp	.-72     	; 0x1fc6 <_ZN5Print5writeEPKc>

0000200e <_ZN5Print5printEc>:
    200e:	dc 01       	movw	r26, r24
    2010:	ed 91       	ld	r30, X+
    2012:	fc 91       	ld	r31, X
    2014:	01 90       	ld	r0, Z+
    2016:	f0 81       	ld	r31, Z
    2018:	e0 2d       	mov	r30, r0
    201a:	19 94       	eijmp

0000201c <_ZN5Print7printlnEv>:
    201c:	69 e9       	ldi	r22, 0x99	; 153
    201e:	74 e0       	ldi	r23, 0x04	; 4
    2020:	d2 cf       	rjmp	.-92     	; 0x1fc6 <_ZN5Print5writeEPKc>

00002022 <_ZN5Print7printlnERK6String>:
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	ec 01       	movw	r28, r24
    202c:	e1 df       	rcall	.-62     	; 0x1ff0 <_ZN5Print5printERK6String>
    202e:	8c 01       	movw	r16, r24
    2030:	ce 01       	movw	r24, r28
    2032:	f4 df       	rcall	.-24     	; 0x201c <_ZN5Print7printlnEv>
    2034:	80 0f       	add	r24, r16
    2036:	91 1f       	adc	r25, r17
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <_ZN5Print7printlnEPKc>:
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	ec 01       	movw	r28, r24
    204c:	bc df       	rcall	.-136    	; 0x1fc6 <_ZN5Print5writeEPKc>
    204e:	8c 01       	movw	r16, r24
    2050:	ce 01       	movw	r24, r28
    2052:	e4 df       	rcall	.-56     	; 0x201c <_ZN5Print7printlnEv>
    2054:	80 0f       	add	r24, r16
    2056:	91 1f       	adc	r25, r17
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	08 95       	ret

00002062 <_ZN5Print7printlnEc>:
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	ec 01       	movw	r28, r24
    206c:	d0 df       	rcall	.-96     	; 0x200e <_ZN5Print5printEc>
    206e:	8c 01       	movw	r16, r24
    2070:	ce 01       	movw	r24, r28
    2072:	d4 df       	rcall	.-88     	; 0x201c <_ZN5Print7printlnEv>
    2074:	80 0f       	add	r24, r16
    2076:	91 1f       	adc	r25, r17
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	08 95       	ret

00002082 <_ZN5Print11printNumberEmh>:
    2082:	8f 92       	push	r8
    2084:	9f 92       	push	r9
    2086:	af 92       	push	r10
    2088:	bf 92       	push	r11
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	a1 97       	sbiw	r28, 0x21	; 33
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	7c 01       	movw	r14, r24
    20a8:	fa 01       	movw	r30, r20
    20aa:	cb 01       	movw	r24, r22
    20ac:	19 a2       	std	Y+33, r1	; 0x21
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <_ZN5Print11printNumberEmh+0x32>
    20b2:	2a e0       	ldi	r18, 0x0A	; 10
    20b4:	8e 01       	movw	r16, r28
    20b6:	0f 5d       	subi	r16, 0xDF	; 223
    20b8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ba:	82 2e       	mov	r8, r18
    20bc:	91 2c       	mov	r9, r1
    20be:	a1 2c       	mov	r10, r1
    20c0:	b1 2c       	mov	r11, r1
    20c2:	bf 01       	movw	r22, r30
    20c4:	a5 01       	movw	r20, r10
    20c6:	94 01       	movw	r18, r8
    20c8:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__udivmodsi4>
    20cc:	f9 01       	movw	r30, r18
    20ce:	ca 01       	movw	r24, r20
    20d0:	01 50       	subi	r16, 0x01	; 1
    20d2:	11 09       	sbc	r17, r1
    20d4:	6a 30       	cpi	r22, 0x0A	; 10
    20d6:	10 f4       	brcc	.+4      	; 0x20dc <_ZN5Print11printNumberEmh+0x5a>
    20d8:	60 5d       	subi	r22, 0xD0	; 208
    20da:	01 c0       	rjmp	.+2      	; 0x20de <_ZN5Print11printNumberEmh+0x5c>
    20dc:	69 5c       	subi	r22, 0xC9	; 201
    20de:	d8 01       	movw	r26, r16
    20e0:	6c 93       	st	X, r22
    20e2:	23 2b       	or	r18, r19
    20e4:	24 2b       	or	r18, r20
    20e6:	25 2b       	or	r18, r21
    20e8:	61 f7       	brne	.-40     	; 0x20c2 <_ZN5Print11printNumberEmh+0x40>
    20ea:	b8 01       	movw	r22, r16
    20ec:	c7 01       	movw	r24, r14
    20ee:	6b df       	rcall	.-298    	; 0x1fc6 <_ZN5Print5writeEPKc>
    20f0:	a1 96       	adiw	r28, 0x21	; 33
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	bf 90       	pop	r11
    210a:	af 90       	pop	r10
    210c:	9f 90       	pop	r9
    210e:	8f 90       	pop	r8
    2110:	08 95       	ret

00002112 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
  if (base == 0) {
    2122:	21 15       	cp	r18, r1
    2124:	31 05       	cpc	r19, r1
    2126:	81 f4       	brne	.+32     	; 0x2148 <_ZN5Print5printEli+0x36>
    return write(n);
    2128:	dc 01       	movw	r26, r24
    212a:	ed 91       	ld	r30, X+
    212c:	fc 91       	ld	r31, X
    212e:	01 90       	ld	r0, Z+
    2130:	f0 81       	ld	r31, Z
    2132:	e0 2d       	mov	r30, r0
    2134:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	ff 90       	pop	r15
    2140:	ef 90       	pop	r14
    2142:	df 90       	pop	r13
    2144:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2146:	19 94       	eijmp
  } else if (base == 10) {
    2148:	2a 30       	cpi	r18, 0x0A	; 10
    214a:	31 05       	cpc	r19, r1
    214c:	f1 f4       	brne	.+60     	; 0x218a <_ZN5Print5printEli+0x78>
    if (n < 0) {
    214e:	77 ff       	sbrs	r23, 7
    2150:	1b c0       	rjmp	.+54     	; 0x2188 <_ZN5Print5printEli+0x76>
    2152:	6a 01       	movw	r12, r20
    2154:	7b 01       	movw	r14, r22
    2156:	ec 01       	movw	r28, r24
      int t = print('-');
    2158:	6d e2       	ldi	r22, 0x2D	; 45
    215a:	59 df       	rcall	.-334    	; 0x200e <_ZN5Print5printEc>
    215c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    215e:	44 27       	eor	r20, r20
    2160:	55 27       	eor	r21, r21
    2162:	ba 01       	movw	r22, r20
    2164:	4c 19       	sub	r20, r12
    2166:	5d 09       	sbc	r21, r13
    2168:	6e 09       	sbc	r22, r14
    216a:	7f 09       	sbc	r23, r15
    216c:	2a e0       	ldi	r18, 0x0A	; 10
    216e:	ce 01       	movw	r24, r28
    2170:	88 df       	rcall	.-240    	; 0x2082 <_ZN5Print11printNumberEmh>
    2172:	80 0f       	add	r24, r16
    2174:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2188:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2198:	cf 90       	pop	r12
    219a:	73 cf       	rjmp	.-282    	; 0x2082 <_ZN5Print11printNumberEmh>

0000219c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    219c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    219e:	ab 01       	movw	r20, r22
    21a0:	77 0f       	add	r23, r23
    21a2:	66 0b       	sbc	r22, r22
    21a4:	77 0b       	sbc	r23, r23
    21a6:	b5 cf       	rjmp	.-150    	; 0x2112 <_ZN5Print5printEli>

000021a8 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    21b2:	f4 df       	rcall	.-24     	; 0x219c <_ZN5Print5printEii>
    21b4:	8c 01       	movw	r16, r24
  n += println();
    21b6:	ce 01       	movw	r24, r28
    21b8:	31 df       	rcall	.-414    	; 0x201c <_ZN5Print7printlnEv>
  return n;
}
    21ba:	80 0f       	add	r24, r16
    21bc:	91 1f       	adc	r25, r17
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	08 95       	ret

000021c8 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    21c8:	1f 92       	push	r1
    21ca:	0f 92       	push	r0
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	0f 92       	push	r0
    21d0:	11 24       	eor	r1, r1
    21d2:	2f 93       	push	r18
    21d4:	3f 93       	push	r19
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    21de:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <timer0_millis>
    21e2:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <timer0_millis+0x1>
    21e6:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <timer0_millis+0x2>
    21ea:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    21ee:	30 91 f9 06 	lds	r19, 0x06F9	; 0x8006f9 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    21f2:	23 e0       	ldi	r18, 0x03	; 3
    21f4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    21f6:	2d 37       	cpi	r18, 0x7D	; 125
    21f8:	20 f4       	brcc	.+8      	; 0x2202 <__stack+0x3>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	a1 1d       	adc	r26, r1
    21fe:	b1 1d       	adc	r27, r1
    2200:	05 c0       	rjmp	.+10     	; 0x220c <__stack+0xd>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2202:	26 e8       	ldi	r18, 0x86	; 134
    2204:	23 0f       	add	r18, r19
		m += 1;
    2206:	02 96       	adiw	r24, 0x02	; 2
    2208:	a1 1d       	adc	r26, r1
    220a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    220c:	20 93 f9 06 	sts	0x06F9, r18	; 0x8006f9 <timer0_fract>
	timer0_millis = m;
    2210:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <timer0_millis>
    2214:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <timer0_millis+0x1>
    2218:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <timer0_millis+0x2>
    221c:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <timer0_millis+0x3>
	timer0_overflow_count++;
    2220:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <timer0_overflow_count>
    2224:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <timer0_overflow_count+0x1>
    2228:	a0 91 00 07 	lds	r26, 0x0700	; 0x800700 <timer0_overflow_count+0x2>
    222c:	b0 91 01 07 	lds	r27, 0x0701	; 0x800701 <timer0_overflow_count+0x3>
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	a1 1d       	adc	r26, r1
    2234:	b1 1d       	adc	r27, r1
    2236:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <timer0_overflow_count>
    223a:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <timer0_overflow_count+0x1>
    223e:	a0 93 00 07 	sts	0x0700, r26	; 0x800700 <timer0_overflow_count+0x2>
    2242:	b0 93 01 07 	sts	0x0701, r27	; 0x800701 <timer0_overflow_count+0x3>
}
    2246:	bf 91       	pop	r27
    2248:	af 91       	pop	r26
    224a:	9f 91       	pop	r25
    224c:	8f 91       	pop	r24
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    225c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    225e:	f8 94       	cli
	m = timer0_millis;
    2260:	60 91 fa 06 	lds	r22, 0x06FA	; 0x8006fa <timer0_millis>
    2264:	70 91 fb 06 	lds	r23, 0x06FB	; 0x8006fb <timer0_millis+0x1>
    2268:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <timer0_millis+0x2>
    226c:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <timer0_millis+0x3>
	SREG = oldSREG;
    2270:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2272:	08 95       	ret

00002274 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2274:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2276:	f8 94       	cli
	m = timer0_overflow_count;
    2278:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <timer0_overflow_count>
    227c:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <timer0_overflow_count+0x1>
    2280:	a0 91 00 07 	lds	r26, 0x0700	; 0x800700 <timer0_overflow_count+0x2>
    2284:	b0 91 01 07 	lds	r27, 0x0701	; 0x800701 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2288:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    228a:	a8 9b       	sbis	0x15, 0	; 21
    228c:	05 c0       	rjmp	.+10     	; 0x2298 <micros+0x24>
    228e:	2f 3f       	cpi	r18, 0xFF	; 255
    2290:	19 f0       	breq	.+6      	; 0x2298 <micros+0x24>
		m++;
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	a1 1d       	adc	r26, r1
    2296:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2298:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    229a:	ba 2f       	mov	r27, r26
    229c:	a9 2f       	mov	r26, r25
    229e:	98 2f       	mov	r25, r24
    22a0:	88 27       	eor	r24, r24
    22a2:	82 0f       	add	r24, r18
    22a4:	91 1d       	adc	r25, r1
    22a6:	a1 1d       	adc	r26, r1
    22a8:	b1 1d       	adc	r27, r1
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	42 e0       	ldi	r20, 0x02	; 2
    22b0:	66 0f       	add	r22, r22
    22b2:	77 1f       	adc	r23, r23
    22b4:	88 1f       	adc	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	4a 95       	dec	r20
    22ba:	d1 f7       	brne	.-12     	; 0x22b0 <micros+0x3c>
}
    22bc:	08 95       	ret

000022be <delay>:

void delay(unsigned long ms)
{
    22be:	8f 92       	push	r8
    22c0:	9f 92       	push	r9
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	6b 01       	movw	r12, r22
    22d0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    22d2:	d0 df       	rcall	.-96     	; 0x2274 <micros>
    22d4:	4b 01       	movw	r8, r22
    22d6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    22d8:	c1 14       	cp	r12, r1
    22da:	d1 04       	cpc	r13, r1
    22dc:	e1 04       	cpc	r14, r1
    22de:	f1 04       	cpc	r15, r1
    22e0:	f9 f0       	breq	.+62     	; 0x2320 <delay+0x62>
		yield();
    22e2:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    22e6:	c6 df       	rcall	.-116    	; 0x2274 <micros>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	88 19       	sub	r24, r8
    22ee:	99 09       	sbc	r25, r9
    22f0:	aa 09       	sbc	r26, r10
    22f2:	bb 09       	sbc	r27, r11
    22f4:	88 3e       	cpi	r24, 0xE8	; 232
    22f6:	93 40       	sbci	r25, 0x03	; 3
    22f8:	a1 05       	cpc	r26, r1
    22fa:	b1 05       	cpc	r27, r1
    22fc:	68 f3       	brcs	.-38     	; 0x22d8 <delay+0x1a>
			ms--;
    22fe:	21 e0       	ldi	r18, 0x01	; 1
    2300:	c2 1a       	sub	r12, r18
    2302:	d1 08       	sbc	r13, r1
    2304:	e1 08       	sbc	r14, r1
    2306:	f1 08       	sbc	r15, r1
			start += 1000;
    2308:	88 ee       	ldi	r24, 0xE8	; 232
    230a:	88 0e       	add	r8, r24
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	98 1e       	adc	r9, r24
    2310:	a1 1c       	adc	r10, r1
    2312:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2314:	c1 14       	cp	r12, r1
    2316:	d1 04       	cpc	r13, r1
    2318:	e1 04       	cpc	r14, r1
    231a:	f1 04       	cpc	r15, r1
    231c:	21 f7       	brne	.-56     	; 0x22e6 <delay+0x28>
    231e:	dc cf       	rjmp	.-72     	; 0x22d8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2320:	ff 90       	pop	r15
    2322:	ef 90       	pop	r14
    2324:	df 90       	pop	r13
    2326:	cf 90       	pop	r12
    2328:	bf 90       	pop	r11
    232a:	af 90       	pop	r10
    232c:	9f 90       	pop	r9
    232e:	8f 90       	pop	r8
    2330:	08 95       	ret

00002332 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2332:	82 30       	cpi	r24, 0x02	; 2
    2334:	91 05       	cpc	r25, r1
    2336:	38 f0       	brcs	.+14     	; 0x2346 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2340:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <delayMicroseconds+0x10>
    2346:	08 95       	ret

00002348 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2348:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    234a:	84 b5       	in	r24, 0x24	; 36
    234c:	82 60       	ori	r24, 0x02	; 2
    234e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2350:	84 b5       	in	r24, 0x24	; 36
    2352:	81 60       	ori	r24, 0x01	; 1
    2354:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2356:	85 b5       	in	r24, 0x25	; 37
    2358:	82 60       	ori	r24, 0x02	; 2
    235a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    235c:	85 b5       	in	r24, 0x25	; 37
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2362:	ee e6       	ldi	r30, 0x6E	; 110
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	81 60       	ori	r24, 0x01	; 1
    236a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    236c:	e1 e8       	ldi	r30, 0x81	; 129
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2372:	80 81       	ld	r24, Z
    2374:	82 60       	ori	r24, 0x02	; 2
    2376:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2378:	80 81       	ld	r24, Z
    237a:	81 60       	ori	r24, 0x01	; 1
    237c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    237e:	e0 e8       	ldi	r30, 0x80	; 128
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	81 60       	ori	r24, 0x01	; 1
    2386:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2388:	e1 eb       	ldi	r30, 0xB1	; 177
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	84 60       	ori	r24, 0x04	; 4
    2390:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2392:	e0 eb       	ldi	r30, 0xB0	; 176
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    239c:	e1 e9       	ldi	r30, 0x91	; 145
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	82 60       	ori	r24, 0x02	; 2
    23a4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    23a6:	80 81       	ld	r24, Z
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    23ac:	e0 e9       	ldi	r30, 0x90	; 144
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	81 60       	ori	r24, 0x01	; 1
    23b4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    23b6:	e1 ea       	ldi	r30, 0xA1	; 161
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	82 60       	ori	r24, 0x02	; 2
    23be:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    23c0:	80 81       	ld	r24, Z
    23c2:	81 60       	ori	r24, 0x01	; 1
    23c4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    23c6:	e0 ea       	ldi	r30, 0xA0	; 160
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	81 60       	ori	r24, 0x01	; 1
    23ce:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    23d0:	e1 e2       	ldi	r30, 0x21	; 33
    23d2:	f1 e0       	ldi	r31, 0x01	; 1
    23d4:	80 81       	ld	r24, Z
    23d6:	82 60       	ori	r24, 0x02	; 2
    23d8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    23da:	80 81       	ld	r24, Z
    23dc:	81 60       	ori	r24, 0x01	; 1
    23de:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    23e0:	e0 e2       	ldi	r30, 0x20	; 32
    23e2:	f1 e0       	ldi	r31, 0x01	; 1
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    23ea:	ea e7       	ldi	r30, 0x7A	; 122
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	84 60       	ori	r24, 0x04	; 4
    23f2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    23f4:	80 81       	ld	r24, Z
    23f6:	82 60       	ori	r24, 0x02	; 2
    23f8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    23fa:	80 81       	ld	r24, Z
    23fc:	81 60       	ori	r24, 0x01	; 1
    23fe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2400:	80 81       	ld	r24, Z
    2402:	80 68       	ori	r24, 0x80	; 128
    2404:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2406:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    240a:	08 95       	ret

0000240c <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    240c:	86 33       	cpi	r24, 0x36	; 54
    240e:	08 f0       	brcs	.+2      	; 0x2412 <analogRead+0x6>
    2410:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2412:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    2416:	28 2f       	mov	r18, r24
    2418:	28 70       	andi	r18, 0x08	; 8
    241a:	97 7f       	andi	r25, 0xF7	; 247
    241c:	92 2b       	or	r25, r18
    241e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2422:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <analog_reference>
    2426:	90 e4       	ldi	r25, 0x40	; 64
    2428:	29 9f       	mul	r18, r25
    242a:	90 01       	movw	r18, r0
    242c:	11 24       	eor	r1, r1
    242e:	87 70       	andi	r24, 0x07	; 7
    2430:	82 2b       	or	r24, r18
    2432:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2436:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    243a:	80 64       	ori	r24, 0x40	; 64
    243c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2440:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    2444:	86 fd       	sbrc	r24, 6
    2446:	fc cf       	rjmp	.-8      	; 0x2440 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2448:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    244c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2450:	90 e0       	ldi	r25, 0x00	; 0
}
    2452:	92 2b       	or	r25, r18
    2454:	08 95       	ret

00002456 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	fc 01       	movw	r30, r24
    245a:	31 97       	sbiw	r30, 0x01	; 1
    245c:	e2 31       	cpi	r30, 0x12	; 18
    245e:	f1 05       	cpc	r31, r1
    2460:	08 f0       	brcs	.+2      	; 0x2464 <turnOffPWM+0xe>
    2462:	4e c0       	rjmp	.+156    	; 0x2500 <turnOffPWM+0xaa>
    2464:	88 27       	eor	r24, r24
    2466:	ee 54       	subi	r30, 0x4E	; 78
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	8f 4f       	sbci	r24, 0xFF	; 255
    246c:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2470:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2474:	8f 77       	andi	r24, 0x7F	; 127
    2476:	03 c0       	rjmp	.+6      	; 0x247e <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2478:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    247c:	8f 7d       	andi	r24, 0xDF	; 223
    247e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2482:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2484:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	f9 cf       	rjmp	.-14     	; 0x247e <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    248c:	84 b5       	in	r24, 0x24	; 36
    248e:	8f 77       	andi	r24, 0x7F	; 127
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2492:	84 b5       	in	r24, 0x24	; 36
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	84 bd       	out	0x24, r24	; 36
    2498:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    249a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    249e:	8f 77       	andi	r24, 0x7F	; 127
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    24a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24a6:	8f 7d       	andi	r24, 0xDF	; 223
    24a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    24ac:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    24ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24b2:	8f 77       	andi	r24, 0x7F	; 127
    24b4:	07 c0       	rjmp	.+14     	; 0x24c4 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    24b6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24ba:	8f 7d       	andi	r24, 0xDF	; 223
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    24be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24c2:	87 7f       	andi	r24, 0xF7	; 247
    24c4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    24c8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    24ca:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24ce:	8f 77       	andi	r24, 0x7F	; 127
    24d0:	07 c0       	rjmp	.+14     	; 0x24e0 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    24d2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24d6:	8f 7d       	andi	r24, 0xDF	; 223
    24d8:	03 c0       	rjmp	.+6      	; 0x24e0 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    24da:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24de:	87 7f       	andi	r24, 0xF7	; 247
    24e0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    24e4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    24e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    24ea:	8f 77       	andi	r24, 0x7F	; 127
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    24ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    24f2:	8f 7d       	andi	r24, 0xDF	; 223
    24f4:	03 c0       	rjmp	.+6      	; 0x24fc <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    24f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    24fa:	87 7f       	andi	r24, 0xF7	; 247
    24fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    2500:	08 95       	ret

00002502 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	fc 01       	movw	r30, r24
    250a:	e2 53       	subi	r30, 0x32	; 50
    250c:	fe 4f       	sbci	r31, 0xFE	; 254
    250e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2510:	fc 01       	movw	r30, r24
    2512:	ec 5e       	subi	r30, 0xEC	; 236
    2514:	fd 4f       	sbci	r31, 0xFD	; 253
    2516:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2518:	88 23       	and	r24, r24
    251a:	61 f1       	breq	.+88     	; 0x2574 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	fc 01       	movw	r30, r24
    2524:	e2 57       	subi	r30, 0x72	; 114
    2526:	fd 4f       	sbci	r31, 0xFD	; 253
    2528:	c5 91       	lpm	r28, Z+
    252a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    252c:	fc 01       	movw	r30, r24
    252e:	ec 58       	subi	r30, 0x8C	; 140
    2530:	fd 4f       	sbci	r31, 0xFD	; 253
    2532:	a5 91       	lpm	r26, Z+
    2534:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2536:	61 11       	cpse	r22, r1
    2538:	09 c0       	rjmp	.+18     	; 0x254c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    253a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    253c:	f8 94       	cli
		*reg &= ~bit;
    253e:	88 81       	ld	r24, Y
    2540:	20 95       	com	r18
    2542:	82 23       	and	r24, r18
    2544:	88 83       	st	Y, r24
		*out &= ~bit;
    2546:	ec 91       	ld	r30, X
    2548:	2e 23       	and	r18, r30
    254a:	0b c0       	rjmp	.+22     	; 0x2562 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    254c:	62 30       	cpi	r22, 0x02	; 2
    254e:	61 f4       	brne	.+24     	; 0x2568 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2550:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2552:	f8 94       	cli
		*reg &= ~bit;
    2554:	88 81       	ld	r24, Y
    2556:	32 2f       	mov	r19, r18
    2558:	30 95       	com	r19
    255a:	83 23       	and	r24, r19
    255c:	88 83       	st	Y, r24
		*out |= bit;
    255e:	ec 91       	ld	r30, X
    2560:	2e 2b       	or	r18, r30
    2562:	2c 93       	st	X, r18
		SREG = oldSREG;
    2564:	9f bf       	out	0x3f, r25	; 63
    2566:	06 c0       	rjmp	.+12     	; 0x2574 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2568:	8f b7       	in	r24, 0x3f	; 63
                cli();
    256a:	f8 94       	cli
		*reg |= bit;
    256c:	e8 81       	ld	r30, Y
    256e:	2e 2b       	or	r18, r30
    2570:	28 83       	st	Y, r18
		SREG = oldSREG;
    2572:	8f bf       	out	0x3f, r24	; 63
	}
}
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	f9 01       	movw	r30, r18
    2586:	e8 57       	subi	r30, 0x78	; 120
    2588:	fe 4f       	sbci	r31, 0xFE	; 254
    258a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    258c:	f9 01       	movw	r30, r18
    258e:	e2 53       	subi	r30, 0x32	; 50
    2590:	fe 4f       	sbci	r31, 0xFE	; 254
    2592:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2594:	f9 01       	movw	r30, r18
    2596:	ec 5e       	subi	r30, 0xEC	; 236
    2598:	fd 4f       	sbci	r31, 0xFD	; 253
    259a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    259c:	cc 23       	and	r28, r28
    259e:	b9 f0       	breq	.+46     	; 0x25ce <digitalWrite+0x54>
    25a0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25a2:	81 11       	cpse	r24, r1
    25a4:	58 df       	rcall	.-336    	; 0x2456 <turnOffPWM>

	out = portOutputRegister(port);
    25a6:	ec 2f       	mov	r30, r28
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	ec 58       	subi	r30, 0x8C	; 140
    25b0:	fd 4f       	sbci	r31, 0xFD	; 253
    25b2:	a5 91       	lpm	r26, Z+
    25b4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25b6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    25b8:	f8 94       	cli

	if (val == LOW) {
    25ba:	11 11       	cpse	r17, r1
    25bc:	04 c0       	rjmp	.+8      	; 0x25c6 <digitalWrite+0x4c>
		*out &= ~bit;
    25be:	8c 91       	ld	r24, X
    25c0:	d0 95       	com	r29
    25c2:	d8 23       	and	r29, r24
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <digitalWrite+0x50>
	} else {
		*out |= bit;
    25c6:	ec 91       	ld	r30, X
    25c8:	de 2b       	or	r29, r30
    25ca:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    25cc:	9f bf       	out	0x3f, r25	; 63
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	08 95       	ret

000025d6 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 53       	subi	r30, 0x32	; 50
    25e0:	fe 4f       	sbci	r31, 0xFE	; 254
    25e2:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    25e4:	fc 01       	movw	r30, r24
    25e6:	ec 5e       	subi	r30, 0xEC	; 236
    25e8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ea:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    25ec:	66 23       	and	r22, r22
    25ee:	11 f0       	breq	.+4      	; 0x25f4 <pulseIn+0x1e>
    25f0:	67 2f       	mov	r22, r23
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <pulseIn+0x20>
    25f4:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	ee 0f       	add	r30, r30
    25fa:	ff 1f       	adc	r31, r31
    25fc:	e6 5a       	subi	r30, 0xA6	; 166
    25fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2600:	85 91       	lpm	r24, Z+
    2602:	94 91       	lpm	r25, Z
    2604:	89 01       	movw	r16, r18
    2606:	9a 01       	movw	r18, r20
    2608:	3f 70       	andi	r19, 0x0F	; 15
    260a:	46 2f       	mov	r20, r22
    260c:	67 2f       	mov	r22, r23
    260e:	0e 94 95 01 	call	0x32a	; 0x32a <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    2612:	61 15       	cp	r22, r1
    2614:	71 05       	cpc	r23, r1
    2616:	81 05       	cpc	r24, r1
    2618:	91 05       	cpc	r25, r1
    261a:	49 f0       	breq	.+18     	; 0x262e <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	a1 1d       	adc	r26, r1
    2624:	b1 1d       	adc	r27, r1
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	9f 70       	andi	r25, 0x0F	; 15
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <pulseIn+0x5e>
	else
		return 0;
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	cb 01       	movw	r24, r22
}
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	08 95       	ret

0000263a <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
  if (howbig == 0) {
    2642:	61 15       	cp	r22, r1
    2644:	71 05       	cpc	r23, r1
    2646:	81 05       	cpc	r24, r1
    2648:	91 05       	cpc	r25, r1
    264a:	49 f0       	breq	.+18     	; 0x265e <_Z6randoml+0x24>
    264c:	6b 01       	movw	r12, r22
    264e:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    2650:	0e 94 2d 31 	call	0x625a	; 0x625a <random>
    2654:	a7 01       	movw	r20, r14
    2656:	96 01       	movw	r18, r12
    2658:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__divmodsi4>
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2664:	ff 90       	pop	r15
    2666:	ef 90       	pop	r14
    2668:	df 90       	pop	r13
    266a:	cf 90       	pop	r12
    266c:	08 95       	ret

0000266e <_Z6randomll>:

long random(long howsmall, long howbig)
{
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
  if (howsmall >= howbig) {
    267a:	62 17       	cp	r22, r18
    267c:	73 07       	cpc	r23, r19
    267e:	84 07       	cpc	r24, r20
    2680:	95 07       	cpc	r25, r21
    2682:	7c f4       	brge	.+30     	; 0x26a2 <_Z6randomll+0x34>
    2684:	89 01       	movw	r16, r18
    2686:	9a 01       	movw	r18, r20
    2688:	6b 01       	movw	r12, r22
    268a:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    268c:	c9 01       	movw	r24, r18
    268e:	b8 01       	movw	r22, r16
    2690:	6c 19       	sub	r22, r12
    2692:	7d 09       	sbc	r23, r13
    2694:	8e 09       	sbc	r24, r14
    2696:	9f 09       	sbc	r25, r15
    2698:	d0 df       	rcall	.-96     	; 0x263a <_Z6randoml>
    269a:	6c 0d       	add	r22, r12
    269c:	7d 1d       	adc	r23, r13
    269e:	8e 1d       	adc	r24, r14
    26a0:	9f 1d       	adc	r25, r15
}
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	ff 90       	pop	r15
    26a8:	ef 90       	pop	r14
    26aa:	df 90       	pop	r13
    26ac:	cf 90       	pop	r12
    26ae:	08 95       	ret

000026b0 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    26b0:	4f 92       	push	r4
    26b2:	5f 92       	push	r5
    26b4:	6f 92       	push	r6
    26b6:	7f 92       	push	r7
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	29 01       	movw	r4, r18
    26d2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    26d4:	9b 01       	movw	r18, r22
    26d6:	ac 01       	movw	r20, r24
    26d8:	24 19       	sub	r18, r4
    26da:	35 09       	sbc	r19, r5
    26dc:	46 09       	sbc	r20, r6
    26de:	57 09       	sbc	r21, r7
    26e0:	8a 89       	ldd	r24, Y+18	; 0x12
    26e2:	9b 89       	ldd	r25, Y+19	; 0x13
    26e4:	ac 89       	ldd	r26, Y+20	; 0x14
    26e6:	bd 89       	ldd	r27, Y+21	; 0x15
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	6a 19       	sub	r22, r10
    26ee:	7b 09       	sbc	r23, r11
    26f0:	8c 09       	sbc	r24, r12
    26f2:	9d 09       	sbc	r25, r13
    26f4:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <__mulsi3>
    26f8:	a8 01       	movw	r20, r16
    26fa:	97 01       	movw	r18, r14
    26fc:	24 19       	sub	r18, r4
    26fe:	35 09       	sbc	r19, r5
    2700:	46 09       	sbc	r20, r6
    2702:	57 09       	sbc	r21, r7
    2704:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__divmodsi4>
    2708:	ca 01       	movw	r24, r20
    270a:	b9 01       	movw	r22, r18
    270c:	6a 0d       	add	r22, r10
    270e:	7b 1d       	adc	r23, r11
    2710:	8c 1d       	adc	r24, r12
    2712:	9d 1d       	adc	r25, r13
}
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	1f 91       	pop	r17
    271a:	0f 91       	pop	r16
    271c:	ff 90       	pop	r15
    271e:	ef 90       	pop	r14
    2720:	df 90       	pop	r13
    2722:	cf 90       	pop	r12
    2724:	bf 90       	pop	r11
    2726:	af 90       	pop	r10
    2728:	7f 90       	pop	r7
    272a:	6f 90       	pop	r6
    272c:	5f 90       	pop	r5
    272e:	4f 90       	pop	r4
    2730:	08 95       	ret

00002732 <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    2732:	fc 01       	movw	r30, r24
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	0c 94 5c 30 	jmp	0x60b8	; 0x60b8 <free>

0000273c <_ZN6String10invalidateEv>:
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	ec 01       	movw	r28, r24
    2742:	88 81       	ld	r24, Y
    2744:	99 81       	ldd	r25, Y+1	; 0x01
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	11 f0       	breq	.+4      	; 0x274e <_ZN6String10invalidateEv+0x12>
    274a:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <free>
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	18 82       	st	Y, r1
    2752:	1d 82       	std	Y+5, r1	; 0x05
    2754:	1c 82       	std	Y+4, r1	; 0x04
    2756:	1b 82       	std	Y+3, r1	; 0x03
    2758:	1a 82       	std	Y+2, r1	; 0x02
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <_ZN6String12changeBufferEj>:
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	ec 01       	movw	r28, r24
    276a:	8b 01       	movw	r16, r22
    276c:	6f 5f       	subi	r22, 0xFF	; 255
    276e:	7f 4f       	sbci	r23, 0xFF	; 255
    2770:	88 81       	ld	r24, Y
    2772:	99 81       	ldd	r25, Y+1	; 0x01
    2774:	0e 94 81 31 	call	0x6302	; 0x6302 <realloc>
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	31 f0       	breq	.+12     	; 0x2788 <_ZN6String12changeBufferEj+0x28>
    277c:	99 83       	std	Y+1, r25	; 0x01
    277e:	88 83       	st	Y, r24
    2780:	1b 83       	std	Y+3, r17	; 0x03
    2782:	0a 83       	std	Y+2, r16	; 0x02
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	01 c0       	rjmp	.+2      	; 0x278a <_ZN6String12changeBufferEj+0x2a>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	08 95       	ret

00002794 <_ZN6String7reserveEj>:
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	ec 01       	movw	r28, r24
    279a:	88 81       	ld	r24, Y
    279c:	99 81       	ldd	r25, Y+1	; 0x01
    279e:	89 2b       	or	r24, r25
    27a0:	29 f0       	breq	.+10     	; 0x27ac <_ZN6String7reserveEj+0x18>
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	9b 81       	ldd	r25, Y+3	; 0x03
    27a6:	86 17       	cp	r24, r22
    27a8:	97 07       	cpc	r25, r23
    27aa:	58 f4       	brcc	.+22     	; 0x27c2 <_ZN6String7reserveEj+0x2e>
    27ac:	ce 01       	movw	r24, r28
    27ae:	d8 df       	rcall	.-80     	; 0x2760 <_ZN6String12changeBufferEj>
    27b0:	88 23       	and	r24, r24
    27b2:	41 f0       	breq	.+16     	; 0x27c4 <_ZN6String7reserveEj+0x30>
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	9d 81       	ldd	r25, Y+5	; 0x05
    27b8:	89 2b       	or	r24, r25
    27ba:	19 f4       	brne	.+6      	; 0x27c2 <_ZN6String7reserveEj+0x2e>
    27bc:	e8 81       	ld	r30, Y
    27be:	f9 81       	ldd	r31, Y+1	; 0x01
    27c0:	10 82       	st	Z, r1
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	08 95       	ret

000027ca <_ZN6String4copyEPKcj>:
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	ec 01       	movw	r28, r24
    27d8:	7b 01       	movw	r14, r22
    27da:	8a 01       	movw	r16, r20
    27dc:	ba 01       	movw	r22, r20
    27de:	da df       	rcall	.-76     	; 0x2794 <_ZN6String7reserveEj>
    27e0:	81 11       	cpse	r24, r1
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <_ZN6String4copyEPKcj+0x20>
    27e4:	ce 01       	movw	r24, r28
    27e6:	aa df       	rcall	.-172    	; 0x273c <_ZN6String10invalidateEv>
    27e8:	07 c0       	rjmp	.+14     	; 0x27f8 <_ZN6String4copyEPKcj+0x2e>
    27ea:	1d 83       	std	Y+5, r17	; 0x05
    27ec:	0c 83       	std	Y+4, r16	; 0x04
    27ee:	b7 01       	movw	r22, r14
    27f0:	88 81       	ld	r24, Y
    27f2:	99 81       	ldd	r25, Y+1	; 0x01
    27f4:	0e 94 82 32 	call	0x6504	; 0x6504 <strcpy>
    27f8:	ce 01       	movw	r24, r28
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	08 95       	ret

00002808 <_ZN6StringC1EPKc>:
    2808:	fc 01       	movw	r30, r24
    280a:	11 82       	std	Z+1, r1	; 0x01
    280c:	10 82       	st	Z, r1
    280e:	13 82       	std	Z+3, r1	; 0x03
    2810:	12 82       	std	Z+2, r1	; 0x02
    2812:	15 82       	std	Z+5, r1	; 0x05
    2814:	14 82       	std	Z+4, r1	; 0x04
    2816:	61 15       	cp	r22, r1
    2818:	71 05       	cpc	r23, r1
    281a:	49 f0       	breq	.+18     	; 0x282e <_ZN6StringC1EPKc+0x26>
    281c:	fb 01       	movw	r30, r22
    281e:	01 90       	ld	r0, Z+
    2820:	00 20       	and	r0, r0
    2822:	e9 f7       	brne	.-6      	; 0x281e <_ZN6StringC1EPKc+0x16>
    2824:	31 97       	sbiw	r30, 0x01	; 1
    2826:	af 01       	movw	r20, r30
    2828:	46 1b       	sub	r20, r22
    282a:	57 0b       	sbc	r21, r23
    282c:	ce cf       	rjmp	.-100    	; 0x27ca <_ZN6String4copyEPKcj>
    282e:	08 95       	ret

00002830 <_ZN6StringaSEPKc>:
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	ec 01       	movw	r28, r24
    2836:	61 15       	cp	r22, r1
    2838:	71 05       	cpc	r23, r1
    283a:	51 f0       	breq	.+20     	; 0x2850 <_ZN6StringaSEPKc+0x20>
    283c:	fb 01       	movw	r30, r22
    283e:	01 90       	ld	r0, Z+
    2840:	00 20       	and	r0, r0
    2842:	e9 f7       	brne	.-6      	; 0x283e <_ZN6StringaSEPKc+0xe>
    2844:	31 97       	sbiw	r30, 0x01	; 1
    2846:	af 01       	movw	r20, r30
    2848:	46 1b       	sub	r20, r22
    284a:	57 0b       	sbc	r21, r23
    284c:	be df       	rcall	.-132    	; 0x27ca <_ZN6String4copyEPKcj>
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <_ZN6StringaSEPKc+0x22>
    2850:	75 df       	rcall	.-278    	; 0x273c <_ZN6String10invalidateEv>
    2852:	ce 01       	movw	r24, r28
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	08 95       	ret

0000285a <_ZN6StringC1Eih>:
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	62 97       	sbiw	r28, 0x12	; 18
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	8c 01       	movw	r16, r24
    2874:	cb 01       	movw	r24, r22
    2876:	f8 01       	movw	r30, r16
    2878:	11 82       	std	Z+1, r1	; 0x01
    287a:	10 82       	st	Z, r1
    287c:	13 82       	std	Z+3, r1	; 0x03
    287e:	12 82       	std	Z+2, r1	; 0x02
    2880:	15 82       	std	Z+5, r1	; 0x05
    2882:	14 82       	std	Z+4, r1	; 0x04
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	be 01       	movw	r22, r28
    2888:	6f 5f       	subi	r22, 0xFF	; 255
    288a:	7f 4f       	sbci	r23, 0xFF	; 255
    288c:	0e 94 98 32 	call	0x6530	; 0x6530 <itoa>
    2890:	be 01       	movw	r22, r28
    2892:	6f 5f       	subi	r22, 0xFF	; 255
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	c8 01       	movw	r24, r16
    2898:	cb df       	rcall	.-106    	; 0x2830 <_ZN6StringaSEPKc>
    289a:	62 96       	adiw	r28, 0x12	; 18
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	08 95       	ret

000028b0 <_ZN6StringC1Emh>:
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	a1 97       	sbiw	r28, 0x21	; 33
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	8c 01       	movw	r16, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	ba 01       	movw	r22, r20
    28ce:	f8 01       	movw	r30, r16
    28d0:	11 82       	std	Z+1, r1	; 0x01
    28d2:	10 82       	st	Z, r1
    28d4:	13 82       	std	Z+3, r1	; 0x03
    28d6:	12 82       	std	Z+2, r1	; 0x02
    28d8:	15 82       	std	Z+5, r1	; 0x05
    28da:	14 82       	std	Z+4, r1	; 0x04
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	ae 01       	movw	r20, r28
    28e0:	4f 5f       	subi	r20, 0xFF	; 255
    28e2:	5f 4f       	sbci	r21, 0xFF	; 255
    28e4:	0e 94 ac 32 	call	0x6558	; 0x6558 <ultoa>
    28e8:	be 01       	movw	r22, r28
    28ea:	6f 5f       	subi	r22, 0xFF	; 255
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	c8 01       	movw	r24, r16
    28f0:	9f df       	rcall	.-194    	; 0x2830 <_ZN6StringaSEPKc>
    28f2:	a1 96       	adiw	r28, 0x21	; 33
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret

00002908 <_ZN6String6concatEPKcj>:
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	61 15       	cp	r22, r1
    2916:	71 05       	cpc	r23, r1
    2918:	11 f4       	brne	.+4      	; 0x291e <_ZN6String6concatEPKcj+0x16>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	1b c0       	rjmp	.+54     	; 0x2954 <_ZN6String6concatEPKcj+0x4c>
    291e:	41 15       	cp	r20, r1
    2920:	51 05       	cpc	r21, r1
    2922:	b9 f0       	breq	.+46     	; 0x2952 <_ZN6String6concatEPKcj+0x4a>
    2924:	7b 01       	movw	r14, r22
    2926:	ec 01       	movw	r28, r24
    2928:	8c 81       	ldd	r24, Y+4	; 0x04
    292a:	9d 81       	ldd	r25, Y+5	; 0x05
    292c:	8a 01       	movw	r16, r20
    292e:	08 0f       	add	r16, r24
    2930:	19 1f       	adc	r17, r25
    2932:	b8 01       	movw	r22, r16
    2934:	ce 01       	movw	r24, r28
    2936:	2e df       	rcall	.-420    	; 0x2794 <_ZN6String7reserveEj>
    2938:	88 23       	and	r24, r24
    293a:	79 f3       	breq	.-34     	; 0x291a <_ZN6String6concatEPKcj+0x12>
    293c:	28 81       	ld	r18, Y
    293e:	39 81       	ldd	r19, Y+1	; 0x01
    2940:	8c 81       	ldd	r24, Y+4	; 0x04
    2942:	9d 81       	ldd	r25, Y+5	; 0x05
    2944:	b7 01       	movw	r22, r14
    2946:	82 0f       	add	r24, r18
    2948:	93 1f       	adc	r25, r19
    294a:	0e 94 82 32 	call	0x6504	; 0x6504 <strcpy>
    294e:	1d 83       	std	Y+5, r17	; 0x05
    2950:	0c 83       	std	Y+4, r16	; 0x04
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	08 95       	ret

00002962 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    2968:	fb 01       	movw	r30, r22
    296a:	44 81       	ldd	r20, Z+4	; 0x04
    296c:	55 81       	ldd	r21, Z+5	; 0x05
    296e:	60 81       	ld	r22, Z
    2970:	71 81       	ldd	r23, Z+1	; 0x01
    2972:	ca df       	rcall	.-108    	; 0x2908 <_ZN6String6concatEPKcj>
    2974:	81 11       	cpse	r24, r1
    2976:	02 c0       	rjmp	.+4      	; 0x297c <_ZplRK15StringSumHelperRK6String+0x1a>
    2978:	ce 01       	movw	r24, r28
    297a:	e0 de       	rcall	.-576    	; 0x273c <_ZN6String10invalidateEv>
	return a;
}
    297c:	ce 01       	movw	r24, r28
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret

00002984 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    298a:	61 15       	cp	r22, r1
    298c:	71 05       	cpc	r23, r1
    298e:	59 f0       	breq	.+22     	; 0x29a6 <_ZplRK15StringSumHelperPKc+0x22>
    2990:	fb 01       	movw	r30, r22
    2992:	01 90       	ld	r0, Z+
    2994:	00 20       	and	r0, r0
    2996:	e9 f7       	brne	.-6      	; 0x2992 <_ZplRK15StringSumHelperPKc+0xe>
    2998:	31 97       	sbiw	r30, 0x01	; 1
    299a:	af 01       	movw	r20, r30
    299c:	46 1b       	sub	r20, r22
    299e:	57 0b       	sbc	r21, r23
    29a0:	b3 df       	rcall	.-154    	; 0x2908 <_ZN6String6concatEPKcj>
    29a2:	81 11       	cpse	r24, r1
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <_ZplRK15StringSumHelperPKc+0x26>
    29a6:	ce 01       	movw	r24, r28
    29a8:	c9 de       	rcall	.-622    	; 0x273c <_ZN6String10invalidateEv>
	return a;
}
    29aa:	ce 01       	movw	r24, r28
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <_ZN17AFMotorController8latch_txEv>:
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	8c e0       	ldi	r24, 0x0C	; 12
    29ba:	df dd       	rcall	.-1090   	; 0x257a <digitalWrite>
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	88 e0       	ldi	r24, 0x08	; 8
    29c0:	dc dd       	rcall	.-1096   	; 0x257a <digitalWrite>
    29c2:	c7 e0       	ldi	r28, 0x07	; 7
    29c4:	d0 e0       	ldi	r29, 0x00	; 0
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	84 e0       	ldi	r24, 0x04	; 4
    29ca:	d7 dd       	rcall	.-1106   	; 0x257a <digitalWrite>
    29cc:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_ZL11latch_state>
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0c 2e       	mov	r0, r28
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <_ZN17AFMotorController8latch_txEv+0x28>
    29d6:	95 95       	asr	r25
    29d8:	87 95       	ror	r24
    29da:	0a 94       	dec	r0
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <_ZN17AFMotorController8latch_txEv+0x24>
    29de:	80 ff       	sbrs	r24, 0
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <_ZN17AFMotorController8latch_txEv+0x34>
    29e2:	61 e0       	ldi	r22, 0x01	; 1
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <_ZN17AFMotorController8latch_txEv+0x36>
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	88 e0       	ldi	r24, 0x08	; 8
    29ea:	c7 dd       	rcall	.-1138   	; 0x257a <digitalWrite>
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	84 e0       	ldi	r24, 0x04	; 4
    29f0:	c4 dd       	rcall	.-1144   	; 0x257a <digitalWrite>
    29f2:	21 97       	sbiw	r28, 0x01	; 1
    29f4:	40 f7       	brcc	.-48     	; 0x29c6 <_ZN17AFMotorController8latch_txEv+0x14>
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	8c e0       	ldi	r24, 0x0C	; 12
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	bd cd       	rjmp	.-1158   	; 0x257a <digitalWrite>

00002a00 <_ZN17AFMotorController6enableEv>:
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	ec 01       	movw	r28, r24
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	8c e0       	ldi	r24, 0x0C	; 12
    2a0a:	7b dd       	rcall	.-1290   	; 0x2502 <pinMode>
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	87 e0       	ldi	r24, 0x07	; 7
    2a10:	78 dd       	rcall	.-1296   	; 0x2502 <pinMode>
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	88 e0       	ldi	r24, 0x08	; 8
    2a16:	75 dd       	rcall	.-1302   	; 0x2502 <pinMode>
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	84 e0       	ldi	r24, 0x04	; 4
    2a1c:	72 dd       	rcall	.-1308   	; 0x2502 <pinMode>
    2a1e:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <_ZL11latch_state>
    2a22:	ce 01       	movw	r24, r28
    2a24:	c6 df       	rcall	.-116    	; 0x29b2 <_ZN17AFMotorController8latch_txEv>
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	87 e0       	ldi	r24, 0x07	; 7
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	a5 cd       	rjmp	.-1206   	; 0x257a <digitalWrite>

00002a30 <_Z8initPWM1h>:
    2a30:	e0 e8       	ldi	r30, 0x80	; 128
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	90 81       	ld	r25, Z
    2a36:	91 68       	ori	r25, 0x81	; 129
    2a38:	90 83       	st	Z, r25
    2a3a:	87 70       	andi	r24, 0x07	; 7
    2a3c:	88 60       	ori	r24, 0x08	; 8
    2a3e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2a42:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    2a46:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	8b e0       	ldi	r24, 0x0B	; 11
    2a4e:	59 cd       	rjmp	.-1358   	; 0x2502 <pinMode>

00002a50 <_Z8initPWM2h>:
    2a50:	e0 e9       	ldi	r30, 0x90	; 144
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	90 81       	ld	r25, Z
    2a56:	99 60       	ori	r25, 0x09	; 9
    2a58:	90 83       	st	Z, r25
    2a5a:	87 70       	andi	r24, 0x07	; 7
    2a5c:	88 60       	ori	r24, 0x08	; 8
    2a5e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2a62:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    2a66:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	83 e0       	ldi	r24, 0x03	; 3
    2a6e:	49 cd       	rjmp	.-1390   	; 0x2502 <pinMode>

00002a70 <_Z8initPWM3h>:
    2a70:	e0 ea       	ldi	r30, 0xA0	; 160
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	90 81       	ld	r25, Z
    2a76:	91 68       	ori	r25, 0x81	; 129
    2a78:	90 83       	st	Z, r25
    2a7a:	87 70       	andi	r24, 0x07	; 7
    2a7c:	88 60       	ori	r24, 0x08	; 8
    2a7e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2a82:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2a86:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    2a8a:	61 e0       	ldi	r22, 0x01	; 1
    2a8c:	86 e0       	ldi	r24, 0x06	; 6
    2a8e:	39 cd       	rjmp	.-1422   	; 0x2502 <pinMode>

00002a90 <_Z8initPWM4h>:
    2a90:	e0 e9       	ldi	r30, 0x90	; 144
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	90 81       	ld	r25, Z
    2a96:	91 68       	ori	r25, 0x81	; 129
    2a98:	90 83       	st	Z, r25
    2a9a:	87 70       	andi	r24, 0x07	; 7
    2a9c:	88 60       	ori	r24, 0x08	; 8
    2a9e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2aa2:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2aa6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	85 e0       	ldi	r24, 0x05	; 5
    2aae:	29 cd       	rjmp	.-1454   	; 0x2502 <pinMode>

00002ab0 <_ZN10AF_DCMotorC1Ehh>:
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	c6 2f       	mov	r28, r22
    2ab6:	d4 2f       	mov	r29, r20
    2ab8:	fc 01       	movw	r30, r24
    2aba:	60 83       	st	Z, r22
    2abc:	41 83       	std	Z+1, r20	; 0x01
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	97 e0       	ldi	r25, 0x07	; 7
    2ac2:	9e df       	rcall	.-196    	; 0x2a00 <_ZN17AFMotorController6enableEv>
    2ac4:	c2 30       	cpi	r28, 0x02	; 2
    2ac6:	f9 f0       	breq	.+62     	; 0x2b06 <_ZN10AF_DCMotorC1Ehh+0x56>
    2ac8:	70 f4       	brcc	.+28     	; 0x2ae6 <_ZN10AF_DCMotorC1Ehh+0x36>
    2aca:	c1 30       	cpi	r28, 0x01	; 1
    2acc:	a1 f5       	brne	.+104    	; 0x2b36 <_ZN10AF_DCMotorC1Ehh+0x86>
    2ace:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_ZL11latch_state>
    2ad2:	83 7f       	andi	r24, 0xF3	; 243
    2ad4:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_ZL11latch_state>
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	97 e0       	ldi	r25, 0x07	; 7
    2adc:	6a df       	rcall	.-300    	; 0x29b2 <_ZN17AFMotorController8latch_txEv>
    2ade:	8d 2f       	mov	r24, r29
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	a5 cf       	rjmp	.-182    	; 0x2a30 <_Z8initPWM1h>
    2ae6:	c3 30       	cpi	r28, 0x03	; 3
    2ae8:	d1 f0       	breq	.+52     	; 0x2b1e <_ZN10AF_DCMotorC1Ehh+0x6e>
    2aea:	c4 30       	cpi	r28, 0x04	; 4
    2aec:	21 f5       	brne	.+72     	; 0x2b36 <_ZN10AF_DCMotorC1Ehh+0x86>
    2aee:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_ZL11latch_state>
    2af2:	8e 7b       	andi	r24, 0xBE	; 190
    2af4:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_ZL11latch_state>
    2af8:	82 e0       	ldi	r24, 0x02	; 2
    2afa:	97 e0       	ldi	r25, 0x07	; 7
    2afc:	5a df       	rcall	.-332    	; 0x29b2 <_ZN17AFMotorController8latch_txEv>
    2afe:	8d 2f       	mov	r24, r29
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	c5 cf       	rjmp	.-118    	; 0x2a90 <_Z8initPWM4h>
    2b06:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_ZL11latch_state>
    2b0a:	8d 7e       	andi	r24, 0xED	; 237
    2b0c:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_ZL11latch_state>
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	97 e0       	ldi	r25, 0x07	; 7
    2b14:	4e df       	rcall	.-356    	; 0x29b2 <_ZN17AFMotorController8latch_txEv>
    2b16:	8d 2f       	mov	r24, r29
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	99 cf       	rjmp	.-206    	; 0x2a50 <_Z8initPWM2h>
    2b1e:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <_ZL11latch_state>
    2b22:	8f 75       	andi	r24, 0x5F	; 95
    2b24:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_ZL11latch_state>
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	42 df       	rcall	.-380    	; 0x29b2 <_ZN17AFMotorController8latch_txEv>
    2b2e:	8d 2f       	mov	r24, r29
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	9d cf       	rjmp	.-198    	; 0x2a70 <_Z8initPWM3h>
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	08 95       	ret

00002b3c <_ZN10AF_DCMotor3runEh>:
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	80 81       	ld	r24, Z
    2b40:	82 30       	cpi	r24, 0x02	; 2
    2b42:	49 f0       	breq	.+18     	; 0x2b56 <_ZN10AF_DCMotor3runEh+0x1a>
    2b44:	18 f4       	brcc	.+6      	; 0x2b4c <_ZN10AF_DCMotor3runEh+0x10>
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	79 f0       	breq	.+30     	; 0x2b68 <_ZN10AF_DCMotor3runEh+0x2c>
    2b4a:	08 95       	ret
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	31 f0       	breq	.+12     	; 0x2b5c <_ZN10AF_DCMotor3runEh+0x20>
    2b50:	84 30       	cpi	r24, 0x04	; 4
    2b52:	39 f0       	breq	.+14     	; 0x2b62 <_ZN10AF_DCMotor3runEh+0x26>
    2b54:	08 95       	ret
    2b56:	24 e0       	ldi	r18, 0x04	; 4
    2b58:	31 e0       	ldi	r19, 0x01	; 1
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <_ZN10AF_DCMotor3runEh+0x30>
    2b5c:	27 e0       	ldi	r18, 0x07	; 7
    2b5e:	35 e0       	ldi	r19, 0x05	; 5
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <_ZN10AF_DCMotor3runEh+0x30>
    2b62:	26 e0       	ldi	r18, 0x06	; 6
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <_ZN10AF_DCMotor3runEh+0x30>
    2b68:	23 e0       	ldi	r18, 0x03	; 3
    2b6a:	32 e0       	ldi	r19, 0x02	; 2
    2b6c:	62 30       	cpi	r22, 0x02	; 2
    2b6e:	a9 f0       	breq	.+42     	; 0x2b9a <_ZN10AF_DCMotor3runEh+0x5e>
    2b70:	64 30       	cpi	r22, 0x04	; 4
    2b72:	29 f1       	breq	.+74     	; 0x2bbe <_ZN10AF_DCMotor3runEh+0x82>
    2b74:	61 30       	cpi	r22, 0x01	; 1
    2b76:	c1 f5       	brne	.+112    	; 0x2be8 <_ZN10AF_DCMotor3runEh+0xac>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	ac 01       	movw	r20, r24
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <_ZN10AF_DCMotor3runEh+0x46>
    2b80:	44 0f       	add	r20, r20
    2b82:	3a 95       	dec	r19
    2b84:	ea f7       	brpl	.-6      	; 0x2b80 <_ZN10AF_DCMotor3runEh+0x44>
    2b86:	30 91 03 07 	lds	r19, 0x0703	; 0x800703 <_ZL11latch_state>
    2b8a:	43 2b       	or	r20, r19
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <_ZN10AF_DCMotor3runEh+0x54>
    2b8e:	88 0f       	add	r24, r24
    2b90:	2a 95       	dec	r18
    2b92:	ea f7       	brpl	.-6      	; 0x2b8e <_ZN10AF_DCMotor3runEh+0x52>
    2b94:	80 95       	com	r24
    2b96:	84 23       	and	r24, r20
    2b98:	22 c0       	rjmp	.+68     	; 0x2bde <_ZN10AF_DCMotor3runEh+0xa2>
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	ac 01       	movw	r20, r24
    2ba0:	01 c0       	rjmp	.+2      	; 0x2ba4 <_ZN10AF_DCMotor3runEh+0x68>
    2ba2:	44 0f       	add	r20, r20
    2ba4:	3a 95       	dec	r19
    2ba6:	ea f7       	brpl	.-6      	; 0x2ba2 <_ZN10AF_DCMotor3runEh+0x66>
    2ba8:	34 2f       	mov	r19, r20
    2baa:	30 95       	com	r19
    2bac:	40 91 03 07 	lds	r20, 0x0703	; 0x800703 <_ZL11latch_state>
    2bb0:	34 23       	and	r19, r20
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <_ZN10AF_DCMotor3runEh+0x7a>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	2a 95       	dec	r18
    2bb8:	ea f7       	brpl	.-6      	; 0x2bb4 <_ZN10AF_DCMotor3runEh+0x78>
    2bba:	83 2b       	or	r24, r19
    2bbc:	10 c0       	rjmp	.+32     	; 0x2bde <_ZN10AF_DCMotor3runEh+0xa2>
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	ca 01       	movw	r24, r20
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <_ZN10AF_DCMotor3runEh+0x8c>
    2bc6:	88 0f       	add	r24, r24
    2bc8:	3a 95       	dec	r19
    2bca:	ea f7       	brpl	.-6      	; 0x2bc6 <_ZN10AF_DCMotor3runEh+0x8a>
    2bcc:	01 c0       	rjmp	.+2      	; 0x2bd0 <_ZN10AF_DCMotor3runEh+0x94>
    2bce:	44 0f       	add	r20, r20
    2bd0:	2a 95       	dec	r18
    2bd2:	ea f7       	brpl	.-6      	; 0x2bce <_ZN10AF_DCMotor3runEh+0x92>
    2bd4:	84 2b       	or	r24, r20
    2bd6:	80 95       	com	r24
    2bd8:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <_ZL11latch_state>
    2bdc:	89 23       	and	r24, r25
    2bde:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <_ZL11latch_state>
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	97 e0       	ldi	r25, 0x07	; 7
    2be6:	e5 ce       	rjmp	.-566    	; 0x29b2 <_ZN17AFMotorController8latch_txEv>
    2be8:	08 95       	ret

00002bea <_ZN10AF_DCMotor8setSpeedEh>:
    2bea:	fc 01       	movw	r30, r24
    2bec:	80 81       	ld	r24, Z
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	79 f0       	breq	.+30     	; 0x2c10 <_ZN10AF_DCMotor8setSpeedEh+0x26>
    2bf2:	18 f4       	brcc	.+6      	; 0x2bfa <_ZN10AF_DCMotor8setSpeedEh+0x10>
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <_ZN10AF_DCMotor8setSpeedEh+0x1a>
    2bf8:	08 95       	ret
    2bfa:	83 30       	cpi	r24, 0x03	; 3
    2bfc:	79 f0       	breq	.+30     	; 0x2c1c <_ZN10AF_DCMotor8setSpeedEh+0x32>
    2bfe:	84 30       	cpi	r24, 0x04	; 4
    2c00:	99 f0       	breq	.+38     	; 0x2c28 <_ZN10AF_DCMotor8setSpeedEh+0x3e>
    2c02:	08 95       	ret
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    2c0a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    2c0e:	08 95       	ret
    2c10:	70 e0       	ldi	r23, 0x00	; 0
    2c12:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    2c16:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
    2c1a:	08 95       	ret
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2c22:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    2c26:	08 95       	ret
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2c2e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2c32:	08 95       	ret

00002c34 <_GLOBAL__sub_I_microstepcurve>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
    TimerInitalized = false;
    2c34:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <_ZL2MC>
    2c38:	08 95       	ret

00002c3a <_ZN5SDLib4File5writeEh>:
}

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	1f 92       	push	r1
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	69 83       	std	Y+1, r22	; 0x01
    2c46:	dc 01       	movw	r26, r24
    2c48:	ed 91       	ld	r30, X+
    2c4a:	fc 91       	ld	r31, X
    2c4c:	02 80       	ldd	r0, Z+2	; 0x02
    2c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2c50:	e0 2d       	mov	r30, r0
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	be 01       	movw	r22, r28
    2c58:	6f 5f       	subi	r22, 0xFF	; 255
    2c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5c:	19 95       	eicall
    2c5e:	0f 90       	pop	r0
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <_ZN5SDLib4File5writeEPKhj>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	ec 01       	movw	r28, r24
    2c6c:	89 8d       	ldd	r24, Y+25	; 0x19
    2c6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	39 f4       	brne	.+14     	; 0x2c82 <_ZN5SDLib4File5writeEPKhj+0x1c>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9b 83       	std	Y+3, r25	; 0x03
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0b c0       	rjmp	.+22     	; 0x2c98 <_ZN5SDLib4File5writeEPKhj+0x32>
    2c82:	fc 01       	movw	r30, r24
    2c84:	13 82       	std	Z+3, r1	; 0x03
    2c86:	12 82       	std	Z+2, r1	; 0x02
    2c88:	0e 94 b7 21 	call	0x436e	; 0x436e <_ZN6SdFile5writeEPKvj>
    2c8c:	e9 8d       	ldd	r30, Y+25	; 0x19
    2c8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2c90:	22 81       	ldd	r18, Z+2	; 0x02
    2c92:	33 81       	ldd	r19, Z+3	; 0x03
    2c94:	23 2b       	or	r18, r19
    2c96:	71 f7       	brne	.-36     	; 0x2c74 <_ZN5SDLib4File5writeEPKhj+0xe>
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <_ZN5SDLib4File5flushEv>:
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	81 8d       	ldd	r24, Z+25	; 0x19
    2ca2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	11 f0       	breq	.+4      	; 0x2cac <_ZN5SDLib4File5flushEv+0xe>
    2ca8:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <_ZN6SdFile4syncEv>
    2cac:	08 95       	ret

00002cae <_ZN6SdFile4readEv>:
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	1f 92       	push	r1
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	be 01       	movw	r22, r28
    2cbe:	6f 5f       	subi	r22, 0xFF	; 255
    2cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc2:	2c d7       	rcall	.+3672   	; 0x3b1c <_ZN6SdFile4readEPvj>
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	19 f4       	brne	.+6      	; 0x2cce <_ZN6SdFile4readEv+0x20>
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <_ZN6SdFile4readEv+0x24>
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
    2cd0:	9f ef       	ldi	r25, 0xFF	; 255
    2cd2:	0f 90       	pop	r0
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <_ZN5SDLib4File4readEv>:
    2cda:	fc 01       	movw	r30, r24
    2cdc:	81 8d       	ldd	r24, Z+25	; 0x19
    2cde:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <_ZN5SDLib4File4readEv+0xc>
    2ce4:	e4 cf       	rjmp	.-56     	; 0x2cae <_ZN6SdFile4readEv>
    2ce6:	8f ef       	ldi	r24, 0xFF	; 255
    2ce8:	9f ef       	ldi	r25, 0xFF	; 255
    2cea:	08 95       	ret

00002cec <_ZN5SDLib4File4peekEv>:
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	81 8d       	ldd	r24, Z+25	; 0x19
    2cf8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	b1 f0       	breq	.+44     	; 0x2d2a <_ZN5SDLib4File4peekEv+0x3e>
    2cfe:	ef 01       	movw	r28, r30
    2d00:	d6 df       	rcall	.-84     	; 0x2cae <_ZN6SdFile4readEv>
    2d02:	8c 01       	movw	r16, r24
    2d04:	0f 3f       	cpi	r16, 0xFF	; 255
    2d06:	8f ef       	ldi	r24, 0xFF	; 255
    2d08:	18 07       	cpc	r17, r24
    2d0a:	91 f0       	breq	.+36     	; 0x2d30 <_ZN5SDLib4File4peekEv+0x44>
    2d0c:	89 8d       	ldd	r24, Y+25	; 0x19
    2d0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d10:	fc 01       	movw	r30, r24
    2d12:	42 85       	ldd	r20, Z+10	; 0x0a
    2d14:	53 85       	ldd	r21, Z+11	; 0x0b
    2d16:	64 85       	ldd	r22, Z+12	; 0x0c
    2d18:	75 85       	ldd	r23, Z+13	; 0x0d
    2d1a:	41 50       	subi	r20, 0x01	; 1
    2d1c:	51 09       	sbc	r21, r1
    2d1e:	61 09       	sbc	r22, r1
    2d20:	71 09       	sbc	r23, r1
    2d22:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <_ZN6SdFile7seekSetEm>
    2d26:	c8 01       	movw	r24, r16
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <_ZN5SDLib4File4peekEv+0x48>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <_ZN5SDLib4File4peekEv+0x48>
    2d30:	8f ef       	ldi	r24, 0xFF	; 255
    2d32:	9f ef       	ldi	r25, 0xFF	; 255
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <_ZN5SDLib4FileC1E6SdFilePKc>:
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	ec 01       	movw	r28, r24
    2d4c:	7b 01       	movw	r14, r22
    2d4e:	8a 01       	movw	r16, r20
    2d50:	1b 82       	std	Y+3, r1	; 0x03
    2d52:	1a 82       	std	Y+2, r1	; 0x02
    2d54:	88 ee       	ldi	r24, 0xE8	; 232
    2d56:	93 e0       	ldi	r25, 0x03	; 3
    2d58:	a0 e0       	ldi	r26, 0x00	; 0
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	8c 83       	std	Y+4, r24	; 0x04
    2d5e:	9d 83       	std	Y+5, r25	; 0x05
    2d60:	ae 83       	std	Y+6, r26	; 0x06
    2d62:	bf 83       	std	Y+7, r27	; 0x07
    2d64:	8c ea       	ldi	r24, 0xAC	; 172
    2d66:	94 e0       	ldi	r25, 0x04	; 4
    2d68:	99 83       	std	Y+1, r25	; 0x01
    2d6a:	88 83       	st	Y, r24
    2d6c:	8d e1       	ldi	r24, 0x1D	; 29
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <malloc>
    2d74:	9a 8f       	std	Y+26, r25	; 0x1a
    2d76:	89 8f       	std	Y+25, r24	; 0x19
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	79 f0       	breq	.+30     	; 0x2d9a <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    2d7c:	2d e1       	ldi	r18, 0x1D	; 29
    2d7e:	f7 01       	movw	r30, r14
    2d80:	dc 01       	movw	r26, r24
    2d82:	01 90       	ld	r0, Z+
    2d84:	0d 92       	st	X+, r0
    2d86:	2a 95       	dec	r18
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    2d8a:	4c e0       	ldi	r20, 0x0C	; 12
    2d8c:	50 e0       	ldi	r21, 0x00	; 0
    2d8e:	b8 01       	movw	r22, r16
    2d90:	ce 01       	movw	r24, r28
    2d92:	0c 96       	adiw	r24, 0x0c	; 12
    2d94:	0e 94 89 32 	call	0x6512	; 0x6512 <strncpy>
    2d98:	18 8e       	std	Y+24, r1	; 0x18
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	08 95       	ret

00002da8 <_ZN5SDLib4FileC1Ev>:
    2da8:	fc 01       	movw	r30, r24
    2daa:	13 82       	std	Z+3, r1	; 0x03
    2dac:	12 82       	std	Z+2, r1	; 0x02
    2dae:	88 ee       	ldi	r24, 0xE8	; 232
    2db0:	93 e0       	ldi	r25, 0x03	; 3
    2db2:	a0 e0       	ldi	r26, 0x00	; 0
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	84 83       	std	Z+4, r24	; 0x04
    2db8:	95 83       	std	Z+5, r25	; 0x05
    2dba:	a6 83       	std	Z+6, r26	; 0x06
    2dbc:	b7 83       	std	Z+7, r27	; 0x07
    2dbe:	8c ea       	ldi	r24, 0xAC	; 172
    2dc0:	94 e0       	ldi	r25, 0x04	; 4
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
    2dc6:	12 8e       	std	Z+26, r1	; 0x1a
    2dc8:	11 8e       	std	Z+25, r1	; 0x19
    2dca:	14 86       	std	Z+12, r1	; 0x0c
    2dcc:	08 95       	ret

00002dce <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    2dce:	fc 01       	movw	r30, r24
    2dd0:	81 8d       	ldd	r24, Z+25	; 0x19
    2dd2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <_ZN5SDLib4File4readEPvj+0xc>
    return _file->read(buf, nbyte);
    2dd8:	a1 c6       	rjmp	.+3394   	; 0x3b1c <_ZN6SdFile4readEPvj>
  return 0;
}
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	08 95       	ret

00002de0 <_ZN5SDLib4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    2de0:	fc 01       	movw	r30, r24
    2de2:	81 8d       	ldd	r24, Z+25	; 0x19
    2de4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	21 f0       	breq	.+8      	; 0x2df2 <_ZN5SDLib4File4seekEm+0x12>

  return _file->seekSet(pos);
    2dea:	e2 d7       	rcall	.+4036   	; 0x3db0 <_ZN6SdFile7seekSetEm>
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	81 11       	cpse	r24, r1
    2df0:	01 c0       	rjmp	.+2      	; 0x2df4 <_ZN5SDLib4File4seekEm+0x14>
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    2df2:	90 e0       	ldi	r25, 0x00	; 0

  return _file->seekSet(pos);
}
    2df4:	89 2f       	mov	r24, r25
    2df6:	08 95       	ret

00002df8 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    2df8:	dc 01       	movw	r26, r24
    2dfa:	59 96       	adiw	r26, 0x19	; 25
    2dfc:	ed 91       	ld	r30, X+
    2dfe:	fc 91       	ld	r31, X
    2e00:	5a 97       	sbiw	r26, 0x1a	; 26
    2e02:	30 97       	sbiw	r30, 0x00	; 0
    2e04:	29 f0       	breq	.+10     	; 0x2e10 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    2e06:	62 85       	ldd	r22, Z+10	; 0x0a
    2e08:	73 85       	ldd	r23, Z+11	; 0x0b
    2e0a:	84 85       	ldd	r24, Z+12	; 0x0c
    2e0c:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    2e0e:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    2e10:	6f ef       	ldi	r22, 0xFF	; 255
    2e12:	7f ef       	ldi	r23, 0xFF	; 255
    2e14:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    2e16:	08 95       	ret

00002e18 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    2e18:	dc 01       	movw	r26, r24
    2e1a:	59 96       	adiw	r26, 0x19	; 25
    2e1c:	ed 91       	ld	r30, X+
    2e1e:	fc 91       	ld	r31, X
    2e20:	5a 97       	sbiw	r26, 0x1a	; 26
    2e22:	30 97       	sbiw	r30, 0x00	; 0
    2e24:	29 f0       	breq	.+10     	; 0x2e30 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    2e26:	63 89       	ldd	r22, Z+19	; 0x13
    2e28:	74 89       	ldd	r23, Z+20	; 0x14
    2e2a:	85 89       	ldd	r24, Z+21	; 0x15
    2e2c:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    2e2e:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    2e36:	08 95       	ret

00002e38 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    2e38:	cf 92       	push	r12
    2e3a:	df 92       	push	r13
    2e3c:	ef 92       	push	r14
    2e3e:	ff 92       	push	r15
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
  if (! _file) return 0;
    2e44:	fc 01       	movw	r30, r24
    2e46:	21 8d       	ldd	r18, Z+25	; 0x19
    2e48:	32 8d       	ldd	r19, Z+26	; 0x1a
    2e4a:	23 2b       	or	r18, r19
    2e4c:	c9 f0       	breq	.+50     	; 0x2e80 <_ZN5SDLib4File9availableEv+0x48>
    2e4e:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    2e50:	e3 df       	rcall	.-58     	; 0x2e18 <_ZN5SDLib4File4sizeEv>
    2e52:	6b 01       	movw	r12, r22
    2e54:	7c 01       	movw	r14, r24
    2e56:	ce 01       	movw	r24, r28
    2e58:	cf df       	rcall	.-98     	; 0x2df8 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    2e5a:	a7 01       	movw	r20, r14
    2e5c:	96 01       	movw	r18, r12
    2e5e:	26 1b       	sub	r18, r22
    2e60:	37 0b       	sbc	r19, r23
    2e62:	48 0b       	sbc	r20, r24
    2e64:	59 0b       	sbc	r21, r25
    2e66:	da 01       	movw	r26, r20
    2e68:	c9 01       	movw	r24, r18
    2e6a:	81 15       	cp	r24, r1
    2e6c:	30 e8       	ldi	r19, 0x80	; 128
    2e6e:	93 07       	cpc	r25, r19
    2e70:	a1 05       	cpc	r26, r1
    2e72:	b1 05       	cpc	r27, r1
    2e74:	38 f0       	brcs	.+14     	; 0x2e84 <_ZN5SDLib4File9availableEv+0x4c>
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	9f e7       	ldi	r25, 0x7F	; 127
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <_ZN5SDLib4File9availableEv+0x4c>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	df 90       	pop	r13
    2e8e:	cf 90       	pop	r12
    2e90:	08 95       	ret

00002e92 <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	ec 01       	movw	r28, r24
  if (_file) {
    2e98:	89 8d       	ldd	r24, Y+25	; 0x19
    2e9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	41 f0       	breq	.+16     	; 0x2eb0 <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    2ea0:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_ZN6SdFile5closeEv>
    free(_file); 
    2ea4:	89 8d       	ldd	r24, Y+25	; 0x19
    2ea6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ea8:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <free>
    _file = 0;
    2eac:	1a 8e       	std	Y+26, r1	; 0x1a
    2eae:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	59 96       	adiw	r26, 0x19	; 25
    2eba:	ed 91       	ld	r30, X+
    2ebc:	fc 91       	ld	r31, X
    2ebe:	5a 97       	sbiw	r26, 0x1a	; 26
    2ec0:	30 97       	sbiw	r30, 0x00	; 0
    2ec2:	21 f0       	breq	.+8      	; 0x2ecc <_ZN5SDLib4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	95 81       	ldd	r25, Z+5	; 0x05
    2ec8:	91 11       	cpse	r25, r1
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
}
    2ece:	08 95       	ret

00002ed0 <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    2ed0:	0f 93       	push	r16
    2ed2:	1f 93       	push	r17
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	ec 01       	movw	r28, r24
    2eda:	8b 01       	movw	r16, r22
    2edc:	41 e0       	ldi	r20, 0x01	; 1
    2ede:	0e 94 e5 26 	call	0x4dca	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh>
    2ee2:	81 11       	cpse	r24, r1
    2ee4:	09 c0       	rjmp	.+18     	; 0x2ef8 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	b8 01       	movw	r22, r16
    2eea:	ce 01       	movw	r24, r28
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	08 95       	ret

00002f04 <_ZN5SDLib7SDClass5beginEh>:
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	ec 01       	movw	r28, r24
    2f0e:	46 2f       	mov	r20, r22
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	e9 d2       	rcall	.+1490   	; 0x34e6 <_ZN7Sd2Card4initEhh>
    2f14:	88 23       	and	r24, r24
    2f16:	79 f0       	breq	.+30     	; 0x2f36 <_ZN5SDLib7SDClass5beginEh+0x32>
    2f18:	8e 01       	movw	r16, r28
    2f1a:	04 5f       	subi	r16, 0xF4	; 244
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1e:	be 01       	movw	r22, r28
    2f20:	c8 01       	movw	r24, r16
    2f22:	d6 df       	rcall	.-84     	; 0x2ed0 <_ZN8SdVolume4initEP7Sd2Card>
    2f24:	88 23       	and	r24, r24
    2f26:	39 f0       	breq	.+14     	; 0x2f36 <_ZN5SDLib7SDClass5beginEh+0x32>
    2f28:	b8 01       	movw	r22, r16
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	8a 96       	adiw	r24, 0x2a	; 42
    2f2e:	a6 d5       	rcall	.+2892   	; 0x3a7c <_ZN6SdFile8openRootEP8SdVolume>
    2f30:	91 e0       	ldi	r25, 0x01	; 1
    2f32:	81 11       	cpse	r24, r1
    2f34:	01 c0       	rjmp	.+2      	; 0x2f38 <_ZN5SDLib7SDClass5beginEh+0x34>
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	89 2f       	mov	r24, r25
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	1f 91       	pop	r17
    2f40:	0f 91       	pop	r16
    2f42:	08 95       	ret

00002f44 <_ZN6SdFileC1ERKS_>:
    2f44:	fc 01       	movw	r30, r24
    2f46:	db 01       	movw	r26, r22
    2f48:	12 96       	adiw	r26, 0x02	; 2
    2f4a:	8d 91       	ld	r24, X+
    2f4c:	9c 91       	ld	r25, X
    2f4e:	13 97       	sbiw	r26, 0x03	; 3
    2f50:	93 83       	std	Z+3, r25	; 0x03
    2f52:	82 83       	std	Z+2, r24	; 0x02
    2f54:	80 ec       	ldi	r24, 0xC0	; 192
    2f56:	94 e0       	ldi	r25, 0x04	; 4
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
    2f5c:	14 96       	adiw	r26, 0x04	; 4
    2f5e:	8c 91       	ld	r24, X
    2f60:	14 97       	sbiw	r26, 0x04	; 4
    2f62:	84 83       	std	Z+4, r24	; 0x04
    2f64:	15 96       	adiw	r26, 0x05	; 5
    2f66:	8c 91       	ld	r24, X
    2f68:	15 97       	sbiw	r26, 0x05	; 5
    2f6a:	85 83       	std	Z+5, r24	; 0x05
    2f6c:	16 96       	adiw	r26, 0x06	; 6
    2f6e:	4d 91       	ld	r20, X+
    2f70:	5d 91       	ld	r21, X+
    2f72:	6d 91       	ld	r22, X+
    2f74:	7c 91       	ld	r23, X
    2f76:	19 97       	sbiw	r26, 0x09	; 9
    2f78:	46 83       	std	Z+6, r20	; 0x06
    2f7a:	57 83       	std	Z+7, r21	; 0x07
    2f7c:	60 87       	std	Z+8, r22	; 0x08
    2f7e:	71 87       	std	Z+9, r23	; 0x09
    2f80:	1a 96       	adiw	r26, 0x0a	; 10
    2f82:	4d 91       	ld	r20, X+
    2f84:	5d 91       	ld	r21, X+
    2f86:	6d 91       	ld	r22, X+
    2f88:	7c 91       	ld	r23, X
    2f8a:	1d 97       	sbiw	r26, 0x0d	; 13
    2f8c:	42 87       	std	Z+10, r20	; 0x0a
    2f8e:	53 87       	std	Z+11, r21	; 0x0b
    2f90:	64 87       	std	Z+12, r22	; 0x0c
    2f92:	75 87       	std	Z+13, r23	; 0x0d
    2f94:	1e 96       	adiw	r26, 0x0e	; 14
    2f96:	4d 91       	ld	r20, X+
    2f98:	5d 91       	ld	r21, X+
    2f9a:	6d 91       	ld	r22, X+
    2f9c:	7c 91       	ld	r23, X
    2f9e:	51 97       	sbiw	r26, 0x11	; 17
    2fa0:	46 87       	std	Z+14, r20	; 0x0e
    2fa2:	57 87       	std	Z+15, r21	; 0x0f
    2fa4:	60 8b       	std	Z+16, r22	; 0x10
    2fa6:	71 8b       	std	Z+17, r23	; 0x11
    2fa8:	52 96       	adiw	r26, 0x12	; 18
    2faa:	8c 91       	ld	r24, X
    2fac:	52 97       	sbiw	r26, 0x12	; 18
    2fae:	82 8b       	std	Z+18, r24	; 0x12
    2fb0:	53 96       	adiw	r26, 0x13	; 19
    2fb2:	4d 91       	ld	r20, X+
    2fb4:	5d 91       	ld	r21, X+
    2fb6:	6d 91       	ld	r22, X+
    2fb8:	7c 91       	ld	r23, X
    2fba:	56 97       	sbiw	r26, 0x16	; 22
    2fbc:	43 8b       	std	Z+19, r20	; 0x13
    2fbe:	54 8b       	std	Z+20, r21	; 0x14
    2fc0:	65 8b       	std	Z+21, r22	; 0x15
    2fc2:	76 8b       	std	Z+22, r23	; 0x16
    2fc4:	57 96       	adiw	r26, 0x17	; 23
    2fc6:	4d 91       	ld	r20, X+
    2fc8:	5d 91       	ld	r21, X+
    2fca:	6d 91       	ld	r22, X+
    2fcc:	7c 91       	ld	r23, X
    2fce:	5a 97       	sbiw	r26, 0x1a	; 26
    2fd0:	47 8b       	std	Z+23, r20	; 0x17
    2fd2:	50 8f       	std	Z+24, r21	; 0x18
    2fd4:	61 8f       	std	Z+25, r22	; 0x19
    2fd6:	72 8f       	std	Z+26, r23	; 0x1a
    2fd8:	5b 96       	adiw	r26, 0x1b	; 27
    2fda:	8d 91       	ld	r24, X+
    2fdc:	9c 91       	ld	r25, X
    2fde:	5c 97       	sbiw	r26, 0x1c	; 28
    2fe0:	94 8f       	std	Z+28, r25	; 0x1c
    2fe2:	83 8f       	std	Z+27, r24	; 0x1b
    2fe4:	08 95       	ret

00002fe6 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    2fe6:	4f 92       	push	r4
    2fe8:	5f 92       	push	r5
    2fea:	6f 92       	push	r6
    2fec:	7f 92       	push	r7
    2fee:	8f 92       	push	r8
    2ff0:	9f 92       	push	r9
    2ff2:	af 92       	push	r10
    2ff4:	bf 92       	push	r11
    2ff6:	cf 92       	push	r12
    2ff8:	df 92       	push	r13
    2ffa:	ef 92       	push	r14
    2ffc:	ff 92       	push	r15
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	c7 54       	subi	r28, 0x47	; 71
    300c:	d1 09       	sbc	r29, r1
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	5c 01       	movw	r10, r24
    301a:	4a 01       	movw	r8, r20
    301c:	39 01       	movw	r6, r18
    301e:	66 5d       	subi	r22, 0xD6	; 214
    3020:	7f 4f       	sbci	r23, 0xFF	; 255
    3022:	6e 01       	movw	r12, r28
    3024:	8e e1       	ldi	r24, 0x1E	; 30
    3026:	c8 0e       	add	r12, r24
    3028:	d1 1c       	adc	r13, r1
    302a:	c6 01       	movw	r24, r12
    302c:	8b df       	rcall	.-234    	; 0x2f44 <_ZN6SdFileC1ERKS_>
    302e:	1c 82       	std	Y+4, r1	; 0x04
    3030:	1b 82       	std	Y+3, r1	; 0x03
    3032:	80 ec       	ldi	r24, 0xC0	; 192
    3034:	94 e0       	ldi	r25, 0x04	; 4
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	1e 82       	std	Y+6, r1	; 0x06
    303c:	74 01       	movw	r14, r8
    303e:	8e 01       	movw	r16, r28
    3040:	0f 5f       	subi	r16, 0xFF	; 255
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	5c 2c       	mov	r5, r12
    3046:	4d 2c       	mov	r4, r13
    3048:	6f e2       	ldi	r22, 0x2F	; 47
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	c7 01       	movw	r24, r14
    304e:	0e 94 77 32 	call	0x64ee	; 0x64ee <strchr>
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	09 f4       	brne	.+2      	; 0x3058 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x72>
    3056:	41 c0       	rjmp	.+130    	; 0x30da <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf4>
    3058:	f7 01       	movw	r30, r14
    305a:	20 81       	ld	r18, Z
    305c:	2f 32       	cpi	r18, 0x2F	; 47
    305e:	71 f4       	brne	.+28     	; 0x307c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    3060:	ff ef       	ldi	r31, 0xFF	; 255
    3062:	ef 1a       	sub	r14, r31
    3064:	ff 0a       	sbc	r15, r31
    3066:	90 2f       	mov	r25, r16
    3068:	81 2f       	mov	r24, r17
    306a:	05 2d       	mov	r16, r5
    306c:	14 2d       	mov	r17, r4
    306e:	2c 01       	movw	r4, r24
    3070:	c2 01       	movw	r24, r4
    3072:	50 2e       	mov	r5, r16
    3074:	41 2e       	mov	r4, r17
    3076:	09 2f       	mov	r16, r25
    3078:	18 2f       	mov	r17, r24
    307a:	e6 cf       	rjmp	.-52     	; 0x3048 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x62>
    307c:	8e 19       	sub	r24, r14
    307e:	8d 30       	cpi	r24, 0x0D	; 13
    3080:	08 f0       	brcs	.+2      	; 0x3084 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x9e>
    3082:	8c e0       	ldi	r24, 0x0C	; 12
    3084:	c8 2e       	mov	r12, r24
    3086:	d1 2c       	mov	r13, r1
    3088:	a6 01       	movw	r20, r12
    308a:	b7 01       	movw	r22, r14
    308c:	ce 01       	movw	r24, r28
    308e:	cb 96       	adiw	r24, 0x3b	; 59
    3090:	0e 94 89 32 	call	0x6512	; 0x6512 <strncpy>
    3094:	eb e3       	ldi	r30, 0x3B	; 59
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	ec 0f       	add	r30, r28
    309a:	fd 1f       	adc	r31, r29
    309c:	ec 0d       	add	r30, r12
    309e:	fd 1d       	adc	r31, r13
    30a0:	10 82       	st	Z, r1
    30a2:	c8 01       	movw	r24, r16
    30a4:	60 d7       	rcall	.+3776   	; 0x3f66 <_ZN6SdFile5closeEv>
    30a6:	21 e0       	ldi	r18, 0x01	; 1
    30a8:	ae 01       	movw	r20, r28
    30aa:	45 5c       	subi	r20, 0xC5	; 197
    30ac:	5f 4f       	sbci	r21, 0xFF	; 255
    30ae:	65 2d       	mov	r22, r5
    30b0:	74 2d       	mov	r23, r4
    30b2:	c8 01       	movw	r24, r16
    30b4:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN6SdFile4openEPS_PKch>
    30b8:	81 11       	cpse	r24, r1
    30ba:	09 c0       	rjmp	.+18     	; 0x30ce <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe8>
    30bc:	f5 01       	movw	r30, r10
    30be:	13 82       	std	Z+3, r1	; 0x03
    30c0:	12 82       	std	Z+2, r1	; 0x02
    30c2:	80 ec       	ldi	r24, 0xC0	; 192
    30c4:	94 e0       	ldi	r25, 0x04	; 4
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	80 83       	st	Z, r24
    30ca:	15 82       	std	Z+5, r1	; 0x05
    30cc:	0f c0       	rjmp	.+30     	; 0x30ec <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x106>
    30ce:	ec 0c       	add	r14, r12
    30d0:	fd 1c       	adc	r15, r13
    30d2:	85 2d       	mov	r24, r5
    30d4:	94 2d       	mov	r25, r4
    30d6:	47 d7       	rcall	.+3726   	; 0x3f66 <_ZN6SdFile5closeEv>
    30d8:	cb cf       	rjmp	.-106    	; 0x3070 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    30da:	e8 18       	sub	r14, r8
    30dc:	f9 08       	sbc	r15, r9
    30de:	f3 01       	movw	r30, r6
    30e0:	f1 82       	std	Z+1, r15	; 0x01
    30e2:	e0 82       	st	Z, r14
    30e4:	65 2d       	mov	r22, r5
    30e6:	74 2d       	mov	r23, r4
    30e8:	c5 01       	movw	r24, r10
    30ea:	2c df       	rcall	.-424    	; 0x2f44 <_ZN6SdFileC1ERKS_>
    30ec:	c5 01       	movw	r24, r10
    30ee:	c9 5b       	subi	r28, 0xB9	; 185
    30f0:	df 4f       	sbci	r29, 0xFF	; 255
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	df 90       	pop	r13
    310a:	cf 90       	pop	r12
    310c:	bf 90       	pop	r11
    310e:	af 90       	pop	r10
    3110:	9f 90       	pop	r9
    3112:	8f 90       	pop	r8
    3114:	7f 90       	pop	r7
    3116:	6f 90       	pop	r6
    3118:	5f 90       	pop	r5
    311a:	4f 90       	pop	r4
    311c:	08 95       	ret

0000311e <_ZN5SDLib7SDClass4openEPKch>:
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ff 92       	push	r15
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	c9 55       	subi	r28, 0x59	; 89
    3136:	d1 09       	sbc	r29, r1
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	6c 01       	movw	r12, r24
    3144:	5b 01       	movw	r10, r22
    3146:	8a 01       	movw	r16, r20
    3148:	f2 2e       	mov	r15, r18
    314a:	9e 01       	movw	r18, r28
    314c:	28 5a       	subi	r18, 0xA8	; 168
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	ce 01       	movw	r24, r28
    3152:	cb 96       	adiw	r24, 0x3b	; 59
    3154:	48 df       	rcall	.-368    	; 0x2fe6 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    3156:	6a 96       	adiw	r28, 0x1a	; 26
    3158:	8e ad       	ldd	r24, Y+62	; 0x3e
    315a:	9f ad       	ldd	r25, Y+63	; 0x3f
    315c:	6a 97       	sbiw	r28, 0x1a	; 26
    315e:	08 0f       	add	r16, r24
    3160:	19 1f       	adc	r17, r25
    3162:	f8 01       	movw	r30, r16
    3164:	80 81       	ld	r24, Z
    3166:	81 11       	cpse	r24, r1
    3168:	09 c0       	rjmp	.+18     	; 0x317c <_ZN5SDLib7SDClass4openEPKch+0x5e>
    316a:	be 01       	movw	r22, r28
    316c:	65 5c       	subi	r22, 0xC5	; 197
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
    3170:	ce 01       	movw	r24, r28
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	e7 de       	rcall	.-562    	; 0x2f44 <_ZN6SdFileC1ERKS_>
    3176:	4a eb       	ldi	r20, 0xBA	; 186
    3178:	54 e0       	ldi	r21, 0x04	; 4
    317a:	3b c0       	rjmp	.+118    	; 0x31f2 <_ZN5SDLib7SDClass4openEPKch+0xd4>
    317c:	19 a2       	std	Y+33, r1	; 0x21
    317e:	18 a2       	std	Y+32, r1	; 0x20
    3180:	80 ec       	ldi	r24, 0xC0	; 192
    3182:	94 e0       	ldi	r25, 0x04	; 4
    3184:	9f 8f       	std	Y+31, r25	; 0x1f
    3186:	8e 8f       	std	Y+30, r24	; 0x1e
    3188:	1b a2       	std	Y+35, r1	; 0x23
    318a:	21 96       	adiw	r28, 0x01	; 1
    318c:	8f ad       	ldd	r24, Y+63	; 0x3f
    318e:	21 97       	sbiw	r28, 0x01	; 1
    3190:	81 11       	cpse	r24, r1
    3192:	03 c0       	rjmp	.+6      	; 0x319a <_ZN5SDLib7SDClass4openEPKch+0x7c>
    3194:	c6 01       	movw	r24, r12
    3196:	08 de       	rcall	.-1008   	; 0x2da8 <_ZN5SDLib4FileC1Ev>
    3198:	31 c0       	rjmp	.+98     	; 0x31fc <_ZN5SDLib7SDClass4openEPKch+0xde>
    319a:	82 50       	subi	r24, 0x02	; 2
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	58 f4       	brcc	.+22     	; 0x31b6 <_ZN5SDLib7SDClass4openEPKch+0x98>
    31a0:	b5 01       	movw	r22, r10
    31a2:	66 5d       	subi	r22, 0xD6	; 214
    31a4:	7f 4f       	sbci	r23, 0xFF	; 255
    31a6:	2f 2d       	mov	r18, r15
    31a8:	a8 01       	movw	r20, r16
    31aa:	ce 01       	movw	r24, r28
    31ac:	4e 96       	adiw	r24, 0x1e	; 30
    31ae:	f9 d7       	rcall	.+4082   	; 0x41a2 <_ZN6SdFile4openEPS_PKch>
    31b0:	81 11       	cpse	r24, r1
    31b2:	0e c0       	rjmp	.+28     	; 0x31d0 <_ZN5SDLib7SDClass4openEPKch+0xb2>
    31b4:	ef cf       	rjmp	.-34     	; 0x3194 <_ZN5SDLib7SDClass4openEPKch+0x76>
    31b6:	2f 2d       	mov	r18, r15
    31b8:	a8 01       	movw	r20, r16
    31ba:	be 01       	movw	r22, r28
    31bc:	65 5c       	subi	r22, 0xC5	; 197
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	ce 01       	movw	r24, r28
    31c2:	4e 96       	adiw	r24, 0x1e	; 30
    31c4:	ee d7       	rcall	.+4060   	; 0x41a2 <_ZN6SdFile4openEPS_PKch>
    31c6:	88 23       	and	r24, r24
    31c8:	29 f3       	breq	.-54     	; 0x3194 <_ZN5SDLib7SDClass4openEPKch+0x76>
    31ca:	ce 01       	movw	r24, r28
    31cc:	cb 96       	adiw	r24, 0x3b	; 59
    31ce:	cb d6       	rcall	.+3478   	; 0x3f66 <_ZN6SdFile5closeEv>
    31d0:	8f 2d       	mov	r24, r15
    31d2:	86 70       	andi	r24, 0x06	; 6
    31d4:	39 f0       	breq	.+14     	; 0x31e4 <_ZN5SDLib7SDClass4openEPKch+0xc6>
    31d6:	49 a9       	ldd	r20, Y+49	; 0x31
    31d8:	5a a9       	ldd	r21, Y+50	; 0x32
    31da:	6b a9       	ldd	r22, Y+51	; 0x33
    31dc:	7c a9       	ldd	r23, Y+52	; 0x34
    31de:	ce 01       	movw	r24, r28
    31e0:	4e 96       	adiw	r24, 0x1e	; 30
    31e2:	e6 d5       	rcall	.+3020   	; 0x3db0 <_ZN6SdFile7seekSetEm>
    31e4:	be 01       	movw	r22, r28
    31e6:	62 5e       	subi	r22, 0xE2	; 226
    31e8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ea:	ce 01       	movw	r24, r28
    31ec:	01 96       	adiw	r24, 0x01	; 1
    31ee:	aa de       	rcall	.-684    	; 0x2f44 <_ZN6SdFileC1ERKS_>
    31f0:	a8 01       	movw	r20, r16
    31f2:	be 01       	movw	r22, r28
    31f4:	6f 5f       	subi	r22, 0xFF	; 255
    31f6:	7f 4f       	sbci	r23, 0xFF	; 255
    31f8:	c6 01       	movw	r24, r12
    31fa:	a1 dd       	rcall	.-1214   	; 0x2d3e <_ZN5SDLib4FileC1E6SdFilePKc>
    31fc:	c6 01       	movw	r24, r12
    31fe:	c7 5a       	subi	r28, 0xA7	; 167
    3200:	df 4f       	sbci	r29, 0xFF	; 255
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	bf 90       	pop	r11
    321c:	af 90       	pop	r10
    321e:	08 95       	ret

00003220 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    3220:	e4 e0       	ldi	r30, 0x04	; 4
    3222:	f7 e0       	ldi	r31, 0x07	; 7
    3224:	15 82       	std	Z+5, r1	; 0x05
    3226:	16 82       	std	Z+6, r1	; 0x06
    3228:	11 86       	std	Z+9, r1	; 0x09
    322a:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	a0 e0       	ldi	r26, 0x00	; 0
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	84 87       	std	Z+12, r24	; 0x0c
    3236:	95 87       	std	Z+13, r25	; 0x0d
    3238:	a6 87       	std	Z+14, r26	; 0x0e
    323a:	b7 87       	std	Z+15, r27	; 0x0f
    323c:	13 a2       	std	Z+35, r1	; 0x23
    323e:	15 a6       	std	Z+45, r1	; 0x2d
    3240:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3242:	80 ec       	ldi	r24, 0xC0	; 192
    3244:	94 e0       	ldi	r25, 0x04	; 4
    3246:	93 a7       	std	Z+43, r25	; 0x2b
    3248:	82 a7       	std	Z+42, r24	; 0x2a
    324a:	17 a6       	std	Z+47, r1	; 0x2f
    324c:	08 95       	ret

0000324e <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    324e:	9f b7       	in	r25, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	20 91 f0 09 	lds	r18, 0x09F0	; 0x8009f0 <_ZN8SPIClass13interruptModeE>
    3256:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <_ZN8SPIClass13interruptSaveE>
    325a:	21 30       	cpi	r18, 0x01	; 1
    325c:	19 f4       	brne	.+6      	; 0x3264 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    325e:	8d bb       	out	0x1d, r24	; 29
    3260:	9f bf       	out	0x3f, r25	; 63
    3262:	08 95       	ret
    3264:	8f bf       	out	0x3f, r24	; 63
    3266:	08 95       	ret

00003268 <_ZN11SPISettingsC1Emhh>:
    3268:	0f 93       	push	r16
    326a:	fc 01       	movw	r30, r24
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	92 e1       	ldi	r25, 0x12	; 18
    3270:	aa e7       	ldi	r26, 0x7A	; 122
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	48 17       	cp	r20, r24
    3278:	59 07       	cpc	r21, r25
    327a:	6a 07       	cpc	r22, r26
    327c:	7b 07       	cpc	r23, r27
    327e:	40 f4       	brcc	.+16     	; 0x3290 <_ZN11SPISettingsC1Emhh+0x28>
    3280:	b6 95       	lsr	r27
    3282:	a7 95       	ror	r26
    3284:	97 95       	ror	r25
    3286:	87 95       	ror	r24
    3288:	3f 5f       	subi	r19, 0xFF	; 255
    328a:	36 30       	cpi	r19, 0x06	; 6
    328c:	a1 f7       	brne	.-24     	; 0x3276 <_ZN11SPISettingsC1Emhh+0xe>
    328e:	37 e0       	ldi	r19, 0x07	; 7
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	93 27       	eor	r25, r19
    3294:	22 23       	and	r18, r18
    3296:	11 f0       	breq	.+4      	; 0x329c <_ZN11SPISettingsC1Emhh+0x34>
    3298:	20 e5       	ldi	r18, 0x50	; 80
    329a:	01 c0       	rjmp	.+2      	; 0x329e <_ZN11SPISettingsC1Emhh+0x36>
    329c:	20 e7       	ldi	r18, 0x70	; 112
    329e:	0c 70       	andi	r16, 0x0C	; 12
    32a0:	89 2f       	mov	r24, r25
    32a2:	86 95       	lsr	r24
    32a4:	08 2b       	or	r16, r24
    32a6:	02 2b       	or	r16, r18
    32a8:	00 83       	st	Z, r16
    32aa:	91 70       	andi	r25, 0x01	; 1
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	0f 91       	pop	r16
    32b0:	08 95       	ret

000032b2 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    32b2:	20 91 f0 09 	lds	r18, 0x09F0	; 0x8009f0 <_ZN8SPIClass13interruptModeE>
    32b6:	22 23       	and	r18, r18
    32b8:	99 f0       	breq	.+38     	; 0x32e0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    32ba:	4f b7       	in	r20, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	20 91 f0 09 	lds	r18, 0x09F0	; 0x8009f0 <_ZN8SPIClass13interruptModeE>
    32c2:	21 30       	cpi	r18, 0x01	; 1
    32c4:	59 f4       	brne	.+22     	; 0x32dc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    32c6:	2d b3       	in	r18, 0x1d	; 29
    32c8:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <_ZN8SPIClass13interruptSaveE>
    32cc:	3d b3       	in	r19, 0x1d	; 29
    32ce:	20 91 ef 09 	lds	r18, 0x09EF	; 0x8009ef <_ZN8SPIClass13interruptMaskE>
    32d2:	20 95       	com	r18
    32d4:	23 23       	and	r18, r19
    32d6:	2d bb       	out	0x1d, r18	; 29
    32d8:	4f bf       	out	0x3f, r20	; 63
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    32dc:	40 93 ee 09 	sts	0x09EE, r20	; 0x8009ee <_ZN8SPIClass13interruptSaveE>
    32e0:	8c bd       	out	0x2c, r24	; 44
    32e2:	9d bd       	out	0x2d, r25	; 45
    32e4:	08 95       	ret

000032e6 <_ZN8SPIClass8transferEh>:
    32e6:	8e bd       	out	0x2e, r24	; 46
    32e8:	00 00       	nop
    32ea:	0d b4       	in	r0, 0x2d	; 45
    32ec:	07 fe       	sbrs	r0, 7
    32ee:	fd cf       	rjmp	.-6      	; 0x32ea <_ZN8SPIClass8transferEh+0x4>
    32f0:	8e b5       	in	r24, 0x2e	; 46
    32f2:	08 95       	ret

000032f4 <_ZL6spiRecv>:
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	f7 cf       	rjmp	.-18     	; 0x32e6 <_ZN8SPIClass8transferEh>

000032f8 <_ZN7Sd2Card14chipSelectHighEv>:
    32f8:	61 e0       	ldi	r22, 0x01	; 1
    32fa:	fc 01       	movw	r30, r24
    32fc:	84 81       	ldd	r24, Z+4	; 0x04
    32fe:	3d d9       	rcall	.-3462   	; 0x257a <digitalWrite>
    3300:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZL20chip_select_asserted>
    3304:	88 23       	and	r24, r24
    3306:	31 f0       	breq	.+12     	; 0x3314 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    3308:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <_ZL20chip_select_asserted>
    330c:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <_ZN8SPIClass13interruptModeE>
    3310:	81 11       	cpse	r24, r1
    3312:	9d cf       	rjmp	.-198    	; 0x324e <_ZN8SPIClass14endTransactionEv.part.3>
    3314:	08 95       	ret

00003316 <_ZN7Sd2Card13chipSelectLowEv>:
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	ec 01       	movw	r28, r24
    331c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZL20chip_select_asserted>
    3320:	81 11       	cpse	r24, r1
    3322:	08 c0       	rjmp	.+16     	; 0x3334 <_ZN7Sd2Card13chipSelectLowEv+0x1e>
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <_ZL20chip_select_asserted>
    332a:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <_ZL8settings>
    332e:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <_ZL8settings+0x1>
    3332:	bf df       	rcall	.-130    	; 0x32b2 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	8c 81       	ldd	r24, Y+4	; 0x04
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1e c9       	rjmp	.-3524   	; 0x257a <digitalWrite>

0000333e <_ZN7Sd2Card7readEndEv>:
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	ec 01       	movw	r28, r24
    3344:	8e 81       	ldd	r24, Y+6	; 0x06
    3346:	88 23       	and	r24, r24
    3348:	79 f0       	breq	.+30     	; 0x3368 <_ZN7Sd2Card7readEndEv+0x2a>
    334a:	8f 81       	ldd	r24, Y+7	; 0x07
    334c:	98 85       	ldd	r25, Y+8	; 0x08
    334e:	9c 01       	movw	r18, r24
    3350:	2f 5f       	subi	r18, 0xFF	; 255
    3352:	3f 4f       	sbci	r19, 0xFF	; 255
    3354:	38 87       	std	Y+8, r19	; 0x08
    3356:	2f 83       	std	Y+7, r18	; 0x07
    3358:	82 30       	cpi	r24, 0x02	; 2
    335a:	92 40       	sbci	r25, 0x02	; 2
    335c:	10 f4       	brcc	.+4      	; 0x3362 <_ZN7Sd2Card7readEndEv+0x24>
    335e:	ca df       	rcall	.-108    	; 0x32f4 <_ZL6spiRecv>
    3360:	f4 cf       	rjmp	.-24     	; 0x334a <_ZN7Sd2Card7readEndEv+0xc>
    3362:	ce 01       	movw	r24, r28
    3364:	c9 df       	rcall	.-110    	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    3366:	1e 82       	std	Y+6, r1	; 0x06
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	08 95       	ret

0000336e <_ZN7Sd2Card10setSckRateEh>:
    336e:	0f 93       	push	r16
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	1f 92       	push	r1
    3376:	1f 92       	push	r1
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	67 30       	cpi	r22, 0x07	; 7
    337e:	28 f0       	brcs	.+10     	; 0x338a <_ZN7Sd2Card10setSckRateEh+0x1c>
    3380:	26 e1       	ldi	r18, 0x16	; 22
    3382:	fc 01       	movw	r30, r24
    3384:	25 83       	std	Z+5, r18	; 0x05
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	46 c0       	rjmp	.+140    	; 0x3416 <_ZN7Sd2Card10setSckRateEh+0xa8>
    338a:	62 30       	cpi	r22, 0x02	; 2
    338c:	f9 f0       	breq	.+62     	; 0x33cc <_ZN7Sd2Card10setSckRateEh+0x5e>
    338e:	58 f4       	brcc	.+22     	; 0x33a6 <_ZN7Sd2Card10setSckRateEh+0x38>
    3390:	66 23       	and	r22, r22
    3392:	a9 f0       	breq	.+42     	; 0x33be <_ZN7Sd2Card10setSckRateEh+0x50>
    3394:	61 30       	cpi	r22, 0x01	; 1
    3396:	79 f5       	brne	.+94     	; 0x33f6 <_ZN7Sd2Card10setSckRateEh+0x88>
    3398:	00 e0       	ldi	r16, 0x00	; 0
    339a:	21 e0       	ldi	r18, 0x01	; 1
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	59 e0       	ldi	r21, 0x09	; 9
    33a0:	6d e3       	ldi	r22, 0x3D	; 61
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	2e c0       	rjmp	.+92     	; 0x3402 <_ZN7Sd2Card10setSckRateEh+0x94>
    33a6:	64 30       	cpi	r22, 0x04	; 4
    33a8:	f9 f0       	breq	.+62     	; 0x33e8 <_ZN7Sd2Card10setSckRateEh+0x7a>
    33aa:	b8 f0       	brcs	.+46     	; 0x33da <_ZN7Sd2Card10setSckRateEh+0x6c>
    33ac:	65 30       	cpi	r22, 0x05	; 5
    33ae:	19 f5       	brne	.+70     	; 0x33f6 <_ZN7Sd2Card10setSckRateEh+0x88>
    33b0:	00 e0       	ldi	r16, 0x00	; 0
    33b2:	21 e0       	ldi	r18, 0x01	; 1
    33b4:	40 e9       	ldi	r20, 0x90	; 144
    33b6:	50 ed       	ldi	r21, 0xD0	; 208
    33b8:	63 e0       	ldi	r22, 0x03	; 3
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	22 c0       	rjmp	.+68     	; 0x3402 <_ZN7Sd2Card10setSckRateEh+0x94>
    33be:	00 e0       	ldi	r16, 0x00	; 0
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	40 e4       	ldi	r20, 0x40	; 64
    33c4:	58 e7       	ldi	r21, 0x78	; 120
    33c6:	6d e7       	ldi	r22, 0x7D	; 125
    33c8:	71 e0       	ldi	r23, 0x01	; 1
    33ca:	1b c0       	rjmp	.+54     	; 0x3402 <_ZN7Sd2Card10setSckRateEh+0x94>
    33cc:	00 e0       	ldi	r16, 0x00	; 0
    33ce:	21 e0       	ldi	r18, 0x01	; 1
    33d0:	40 e8       	ldi	r20, 0x80	; 128
    33d2:	54 e8       	ldi	r21, 0x84	; 132
    33d4:	6e e1       	ldi	r22, 0x1E	; 30
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	14 c0       	rjmp	.+40     	; 0x3402 <_ZN7Sd2Card10setSckRateEh+0x94>
    33da:	00 e0       	ldi	r16, 0x00	; 0
    33dc:	21 e0       	ldi	r18, 0x01	; 1
    33de:	40 e4       	ldi	r20, 0x40	; 64
    33e0:	52 e4       	ldi	r21, 0x42	; 66
    33e2:	6f e0       	ldi	r22, 0x0F	; 15
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	0d c0       	rjmp	.+26     	; 0x3402 <_ZN7Sd2Card10setSckRateEh+0x94>
    33e8:	00 e0       	ldi	r16, 0x00	; 0
    33ea:	21 e0       	ldi	r18, 0x01	; 1
    33ec:	40 e2       	ldi	r20, 0x20	; 32
    33ee:	51 ea       	ldi	r21, 0xA1	; 161
    33f0:	67 e0       	ldi	r22, 0x07	; 7
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	06 c0       	rjmp	.+12     	; 0x3402 <_ZN7Sd2Card10setSckRateEh+0x94>
    33f6:	00 e0       	ldi	r16, 0x00	; 0
    33f8:	21 e0       	ldi	r18, 0x01	; 1
    33fa:	48 e4       	ldi	r20, 0x48	; 72
    33fc:	58 ee       	ldi	r21, 0xE8	; 232
    33fe:	61 e0       	ldi	r22, 0x01	; 1
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	ce 01       	movw	r24, r28
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	30 df       	rcall	.-416    	; 0x3268 <_ZN11SPISettingsC1Emhh>
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <_ZL8settings+0x1>
    3410:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <_ZL8settings>
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	0f 91       	pop	r16
    3420:	08 95       	ret

00003422 <_ZN7Sd2Card11waitNotBusyEj>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	eb 01       	movw	r28, r22
    342c:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    3430:	8b 01       	movw	r16, r22
    3432:	60 df       	rcall	.-320    	; 0x32f4 <_ZL6spiRecv>
    3434:	8f 3f       	cpi	r24, 0xFF	; 255
    3436:	49 f0       	breq	.+18     	; 0x344a <_ZN7Sd2Card11waitNotBusyEj+0x28>
    3438:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    343c:	60 1b       	sub	r22, r16
    343e:	71 0b       	sbc	r23, r17
    3440:	6c 17       	cp	r22, r28
    3442:	7d 07       	cpc	r23, r29
    3444:	b0 f3       	brcs	.-20     	; 0x3432 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	01 c0       	rjmp	.+2      	; 0x344c <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	08 95       	ret

00003456 <_ZN7Sd2Card11cardCommandEhm>:
    3456:	8f 92       	push	r8
    3458:	9f 92       	push	r9
    345a:	af 92       	push	r10
    345c:	bf 92       	push	r11
    345e:	ff 92       	push	r15
    3460:	0f 93       	push	r16
    3462:	1f 93       	push	r17
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	ec 01       	movw	r28, r24
    346a:	f6 2e       	mov	r15, r22
    346c:	49 01       	movw	r8, r18
    346e:	5a 01       	movw	r10, r20
    3470:	66 df       	rcall	.-308    	; 0x333e <_ZN7Sd2Card7readEndEv>
    3472:	ce 01       	movw	r24, r28
    3474:	50 df       	rcall	.-352    	; 0x3316 <_ZN7Sd2Card13chipSelectLowEv>
    3476:	6c e2       	ldi	r22, 0x2C	; 44
    3478:	71 e0       	ldi	r23, 0x01	; 1
    347a:	ce 01       	movw	r24, r28
    347c:	d2 df       	rcall	.-92     	; 0x3422 <_ZN7Sd2Card11waitNotBusyEj>
    347e:	8f 2d       	mov	r24, r15
    3480:	80 64       	ori	r24, 0x40	; 64
    3482:	31 df       	rcall	.-414    	; 0x32e6 <_ZN8SPIClass8transferEh>
    3484:	08 e1       	ldi	r16, 0x18	; 24
    3486:	10 e0       	ldi	r17, 0x00	; 0
    3488:	d5 01       	movw	r26, r10
    348a:	c4 01       	movw	r24, r8
    348c:	00 2e       	mov	r0, r16
    348e:	04 c0       	rjmp	.+8      	; 0x3498 <_ZN7Sd2Card11cardCommandEhm+0x42>
    3490:	b6 95       	lsr	r27
    3492:	a7 95       	ror	r26
    3494:	97 95       	ror	r25
    3496:	87 95       	ror	r24
    3498:	0a 94       	dec	r0
    349a:	d2 f7       	brpl	.-12     	; 0x3490 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    349c:	24 df       	rcall	.-440    	; 0x32e6 <_ZN8SPIClass8transferEh>
    349e:	08 50       	subi	r16, 0x08	; 8
    34a0:	11 09       	sbc	r17, r1
    34a2:	08 3f       	cpi	r16, 0xF8	; 248
    34a4:	8f ef       	ldi	r24, 0xFF	; 255
    34a6:	18 07       	cpc	r17, r24
    34a8:	79 f7       	brne	.-34     	; 0x3488 <_ZN7Sd2Card11cardCommandEhm+0x32>
    34aa:	ff 20       	and	r15, r15
    34ac:	29 f0       	breq	.+10     	; 0x34b8 <_ZN7Sd2Card11cardCommandEhm+0x62>
    34ae:	88 e0       	ldi	r24, 0x08	; 8
    34b0:	f8 12       	cpse	r15, r24
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <_ZN7Sd2Card11cardCommandEhm+0x66>
    34b4:	87 e8       	ldi	r24, 0x87	; 135
    34b6:	03 c0       	rjmp	.+6      	; 0x34be <_ZN7Sd2Card11cardCommandEhm+0x68>
    34b8:	85 e9       	ldi	r24, 0x95	; 149
    34ba:	01 c0       	rjmp	.+2      	; 0x34be <_ZN7Sd2Card11cardCommandEhm+0x68>
    34bc:	8f ef       	ldi	r24, 0xFF	; 255
    34be:	13 df       	rcall	.-474    	; 0x32e6 <_ZN8SPIClass8transferEh>
    34c0:	10 e0       	ldi	r17, 0x00	; 0
    34c2:	18 df       	rcall	.-464    	; 0x32f4 <_ZL6spiRecv>
    34c4:	8a 87       	std	Y+10, r24	; 0x0a
    34c6:	87 ff       	sbrs	r24, 7
    34c8:	04 c0       	rjmp	.+8      	; 0x34d2 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    34ca:	1f 3f       	cpi	r17, 0xFF	; 255
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    34ce:	1f 5f       	subi	r17, 0xFF	; 255
    34d0:	f8 cf       	rjmp	.-16     	; 0x34c2 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    34d2:	df 91       	pop	r29
    34d4:	cf 91       	pop	r28
    34d6:	1f 91       	pop	r17
    34d8:	0f 91       	pop	r16
    34da:	ff 90       	pop	r15
    34dc:	bf 90       	pop	r11
    34de:	af 90       	pop	r10
    34e0:	9f 90       	pop	r9
    34e2:	8f 90       	pop	r8
    34e4:	08 95       	ret

000034e6 <_ZN7Sd2Card4initEhh>:
    34e6:	7f 92       	push	r7
    34e8:	8f 92       	push	r8
    34ea:	9f 92       	push	r9
    34ec:	af 92       	push	r10
    34ee:	bf 92       	push	r11
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	1f 92       	push	r1
    3502:	1f 92       	push	r1
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	7c 01       	movw	r14, r24
    350a:	76 2e       	mov	r7, r22
    350c:	fc 01       	movw	r30, r24
    350e:	13 86       	std	Z+11, r1	; 0x0b
    3510:	11 86       	std	Z+9, r1	; 0x09
    3512:	16 82       	std	Z+6, r1	; 0x06
    3514:	15 82       	std	Z+5, r1	; 0x05
    3516:	44 83       	std	Z+4, r20	; 0x04
    3518:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    351c:	6b 01       	movw	r12, r22
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	f7 01       	movw	r30, r14
    3522:	84 81       	ldd	r24, Z+4	; 0x04
    3524:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
    3528:	61 e0       	ldi	r22, 0x01	; 1
    352a:	f7 01       	movw	r30, r14
    352c:	84 81       	ldd	r24, Z+4	; 0x04
    352e:	25 d8       	rcall	.-4022   	; 0x257a <digitalWrite>
    3530:	0e 94 cf 2a 	call	0x559e	; 0x559e <_ZN8SPIClass5beginEv>
    3534:	00 e0       	ldi	r16, 0x00	; 0
    3536:	21 e0       	ldi	r18, 0x01	; 1
    3538:	40 e9       	ldi	r20, 0x90	; 144
    353a:	50 ed       	ldi	r21, 0xD0	; 208
    353c:	63 e0       	ldi	r22, 0x03	; 3
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	ce 01       	movw	r24, r28
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	91 de       	rcall	.-734    	; 0x3268 <_ZN11SPISettingsC1Emhh>
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <_ZL8settings+0x1>
    354e:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <_ZL8settings>
    3552:	af de       	rcall	.-674    	; 0x32b2 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3554:	1a e0       	ldi	r17, 0x0A	; 10
    3556:	8f ef       	ldi	r24, 0xFF	; 255
    3558:	c6 de       	rcall	.-628    	; 0x32e6 <_ZN8SPIClass8transferEh>
    355a:	11 50       	subi	r17, 0x01	; 1
    355c:	e1 f7       	brne	.-8      	; 0x3556 <_ZN7Sd2Card4initEhh+0x70>
    355e:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <_ZN8SPIClass13interruptModeE>
    3562:	81 11       	cpse	r24, r1
    3564:	74 de       	rcall	.-792    	; 0x324e <_ZN8SPIClass14endTransactionEv.part.3>
    3566:	c7 01       	movw	r24, r14
    3568:	d6 de       	rcall	.-596    	; 0x3316 <_ZN7Sd2Card13chipSelectLowEv>
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	a9 01       	movw	r20, r18
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	c7 01       	movw	r24, r14
    3574:	70 df       	rcall	.-288    	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    3576:	08 2f       	mov	r16, r24
    3578:	f7 01       	movw	r30, r14
    357a:	82 87       	std	Z+10, r24	; 0x0a
    357c:	81 30       	cpi	r24, 0x01	; 1
    357e:	49 f0       	breq	.+18     	; 0x3592 <_ZN7Sd2Card4initEhh+0xac>
    3580:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    3584:	6c 19       	sub	r22, r12
    3586:	7d 09       	sbc	r23, r13
    3588:	61 3d       	cpi	r22, 0xD1	; 209
    358a:	77 40       	sbci	r23, 0x07	; 7
    358c:	70 f3       	brcs	.-36     	; 0x356a <_ZN7Sd2Card4initEhh+0x84>
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	4b c0       	rjmp	.+150    	; 0x3628 <_ZN7Sd2Card4initEhh+0x142>
    3592:	2a ea       	ldi	r18, 0xAA	; 170
    3594:	31 e0       	ldi	r19, 0x01	; 1
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	68 e0       	ldi	r22, 0x08	; 8
    359c:	c7 01       	movw	r24, r14
    359e:	5b df       	rcall	.-330    	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    35a0:	82 ff       	sbrs	r24, 2
    35a2:	03 c0       	rjmp	.+6      	; 0x35aa <_ZN7Sd2Card4initEhh+0xc4>
    35a4:	f7 01       	movw	r30, r14
    35a6:	03 87       	std	Z+11, r16	; 0x0b
    35a8:	0d c0       	rjmp	.+26     	; 0x35c4 <_ZN7Sd2Card4initEhh+0xde>
    35aa:	04 e0       	ldi	r16, 0x04	; 4
    35ac:	a3 de       	rcall	.-698    	; 0x32f4 <_ZL6spiRecv>
    35ae:	f7 01       	movw	r30, r14
    35b0:	82 87       	std	Z+10, r24	; 0x0a
    35b2:	01 50       	subi	r16, 0x01	; 1
    35b4:	d9 f7       	brne	.-10     	; 0x35ac <_ZN7Sd2Card4initEhh+0xc6>
    35b6:	8a 3a       	cpi	r24, 0xAA	; 170
    35b8:	11 f0       	breq	.+4      	; 0x35be <_ZN7Sd2Card4initEhh+0xd8>
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	36 c0       	rjmp	.+108    	; 0x362a <_ZN7Sd2Card4initEhh+0x144>
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	f7 01       	movw	r30, r14
    35c2:	83 87       	std	Z+11, r24	; 0x0b
    35c4:	f7 01       	movw	r30, r14
    35c6:	83 85       	ldd	r24, Z+11	; 0x0b
    35c8:	82 30       	cpi	r24, 0x02	; 2
    35ca:	21 f0       	breq	.+8      	; 0x35d4 <_ZN7Sd2Card4initEhh+0xee>
    35cc:	81 2c       	mov	r8, r1
    35ce:	91 2c       	mov	r9, r1
    35d0:	54 01       	movw	r10, r8
    35d2:	05 c0       	rjmp	.+10     	; 0x35de <_ZN7Sd2Card4initEhh+0xf8>
    35d4:	81 2c       	mov	r8, r1
    35d6:	91 2c       	mov	r9, r1
    35d8:	a1 2c       	mov	r10, r1
    35da:	80 e4       	ldi	r24, 0x40	; 64
    35dc:	b8 2e       	mov	r11, r24
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	a9 01       	movw	r20, r18
    35e4:	67 e3       	ldi	r22, 0x37	; 55
    35e6:	c7 01       	movw	r24, r14
    35e8:	36 df       	rcall	.-404    	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    35ea:	a5 01       	movw	r20, r10
    35ec:	94 01       	movw	r18, r8
    35ee:	69 e2       	ldi	r22, 0x29	; 41
    35f0:	c7 01       	movw	r24, r14
    35f2:	31 df       	rcall	.-414    	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    35f4:	f7 01       	movw	r30, r14
    35f6:	82 87       	std	Z+10, r24	; 0x0a
    35f8:	88 23       	and	r24, r24
    35fa:	49 f0       	breq	.+18     	; 0x360e <_ZN7Sd2Card4initEhh+0x128>
    35fc:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    3600:	6c 19       	sub	r22, r12
    3602:	7d 09       	sbc	r23, r13
    3604:	61 3d       	cpi	r22, 0xD1	; 209
    3606:	77 40       	sbci	r23, 0x07	; 7
    3608:	50 f3       	brcs	.-44     	; 0x35de <_ZN7Sd2Card4initEhh+0xf8>
    360a:	88 e0       	ldi	r24, 0x08	; 8
    360c:	0d c0       	rjmp	.+26     	; 0x3628 <_ZN7Sd2Card4initEhh+0x142>
    360e:	f7 01       	movw	r30, r14
    3610:	83 85       	ldd	r24, Z+11	; 0x0b
    3612:	82 30       	cpi	r24, 0x02	; 2
    3614:	c1 f4       	brne	.+48     	; 0x3646 <_ZN7Sd2Card4initEhh+0x160>
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	a9 01       	movw	r20, r18
    361c:	6a e3       	ldi	r22, 0x3A	; 58
    361e:	c7 01       	movw	r24, r14
    3620:	1a df       	rcall	.-460    	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    3622:	88 23       	and	r24, r24
    3624:	31 f0       	breq	.+12     	; 0x3632 <_ZN7Sd2Card4initEhh+0x14c>
    3626:	86 e0       	ldi	r24, 0x06	; 6
    3628:	f7 01       	movw	r30, r14
    362a:	85 83       	std	Z+5, r24	; 0x05
    362c:	c7 01       	movw	r24, r14
    362e:	64 de       	rcall	.-824    	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    3630:	10 c0       	rjmp	.+32     	; 0x3652 <_ZN7Sd2Card4initEhh+0x16c>
    3632:	60 de       	rcall	.-832    	; 0x32f4 <_ZL6spiRecv>
    3634:	80 7c       	andi	r24, 0xC0	; 192
    3636:	80 3c       	cpi	r24, 0xC0	; 192
    3638:	19 f4       	brne	.+6      	; 0x3640 <_ZN7Sd2Card4initEhh+0x15a>
    363a:	83 e0       	ldi	r24, 0x03	; 3
    363c:	f7 01       	movw	r30, r14
    363e:	83 87       	std	Z+11, r24	; 0x0b
    3640:	59 de       	rcall	.-846    	; 0x32f4 <_ZL6spiRecv>
    3642:	58 de       	rcall	.-848    	; 0x32f4 <_ZL6spiRecv>
    3644:	57 de       	rcall	.-850    	; 0x32f4 <_ZL6spiRecv>
    3646:	c7 01       	movw	r24, r14
    3648:	57 de       	rcall	.-850    	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    364a:	67 2d       	mov	r22, r7
    364c:	c7 01       	movw	r24, r14
    364e:	8f de       	rcall	.-738    	; 0x336e <_ZN7Sd2Card10setSckRateEh>
    3650:	18 2f       	mov	r17, r24
    3652:	81 2f       	mov	r24, r17
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	bf 90       	pop	r11
    366a:	af 90       	pop	r10
    366c:	9f 90       	pop	r9
    366e:	8f 90       	pop	r8
    3670:	7f 90       	pop	r7
    3672:	08 95       	ret

00003674 <_ZN7Sd2Card14waitStartBlockEv>:
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	ec 01       	movw	r28, r24
    367e:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    3682:	8b 01       	movw	r16, r22
    3684:	37 de       	rcall	.-914    	; 0x32f4 <_ZL6spiRecv>
    3686:	8a 87       	std	Y+10, r24	; 0x0a
    3688:	8f 3f       	cpi	r24, 0xFF	; 255
    368a:	49 f4       	brne	.+18     	; 0x369e <_ZN7Sd2Card14waitStartBlockEv+0x2a>
    368c:	0e 94 2e 11 	call	0x225c	; 0x225c <millis>
    3690:	60 1b       	sub	r22, r16
    3692:	71 0b       	sbc	r23, r17
    3694:	6d 32       	cpi	r22, 0x2D	; 45
    3696:	71 40       	sbci	r23, 0x01	; 1
    3698:	a8 f3       	brcs	.-22     	; 0x3684 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    369a:	8f e0       	ldi	r24, 0x0F	; 15
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <_ZN7Sd2Card14waitStartBlockEv+0x30>
    369e:	8e 3f       	cpi	r24, 0xFE	; 254
    36a0:	31 f0       	breq	.+12     	; 0x36ae <_ZN7Sd2Card14waitStartBlockEv+0x3a>
    36a2:	8d e0       	ldi	r24, 0x0D	; 13
    36a4:	8d 83       	std	Y+5, r24	; 0x05
    36a6:	ce 01       	movw	r24, r28
    36a8:	27 de       	rcall	.-946    	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	01 c0       	rjmp	.+2      	; 0x36b0 <_ZN7Sd2Card14waitStartBlockEv+0x3c>
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	08 95       	ret

000036ba <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    36ba:	cf 92       	push	r12
    36bc:	df 92       	push	r13
    36be:	ef 92       	push	r14
    36c0:	ff 92       	push	r15
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
    36cc:	69 01       	movw	r12, r18
    36ce:	c8 01       	movw	r24, r16
    36d0:	82 0f       	add	r24, r18
    36d2:	93 1f       	adc	r25, r19
    36d4:	81 30       	cpi	r24, 0x01	; 1
    36d6:	92 40       	sbci	r25, 0x02	; 2
    36d8:	08 f0       	brcs	.+2      	; 0x36dc <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    36da:	57 c0       	rjmp	.+174    	; 0x378a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    36dc:	8e 81       	ldd	r24, Y+6	; 0x06
    36de:	88 23       	and	r24, r24
    36e0:	71 f0       	breq	.+28     	; 0x36fe <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    36e2:	88 81       	ld	r24, Y
    36e4:	99 81       	ldd	r25, Y+1	; 0x01
    36e6:	aa 81       	ldd	r26, Y+2	; 0x02
    36e8:	bb 81       	ldd	r27, Y+3	; 0x03
    36ea:	84 17       	cp	r24, r20
    36ec:	95 07       	cpc	r25, r21
    36ee:	a6 07       	cpc	r26, r22
    36f0:	b7 07       	cpc	r27, r23
    36f2:	29 f4       	brne	.+10     	; 0x36fe <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    36f4:	8f 81       	ldd	r24, Y+7	; 0x07
    36f6:	98 85       	ldd	r25, Y+8	; 0x08
    36f8:	c8 16       	cp	r12, r24
    36fa:	d9 06       	cpc	r13, r25
    36fc:	00 f5       	brcc	.+64     	; 0x373e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    36fe:	48 83       	st	Y, r20
    3700:	59 83       	std	Y+1, r21	; 0x01
    3702:	6a 83       	std	Y+2, r22	; 0x02
    3704:	7b 83       	std	Y+3, r23	; 0x03
    3706:	8b 85       	ldd	r24, Y+11	; 0x0b
    3708:	83 30       	cpi	r24, 0x03	; 3
    370a:	39 f0       	breq	.+14     	; 0x371a <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    370c:	89 e0       	ldi	r24, 0x09	; 9
    370e:	44 0f       	add	r20, r20
    3710:	55 1f       	adc	r21, r21
    3712:	66 1f       	adc	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	8a 95       	dec	r24
    3718:	d1 f7       	brne	.-12     	; 0x370e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    371a:	9a 01       	movw	r18, r20
    371c:	ab 01       	movw	r20, r22
    371e:	61 e1       	ldi	r22, 0x11	; 17
    3720:	ce 01       	movw	r24, r28
    3722:	99 de       	rcall	.-718    	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    3724:	88 23       	and	r24, r24
    3726:	19 f0       	breq	.+6      	; 0x372e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    3728:	83 e0       	ldi	r24, 0x03	; 3
    372a:	8d 83       	std	Y+5, r24	; 0x05
    372c:	2e c0       	rjmp	.+92     	; 0x378a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    372e:	ce 01       	movw	r24, r28
    3730:	a1 df       	rcall	.-190    	; 0x3674 <_ZN7Sd2Card14waitStartBlockEv>
    3732:	88 23       	and	r24, r24
    3734:	51 f1       	breq	.+84     	; 0x378a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    3736:	18 86       	std	Y+8, r1	; 0x08
    3738:	1f 82       	std	Y+7, r1	; 0x07
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	8e 83       	std	Y+6, r24	; 0x06
    373e:	8f 81       	ldd	r24, Y+7	; 0x07
    3740:	98 85       	ldd	r25, Y+8	; 0x08
    3742:	8c 15       	cp	r24, r12
    3744:	9d 05       	cpc	r25, r13
    3746:	38 f4       	brcc	.+14     	; 0x3756 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    3748:	d5 dd       	rcall	.-1110   	; 0x32f4 <_ZL6spiRecv>
    374a:	8f 81       	ldd	r24, Y+7	; 0x07
    374c:	98 85       	ldd	r25, Y+8	; 0x08
    374e:	01 96       	adiw	r24, 0x01	; 1
    3750:	98 87       	std	Y+8, r25	; 0x08
    3752:	8f 83       	std	Y+7, r24	; 0x07
    3754:	f4 cf       	rjmp	.-24     	; 0x373e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    3756:	67 01       	movw	r12, r14
    3758:	e0 0e       	add	r14, r16
    375a:	f1 1e       	adc	r15, r17
    375c:	ce 14       	cp	r12, r14
    375e:	df 04       	cpc	r13, r15
    3760:	29 f0       	breq	.+10     	; 0x376c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    3762:	c8 dd       	rcall	.-1136   	; 0x32f4 <_ZL6spiRecv>
    3764:	f6 01       	movw	r30, r12
    3766:	81 93       	st	Z+, r24
    3768:	6f 01       	movw	r12, r30
    376a:	f8 cf       	rjmp	.-16     	; 0x375c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    376c:	8f 81       	ldd	r24, Y+7	; 0x07
    376e:	98 85       	ldd	r25, Y+8	; 0x08
    3770:	08 0f       	add	r16, r24
    3772:	19 1f       	adc	r17, r25
    3774:	18 87       	std	Y+8, r17	; 0x08
    3776:	0f 83       	std	Y+7, r16	; 0x07
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	88 23       	and	r24, r24
    377c:	19 f0       	breq	.+6      	; 0x3784 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    377e:	01 15       	cp	r16, r1
    3780:	12 40       	sbci	r17, 0x02	; 2
    3782:	38 f0       	brcs	.+14     	; 0x3792 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    3784:	ce 01       	movw	r24, r28
    3786:	db dd       	rcall	.-1098   	; 0x333e <_ZN7Sd2Card7readEndEv>
    3788:	04 c0       	rjmp	.+8      	; 0x3792 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    378a:	ce 01       	movw	r24, r28
    378c:	b5 dd       	rcall	.-1174   	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	ff 90       	pop	r15
    379e:	ef 90       	pop	r14
    37a0:	df 90       	pop	r13
    37a2:	cf 90       	pop	r12
    37a4:	08 95       	ret

000037a6 <_ZN7Sd2Card8readDataEmjjPh>:
    37a6:	ef 92       	push	r14
    37a8:	ff 92       	push	r15
    37aa:	0f 93       	push	r16
    37ac:	1f 93       	push	r17
    37ae:	01 15       	cp	r16, r1
    37b0:	11 05       	cpc	r17, r1
    37b2:	11 f0       	breq	.+4      	; 0x37b8 <_ZN7Sd2Card8readDataEmjjPh+0x12>
    37b4:	82 df       	rcall	.-252    	; 0x36ba <_ZN7Sd2Card8readDataEmjjPh.part.6>
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <_ZN7Sd2Card8readDataEmjjPh+0x14>
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	ff 90       	pop	r15
    37c0:	ef 90       	pop	r14
    37c2:	08 95       	ret

000037c4 <_ZN7Sd2Card9readBlockEmPh>:
    37c4:	ef 92       	push	r14
    37c6:	ff 92       	push	r15
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
    37cc:	79 01       	movw	r14, r18
    37ce:	00 e0       	ldi	r16, 0x00	; 0
    37d0:	12 e0       	ldi	r17, 0x02	; 2
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	71 df       	rcall	.-286    	; 0x36ba <_ZN7Sd2Card8readDataEmjjPh.part.6>
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	08 95       	ret

000037e2 <_ZN7Sd2Card9writeDataEhPKh>:
    37e2:	ef 92       	push	r14
    37e4:	ff 92       	push	r15
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	8c 01       	movw	r16, r24
    37f0:	86 2f       	mov	r24, r22
    37f2:	7a 01       	movw	r14, r20
    37f4:	78 dd       	rcall	.-1296   	; 0x32e6 <_ZN8SPIClass8transferEh>
    37f6:	e7 01       	movw	r28, r14
    37f8:	8e ef       	ldi	r24, 0xFE	; 254
    37fa:	f8 1a       	sub	r15, r24
    37fc:	89 91       	ld	r24, Y+
    37fe:	73 dd       	rcall	.-1306   	; 0x32e6 <_ZN8SPIClass8transferEh>
    3800:	ce 15       	cp	r28, r14
    3802:	df 05       	cpc	r29, r15
    3804:	d9 f7       	brne	.-10     	; 0x37fc <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    3806:	8f ef       	ldi	r24, 0xFF	; 255
    3808:	6e dd       	rcall	.-1316   	; 0x32e6 <_ZN8SPIClass8transferEh>
    380a:	8f ef       	ldi	r24, 0xFF	; 255
    380c:	6c dd       	rcall	.-1320   	; 0x32e6 <_ZN8SPIClass8transferEh>
    380e:	72 dd       	rcall	.-1308   	; 0x32f4 <_ZL6spiRecv>
    3810:	f8 01       	movw	r30, r16
    3812:	82 87       	std	Z+10, r24	; 0x0a
    3814:	8f 71       	andi	r24, 0x1F	; 31
    3816:	85 30       	cpi	r24, 0x05	; 5
    3818:	31 f0       	breq	.+12     	; 0x3826 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    381a:	81 e1       	ldi	r24, 0x11	; 17
    381c:	85 83       	std	Z+5, r24	; 0x05
    381e:	c8 01       	movw	r24, r16
    3820:	6b dd       	rcall	.-1322   	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	08 95       	ret

00003836 <_ZN7Sd2Card10writeBlockEmPKh>:
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	ec 01       	movw	r28, r24
    3840:	89 01       	movw	r16, r18
    3842:	41 15       	cp	r20, r1
    3844:	51 05       	cpc	r21, r1
    3846:	61 05       	cpc	r22, r1
    3848:	71 05       	cpc	r23, r1
    384a:	11 f4       	brne	.+4      	; 0x3850 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    384c:	82 e1       	ldi	r24, 0x12	; 18
    384e:	2d c0       	rjmp	.+90     	; 0x38aa <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    3850:	8b 85       	ldd	r24, Y+11	; 0x0b
    3852:	83 30       	cpi	r24, 0x03	; 3
    3854:	39 f0       	breq	.+14     	; 0x3864 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    3856:	89 e0       	ldi	r24, 0x09	; 9
    3858:	44 0f       	add	r20, r20
    385a:	55 1f       	adc	r21, r21
    385c:	66 1f       	adc	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	8a 95       	dec	r24
    3862:	d1 f7       	brne	.-12     	; 0x3858 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    3864:	9a 01       	movw	r18, r20
    3866:	ab 01       	movw	r20, r22
    3868:	68 e1       	ldi	r22, 0x18	; 24
    386a:	ce 01       	movw	r24, r28
    386c:	f4 dd       	rcall	.-1048   	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    386e:	88 23       	and	r24, r24
    3870:	11 f0       	breq	.+4      	; 0x3876 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    3872:	84 e0       	ldi	r24, 0x04	; 4
    3874:	1a c0       	rjmp	.+52     	; 0x38aa <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    3876:	a8 01       	movw	r20, r16
    3878:	6e ef       	ldi	r22, 0xFE	; 254
    387a:	ce 01       	movw	r24, r28
    387c:	b2 df       	rcall	.-156    	; 0x37e2 <_ZN7Sd2Card9writeDataEhPKh>
    387e:	88 23       	and	r24, r24
    3880:	a9 f0       	breq	.+42     	; 0x38ac <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    3882:	68 e5       	ldi	r22, 0x58	; 88
    3884:	72 e0       	ldi	r23, 0x02	; 2
    3886:	ce 01       	movw	r24, r28
    3888:	cc dd       	rcall	.-1128   	; 0x3422 <_ZN7Sd2Card11waitNotBusyEj>
    388a:	81 11       	cpse	r24, r1
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    388e:	85 e1       	ldi	r24, 0x15	; 21
    3890:	0c c0       	rjmp	.+24     	; 0x38aa <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	a9 01       	movw	r20, r18
    3898:	6d e0       	ldi	r22, 0x0D	; 13
    389a:	ce 01       	movw	r24, r28
    389c:	dc dd       	rcall	.-1096   	; 0x3456 <_ZN7Sd2Card11cardCommandEhm>
    389e:	81 11       	cpse	r24, r1
    38a0:	03 c0       	rjmp	.+6      	; 0x38a8 <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    38a2:	28 dd       	rcall	.-1456   	; 0x32f4 <_ZL6spiRecv>
    38a4:	88 23       	and	r24, r24
    38a6:	31 f0       	breq	.+12     	; 0x38b4 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    38a8:	84 e1       	ldi	r24, 0x14	; 20
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	ce 01       	movw	r24, r28
    38ae:	24 dd       	rcall	.-1464   	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	03 c0       	rjmp	.+6      	; 0x38ba <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    38b4:	ce 01       	movw	r24, r28
    38b6:	20 dd       	rcall	.-1472   	; 0x32f8 <_ZN7Sd2Card14chipSelectHighEv>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	1f 91       	pop	r17
    38c0:	0f 91       	pop	r16
    38c2:	08 95       	ret

000038c4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    38c4:	ee e4       	ldi	r30, 0x4E	; 78
    38c6:	f7 e0       	ldi	r31, 0x07	; 7
    38c8:	80 e5       	ldi	r24, 0x50	; 80
    38ca:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    38cc:	11 82       	std	Z+1, r1	; 0x01
    38ce:	08 95       	ret

000038d0 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	ec 01       	movw	r28, r24
    38d6:	9c 01       	movw	r18, r24
    38d8:	2a 5f       	subi	r18, 0xFA	; 250
    38da:	3f 4f       	sbci	r19, 0xFF	; 255
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e8:	0e 94 80 25 	call	0x4b00	; 0x4b00 <_ZN8SdVolume15allocContiguousEmPm>
    38ec:	88 23       	and	r24, r24
    38ee:	a1 f0       	breq	.+40     	; 0x3918 <_ZN6SdFile10addClusterEv+0x48>
    38f0:	8f 89       	ldd	r24, Y+23	; 0x17
    38f2:	98 8d       	ldd	r25, Y+24	; 0x18
    38f4:	a9 8d       	ldd	r26, Y+25	; 0x19
    38f6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    38f8:	89 2b       	or	r24, r25
    38fa:	8a 2b       	or	r24, r26
    38fc:	8b 2b       	or	r24, r27
    38fe:	59 f4       	brne	.+22     	; 0x3916 <_ZN6SdFile10addClusterEv+0x46>
    3900:	8e 81       	ldd	r24, Y+6	; 0x06
    3902:	9f 81       	ldd	r25, Y+7	; 0x07
    3904:	a8 85       	ldd	r26, Y+8	; 0x08
    3906:	b9 85       	ldd	r27, Y+9	; 0x09
    3908:	8f 8b       	std	Y+23, r24	; 0x17
    390a:	98 8f       	std	Y+24, r25	; 0x18
    390c:	a9 8f       	std	Y+25, r26	; 0x19
    390e:	ba 8f       	std	Y+26, r27	; 0x1a
    3910:	8c 81       	ldd	r24, Y+4	; 0x04
    3912:	80 68       	ori	r24, 0x80	; 128
    3914:	8c 83       	std	Y+4, r24	; 0x04
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	08 95       	ret

0000391e <_ZN6SdFile13addDirClusterEv>:
    391e:	cf 92       	push	r12
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	1f 93       	push	r17
    3928:	cf 93       	push	r28
    392a:	df 93       	push	r29
    392c:	ec 01       	movw	r28, r24
    392e:	d0 df       	rcall	.-96     	; 0x38d0 <_ZN6SdFile10addClusterEv>
    3930:	81 11       	cpse	r24, r1
    3932:	02 c0       	rjmp	.+4      	; 0x3938 <_ZN6SdFile13addDirClusterEv+0x1a>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	49 c0       	rjmp	.+146    	; 0x39ca <_ZN6SdFile13addDirClusterEv+0xac>
    3938:	eb 8d       	ldd	r30, Y+27	; 0x1b
    393a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    393c:	ce 80       	ldd	r12, Y+6	; 0x06
    393e:	df 80       	ldd	r13, Y+7	; 0x07
    3940:	e8 84       	ldd	r14, Y+8	; 0x08
    3942:	f9 84       	ldd	r15, Y+9	; 0x09
    3944:	82 e0       	ldi	r24, 0x02	; 2
    3946:	c8 1a       	sub	r12, r24
    3948:	d1 08       	sbc	r13, r1
    394a:	e1 08       	sbc	r14, r1
    394c:	f1 08       	sbc	r15, r1
    394e:	05 84       	ldd	r0, Z+13	; 0x0d
    3950:	04 c0       	rjmp	.+8      	; 0x395a <_ZN6SdFile13addDirClusterEv+0x3c>
    3952:	cc 0c       	add	r12, r12
    3954:	dd 1c       	adc	r13, r13
    3956:	ee 1c       	adc	r14, r14
    3958:	ff 1c       	adc	r15, r15
    395a:	0a 94       	dec	r0
    395c:	d2 f7       	brpl	.-12     	; 0x3952 <_ZN6SdFile13addDirClusterEv+0x34>
    395e:	86 85       	ldd	r24, Z+14	; 0x0e
    3960:	97 85       	ldd	r25, Z+15	; 0x0f
    3962:	a0 89       	ldd	r26, Z+16	; 0x10
    3964:	b1 89       	ldd	r27, Z+17	; 0x11
    3966:	c8 0e       	add	r12, r24
    3968:	d9 1e       	adc	r13, r25
    396a:	ea 1e       	adc	r14, r26
    396c:	fb 1e       	adc	r15, r27
    396e:	14 81       	ldd	r17, Z+4	; 0x04
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	c8 1a       	sub	r12, r24
    3974:	d1 08       	sbc	r13, r1
    3976:	e1 08       	sbc	r14, r1
    3978:	f1 08       	sbc	r15, r1
    397a:	11 23       	and	r17, r17
    397c:	59 f0       	breq	.+22     	; 0x3994 <_ZN6SdFile13addDirClusterEv+0x76>
    397e:	c7 01       	movw	r24, r14
    3980:	b6 01       	movw	r22, r12
    3982:	61 0f       	add	r22, r17
    3984:	71 1d       	adc	r23, r1
    3986:	81 1d       	adc	r24, r1
    3988:	91 1d       	adc	r25, r1
    398a:	0d d7       	rcall	.+3610   	; 0x47a6 <_ZN8SdVolume14cacheZeroBlockEm>
    398c:	88 23       	and	r24, r24
    398e:	91 f2       	breq	.-92     	; 0x3934 <_ZN6SdFile13addDirClusterEv+0x16>
    3990:	11 50       	subi	r17, 0x01	; 1
    3992:	f3 cf       	rjmp	.-26     	; 0x397a <_ZN6SdFile13addDirClusterEv+0x5c>
    3994:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3996:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	92 e0       	ldi	r25, 0x02	; 2
    399c:	a0 e0       	ldi	r26, 0x00	; 0
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	05 84       	ldd	r0, Z+13	; 0x0d
    39a2:	04 c0       	rjmp	.+8      	; 0x39ac <_ZN6SdFile13addDirClusterEv+0x8e>
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	aa 1f       	adc	r26, r26
    39aa:	bb 1f       	adc	r27, r27
    39ac:	0a 94       	dec	r0
    39ae:	d2 f7       	brpl	.-12     	; 0x39a4 <_ZN6SdFile13addDirClusterEv+0x86>
    39b0:	4b 89       	ldd	r20, Y+19	; 0x13
    39b2:	5c 89       	ldd	r21, Y+20	; 0x14
    39b4:	6d 89       	ldd	r22, Y+21	; 0x15
    39b6:	7e 89       	ldd	r23, Y+22	; 0x16
    39b8:	84 0f       	add	r24, r20
    39ba:	95 1f       	adc	r25, r21
    39bc:	a6 1f       	adc	r26, r22
    39be:	b7 1f       	adc	r27, r23
    39c0:	8b 8b       	std	Y+19, r24	; 0x13
    39c2:	9c 8b       	std	Y+20, r25	; 0x14
    39c4:	ad 8b       	std	Y+21, r26	; 0x15
    39c6:	be 8b       	std	Y+22, r27	; 0x16
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	1f 91       	pop	r17
    39d0:	ff 90       	pop	r15
    39d2:	ef 90       	pop	r14
    39d4:	df 90       	pop	r13
    39d6:	cf 90       	pop	r12
    39d8:	08 95       	ret

000039da <_ZN6SdFile13cacheDirEntryEh>:
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	ec 01       	movw	r28, r24
    39e0:	46 2f       	mov	r20, r22
    39e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    39e4:	7f 85       	ldd	r23, Y+15	; 0x0f
    39e6:	88 89       	ldd	r24, Y+16	; 0x10
    39e8:	99 89       	ldd	r25, Y+17	; 0x11
    39ea:	a4 d6       	rcall	.+3400   	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    39ec:	88 23       	and	r24, r24
    39ee:	41 f0       	breq	.+16     	; 0x3a00 <_ZN6SdFile13cacheDirEntryEh+0x26>
    39f0:	8a 89       	ldd	r24, Y+18	; 0x12
    39f2:	20 e2       	ldi	r18, 0x20	; 32
    39f4:	82 9f       	mul	r24, r18
    39f6:	c0 01       	movw	r24, r0
    39f8:	11 24       	eor	r1, r1
    39fa:	87 5a       	subi	r24, 0xA7	; 167
    39fc:	98 4f       	sbci	r25, 0xF8	; 248
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	08 95       	ret

00003a0a <_ZN6SdFile10make83NameEPKcPh>:
    3a0a:	fb 01       	movw	r30, r22
    3a0c:	9b 01       	movw	r18, r22
    3a0e:	25 5f       	subi	r18, 0xF5	; 245
    3a10:	3f 4f       	sbci	r19, 0xFF	; 255
    3a12:	40 e2       	ldi	r20, 0x20	; 32
    3a14:	41 93       	st	Z+, r20
    3a16:	e2 17       	cp	r30, r18
    3a18:	f3 07       	cpc	r31, r19
    3a1a:	e1 f7       	brne	.-8      	; 0x3a14 <_ZN6SdFile10make83NameEPKcPh+0xa>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	27 e0       	ldi	r18, 0x07	; 7
    3a22:	8d 91       	ld	r24, X+
    3a24:	88 23       	and	r24, r24
    3a26:	19 f1       	breq	.+70     	; 0x3a6e <_ZN6SdFile10make83NameEPKcPh+0x64>
    3a28:	8e 32       	cpi	r24, 0x2E	; 46
    3a2a:	29 f4       	brne	.+10     	; 0x3a36 <_ZN6SdFile10make83NameEPKcPh+0x2c>
    3a2c:	2a 30       	cpi	r18, 0x0A	; 10
    3a2e:	21 f1       	breq	.+72     	; 0x3a78 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    3a30:	98 e0       	ldi	r25, 0x08	; 8
    3a32:	2a e0       	ldi	r18, 0x0A	; 10
    3a34:	f6 cf       	rjmp	.-20     	; 0x3a22 <_ZN6SdFile10make83NameEPKcPh+0x18>
    3a36:	e8 ea       	ldi	r30, 0xA8	; 168
    3a38:	f2 e0       	ldi	r31, 0x02	; 2
    3a3a:	34 91       	lpm	r19, Z
    3a3c:	33 23       	and	r19, r19
    3a3e:	21 f0       	breq	.+8      	; 0x3a48 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    3a40:	31 96       	adiw	r30, 0x01	; 1
    3a42:	83 13       	cpse	r24, r19
    3a44:	fa cf       	rjmp	.-12     	; 0x3a3a <_ZN6SdFile10make83NameEPKcPh+0x30>
    3a46:	18 c0       	rjmp	.+48     	; 0x3a78 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    3a48:	29 17       	cp	r18, r25
    3a4a:	b0 f0       	brcs	.+44     	; 0x3a78 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    3a4c:	3f ed       	ldi	r19, 0xDF	; 223
    3a4e:	38 0f       	add	r19, r24
    3a50:	3e 35       	cpi	r19, 0x5E	; 94
    3a52:	90 f4       	brcc	.+36     	; 0x3a78 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    3a54:	31 e0       	ldi	r19, 0x01	; 1
    3a56:	39 0f       	add	r19, r25
    3a58:	fb 01       	movw	r30, r22
    3a5a:	e9 0f       	add	r30, r25
    3a5c:	f1 1d       	adc	r31, r1
    3a5e:	9f e9       	ldi	r25, 0x9F	; 159
    3a60:	98 0f       	add	r25, r24
    3a62:	9a 31       	cpi	r25, 0x1A	; 26
    3a64:	08 f4       	brcc	.+2      	; 0x3a68 <_ZN6SdFile10make83NameEPKcPh+0x5e>
    3a66:	80 52       	subi	r24, 0x20	; 32
    3a68:	80 83       	st	Z, r24
    3a6a:	93 2f       	mov	r25, r19
    3a6c:	da cf       	rjmp	.-76     	; 0x3a22 <_ZN6SdFile10make83NameEPKcPh+0x18>
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	fb 01       	movw	r30, r22
    3a72:	90 81       	ld	r25, Z
    3a74:	90 32       	cpi	r25, 0x20	; 32
    3a76:	09 f4       	brne	.+2      	; 0x3a7a <_ZN6SdFile10make83NameEPKcPh+0x70>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	08 95       	ret

00003a7c <_ZN6SdFile8openRootEP8SdVolume>:
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	fc 01       	movw	r30, r24
    3a86:	25 81       	ldd	r18, Z+5	; 0x05
    3a88:	22 23       	and	r18, r18
    3a8a:	11 f0       	breq	.+4      	; 0x3a90 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	41 c0       	rjmp	.+130    	; 0x3b12 <_ZN6SdFile8openRootEP8SdVolume+0x96>
    3a90:	8b 01       	movw	r16, r22
    3a92:	ec 01       	movw	r28, r24
    3a94:	fb 01       	movw	r30, r22
    3a96:	87 89       	ldd	r24, Z+23	; 0x17
    3a98:	80 31       	cpi	r24, 0x10	; 16
    3a9a:	b1 f4       	brne	.+44     	; 0x3ac8 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
    3aa0:	1f 8a       	std	Y+23, r1	; 0x17
    3aa2:	18 8e       	std	Y+24, r1	; 0x18
    3aa4:	19 8e       	std	Y+25, r1	; 0x19
    3aa6:	1a 8e       	std	Y+26, r1	; 0x1a
    3aa8:	80 8d       	ldd	r24, Z+24	; 0x18
    3aaa:	91 8d       	ldd	r25, Z+25	; 0x19
    3aac:	a0 e0       	ldi	r26, 0x00	; 0
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	25 e0       	ldi	r18, 0x05	; 5
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	aa 1f       	adc	r26, r26
    3ab8:	bb 1f       	adc	r27, r27
    3aba:	2a 95       	dec	r18
    3abc:	d1 f7       	brne	.-12     	; 0x3ab2 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    3abe:	8b 8b       	std	Y+19, r24	; 0x13
    3ac0:	9c 8b       	std	Y+20, r25	; 0x14
    3ac2:	ad 8b       	std	Y+21, r26	; 0x15
    3ac4:	be 8b       	std	Y+22, r27	; 0x16
    3ac6:	14 c0       	rjmp	.+40     	; 0x3af0 <_ZN6SdFile8openRootEP8SdVolume+0x74>
    3ac8:	80 32       	cpi	r24, 0x20	; 32
    3aca:	01 f7       	brne	.-64     	; 0x3a8c <_ZN6SdFile8openRootEP8SdVolume+0x10>
    3acc:	83 e0       	ldi	r24, 0x03	; 3
    3ace:	8d 83       	std	Y+5, r24	; 0x05
    3ad0:	fb 01       	movw	r30, r22
    3ad2:	42 8d       	ldd	r20, Z+26	; 0x1a
    3ad4:	53 8d       	ldd	r21, Z+27	; 0x1b
    3ad6:	64 8d       	ldd	r22, Z+28	; 0x1c
    3ad8:	75 8d       	ldd	r23, Z+29	; 0x1d
    3ada:	4f 8b       	std	Y+23, r20	; 0x17
    3adc:	58 8f       	std	Y+24, r21	; 0x18
    3ade:	69 8f       	std	Y+25, r22	; 0x19
    3ae0:	7a 8f       	std	Y+26, r23	; 0x1a
    3ae2:	9e 01       	movw	r18, r28
    3ae4:	2d 5e       	subi	r18, 0xED	; 237
    3ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae8:	c8 01       	movw	r24, r16
    3aea:	02 d7       	rcall	.+3588   	; 0x48f0 <_ZNK8SdVolume9chainSizeEmPm>
    3aec:	88 23       	and	r24, r24
    3aee:	71 f2       	breq	.-100    	; 0x3a8c <_ZN6SdFile8openRootEP8SdVolume+0x10>
    3af0:	1c 8f       	std	Y+28, r17	; 0x1c
    3af2:	0b 8f       	std	Y+27, r16	; 0x1b
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	8c 83       	std	Y+4, r24	; 0x04
    3af8:	1e 82       	std	Y+6, r1	; 0x06
    3afa:	1f 82       	std	Y+7, r1	; 0x07
    3afc:	18 86       	std	Y+8, r1	; 0x08
    3afe:	19 86       	std	Y+9, r1	; 0x09
    3b00:	1a 86       	std	Y+10, r1	; 0x0a
    3b02:	1b 86       	std	Y+11, r1	; 0x0b
    3b04:	1c 86       	std	Y+12, r1	; 0x0c
    3b06:	1d 86       	std	Y+13, r1	; 0x0d
    3b08:	1e 86       	std	Y+14, r1	; 0x0e
    3b0a:	1f 86       	std	Y+15, r1	; 0x0f
    3b0c:	18 8a       	std	Y+16, r1	; 0x10
    3b0e:	19 8a       	std	Y+17, r1	; 0x11
    3b10:	1a 8a       	std	Y+18, r1	; 0x12
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	08 95       	ret

00003b1c <_ZN6SdFile4readEPvj>:
    3b1c:	2f 92       	push	r2
    3b1e:	3f 92       	push	r3
    3b20:	4f 92       	push	r4
    3b22:	5f 92       	push	r5
    3b24:	6f 92       	push	r6
    3b26:	7f 92       	push	r7
    3b28:	8f 92       	push	r8
    3b2a:	9f 92       	push	r9
    3b2c:	af 92       	push	r10
    3b2e:	bf 92       	push	r11
    3b30:	cf 92       	push	r12
    3b32:	df 92       	push	r13
    3b34:	ef 92       	push	r14
    3b36:	ff 92       	push	r15
    3b38:	0f 93       	push	r16
    3b3a:	1f 93       	push	r17
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	ec 01       	movw	r28, r24
    3b42:	5b 01       	movw	r10, r22
    3b44:	4a 01       	movw	r8, r20
    3b46:	8d 81       	ldd	r24, Y+5	; 0x05
    3b48:	81 11       	cpse	r24, r1
    3b4a:	03 c0       	rjmp	.+6      	; 0x3b52 <_ZN6SdFile4readEPvj+0x36>
    3b4c:	8f ef       	ldi	r24, 0xFF	; 255
    3b4e:	9f ef       	ldi	r25, 0xFF	; 255
    3b50:	d4 c0       	rjmp	.+424    	; 0x3cfa <_ZN6SdFile4readEPvj+0x1de>
    3b52:	8c 81       	ldd	r24, Y+4	; 0x04
    3b54:	80 ff       	sbrs	r24, 0
    3b56:	fa cf       	rjmp	.-12     	; 0x3b4c <_ZN6SdFile4readEPvj+0x30>
    3b58:	4b 88       	ldd	r4, Y+19	; 0x13
    3b5a:	5c 88       	ldd	r5, Y+20	; 0x14
    3b5c:	6d 88       	ldd	r6, Y+21	; 0x15
    3b5e:	7e 88       	ldd	r7, Y+22	; 0x16
    3b60:	4a 85       	ldd	r20, Y+10	; 0x0a
    3b62:	5b 85       	ldd	r21, Y+11	; 0x0b
    3b64:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b66:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b68:	c4 01       	movw	r24, r8
    3b6a:	a0 e0       	ldi	r26, 0x00	; 0
    3b6c:	b0 e0       	ldi	r27, 0x00	; 0
    3b6e:	93 01       	movw	r18, r6
    3b70:	82 01       	movw	r16, r4
    3b72:	04 1b       	sub	r16, r20
    3b74:	15 0b       	sbc	r17, r21
    3b76:	26 0b       	sbc	r18, r22
    3b78:	37 0b       	sbc	r19, r23
    3b7a:	08 17       	cp	r16, r24
    3b7c:	19 07       	cpc	r17, r25
    3b7e:	2a 07       	cpc	r18, r26
    3b80:	3b 07       	cpc	r19, r27
    3b82:	18 f4       	brcc	.+6      	; 0x3b8a <_ZN6SdFile4readEPvj+0x6e>
    3b84:	42 01       	movw	r8, r4
    3b86:	84 1a       	sub	r8, r20
    3b88:	95 0a       	sbc	r9, r21
    3b8a:	24 01       	movw	r4, r8
    3b8c:	1e 01       	movw	r2, r28
    3b8e:	26 e0       	ldi	r18, 0x06	; 6
    3b90:	22 0e       	add	r2, r18
    3b92:	31 1c       	adc	r3, r1
    3b94:	41 14       	cp	r4, r1
    3b96:	51 04       	cpc	r5, r1
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <_ZN6SdFile4readEPvj+0x80>
    3b9a:	7d c0       	rjmp	.+250    	; 0x3c96 <_ZN6SdFile4readEPvj+0x17a>
    3b9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    3b9e:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ba0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ba2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ba4:	6a 01       	movw	r12, r20
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	d8 22       	and	r13, r24
    3baa:	ed 81       	ldd	r30, Y+5	; 0x05
    3bac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bb0:	8a 01       	movw	r16, r20
    3bb2:	9b 01       	movw	r18, r22
    3bb4:	f9 e0       	ldi	r31, 0x09	; 9
    3bb6:	36 95       	lsr	r19
    3bb8:	27 95       	ror	r18
    3bba:	17 95       	ror	r17
    3bbc:	07 95       	ror	r16
    3bbe:	fa 95       	dec	r31
    3bc0:	d1 f7       	brne	.-12     	; 0x3bb6 <_ZN6SdFile4readEPvj+0x9a>
    3bc2:	e2 30       	cpi	r30, 0x02	; 2
    3bc4:	61 f4       	brne	.+24     	; 0x3bde <_ZN6SdFile4readEPvj+0xc2>
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bca:	93 8d       	ldd	r25, Z+27	; 0x1b
    3bcc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3bce:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	60 0f       	add	r22, r16
    3bd6:	71 1f       	adc	r23, r17
    3bd8:	82 1f       	adc	r24, r18
    3bda:	93 1f       	adc	r25, r19
    3bdc:	3e c0       	rjmp	.+124    	; 0x3c5a <_ZN6SdFile4readEPvj+0x13e>
    3bde:	fc 01       	movw	r30, r24
    3be0:	74 80       	ldd	r7, Z+4	; 0x04
    3be2:	7a 94       	dec	r7
    3be4:	70 22       	and	r7, r16
    3be6:	c1 14       	cp	r12, r1
    3be8:	d1 04       	cpc	r13, r1
    3bea:	c1 f4       	brne	.+48     	; 0x3c1c <_ZN6SdFile4readEPvj+0x100>
    3bec:	71 10       	cpse	r7, r1
    3bee:	16 c0       	rjmp	.+44     	; 0x3c1c <_ZN6SdFile4readEPvj+0x100>
    3bf0:	45 2b       	or	r20, r21
    3bf2:	46 2b       	or	r20, r22
    3bf4:	47 2b       	or	r20, r23
    3bf6:	49 f4       	brne	.+18     	; 0x3c0a <_ZN6SdFile4readEPvj+0xee>
    3bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    3bfc:	a9 8d       	ldd	r26, Y+25	; 0x19
    3bfe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3c00:	8e 83       	std	Y+6, r24	; 0x06
    3c02:	9f 83       	std	Y+7, r25	; 0x07
    3c04:	a8 87       	std	Y+8, r26	; 0x08
    3c06:	b9 87       	std	Y+9, r27	; 0x09
    3c08:	09 c0       	rjmp	.+18     	; 0x3c1c <_ZN6SdFile4readEPvj+0x100>
    3c0a:	4e 81       	ldd	r20, Y+6	; 0x06
    3c0c:	5f 81       	ldd	r21, Y+7	; 0x07
    3c0e:	68 85       	ldd	r22, Y+8	; 0x08
    3c10:	79 85       	ldd	r23, Y+9	; 0x09
    3c12:	91 01       	movw	r18, r2
    3c14:	eb d5       	rcall	.+3030   	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    3c16:	88 23       	and	r24, r24
    3c18:	09 f4       	brne	.+2      	; 0x3c1c <_ZN6SdFile4readEPvj+0x100>
    3c1a:	98 cf       	rjmp	.-208    	; 0x3b4c <_ZN6SdFile4readEPvj+0x30>
    3c1c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3c1e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3c20:	8e 81       	ldd	r24, Y+6	; 0x06
    3c22:	9f 81       	ldd	r25, Y+7	; 0x07
    3c24:	a8 85       	ldd	r26, Y+8	; 0x08
    3c26:	b9 85       	ldd	r27, Y+9	; 0x09
    3c28:	02 97       	sbiw	r24, 0x02	; 2
    3c2a:	a1 09       	sbc	r26, r1
    3c2c:	b1 09       	sbc	r27, r1
    3c2e:	05 84       	ldd	r0, Z+13	; 0x0d
    3c30:	04 c0       	rjmp	.+8      	; 0x3c3a <_ZN6SdFile4readEPvj+0x11e>
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	aa 1f       	adc	r26, r26
    3c38:	bb 1f       	adc	r27, r27
    3c3a:	0a 94       	dec	r0
    3c3c:	d2 f7       	brpl	.-12     	; 0x3c32 <_ZN6SdFile4readEPvj+0x116>
    3c3e:	46 85       	ldd	r20, Z+14	; 0x0e
    3c40:	57 85       	ldd	r21, Z+15	; 0x0f
    3c42:	60 89       	ldd	r22, Z+16	; 0x10
    3c44:	71 89       	ldd	r23, Z+17	; 0x11
    3c46:	84 0f       	add	r24, r20
    3c48:	95 1f       	adc	r25, r21
    3c4a:	a6 1f       	adc	r26, r22
    3c4c:	b7 1f       	adc	r27, r23
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	67 0d       	add	r22, r7
    3c54:	71 1d       	adc	r23, r1
    3c56:	81 1d       	adc	r24, r1
    3c58:	91 1d       	adc	r25, r1
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	32 e0       	ldi	r19, 0x02	; 2
    3c5e:	2c 19       	sub	r18, r12
    3c60:	3d 09       	sbc	r19, r13
    3c62:	32 01       	movw	r6, r4
    3c64:	24 15       	cp	r18, r4
    3c66:	35 05       	cpc	r19, r5
    3c68:	08 f4       	brcc	.+2      	; 0x3c6c <_ZN6SdFile4readEPvj+0x150>
    3c6a:	39 01       	movw	r6, r18
    3c6c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c6e:	26 fd       	sbrc	r18, 6
    3c70:	04 c0       	rjmp	.+8      	; 0x3c7a <_ZN6SdFile4readEPvj+0x15e>
    3c72:	61 14       	cp	r6, r1
    3c74:	f2 e0       	ldi	r31, 0x02	; 2
    3c76:	7f 06       	cpc	r7, r31
    3c78:	71 f5       	brne	.+92     	; 0x3cd6 <_ZN6SdFile4readEPvj+0x1ba>
    3c7a:	00 91 21 02 	lds	r16, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    3c7e:	10 91 22 02 	lds	r17, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3c82:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3c86:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3c8a:	60 17       	cp	r22, r16
    3c8c:	71 07       	cpc	r23, r17
    3c8e:	82 07       	cpc	r24, r18
    3c90:	93 07       	cpc	r25, r19
    3c92:	19 f4       	brne	.+6      	; 0x3c9a <_ZN6SdFile4readEPvj+0x17e>
    3c94:	20 c0       	rjmp	.+64     	; 0x3cd6 <_ZN6SdFile4readEPvj+0x1ba>
    3c96:	c4 01       	movw	r24, r8
    3c98:	30 c0       	rjmp	.+96     	; 0x3cfa <_ZN6SdFile4readEPvj+0x1de>
    3c9a:	75 01       	movw	r14, r10
    3c9c:	83 01       	movw	r16, r6
    3c9e:	96 01       	movw	r18, r12
    3ca0:	ab 01       	movw	r20, r22
    3ca2:	bc 01       	movw	r22, r24
    3ca4:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <_ZN8SdVolume7sdCard_E>
    3ca8:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <_ZN8SdVolume7sdCard_E+0x1>
    3cac:	7c dd       	rcall	.-1288   	; 0x37a6 <_ZN7Sd2Card8readDataEmjjPh>
    3cae:	88 23       	and	r24, r24
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <_ZN6SdFile4readEPvj+0x198>
    3cb2:	4c cf       	rjmp	.-360    	; 0x3b4c <_ZN6SdFile4readEPvj+0x30>
    3cb4:	a6 0c       	add	r10, r6
    3cb6:	b7 1c       	adc	r11, r7
    3cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cbc:	ac 85       	ldd	r26, Y+12	; 0x0c
    3cbe:	bd 85       	ldd	r27, Y+13	; 0x0d
    3cc0:	86 0d       	add	r24, r6
    3cc2:	97 1d       	adc	r25, r7
    3cc4:	a1 1d       	adc	r26, r1
    3cc6:	b1 1d       	adc	r27, r1
    3cc8:	8a 87       	std	Y+10, r24	; 0x0a
    3cca:	9b 87       	std	Y+11, r25	; 0x0b
    3ccc:	ac 87       	std	Y+12, r26	; 0x0c
    3cce:	bd 87       	std	Y+13, r27	; 0x0d
    3cd0:	46 18       	sub	r4, r6
    3cd2:	57 08       	sbc	r5, r7
    3cd4:	5f cf       	rjmp	.-322    	; 0x3b94 <_ZN6SdFile4readEPvj+0x78>
    3cd6:	40 e0       	ldi	r20, 0x00	; 0
    3cd8:	2d d5       	rcall	.+2650   	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    3cda:	88 23       	and	r24, r24
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <_ZN6SdFile4readEPvj+0x1c4>
    3cde:	36 cf       	rjmp	.-404    	; 0x3b4c <_ZN6SdFile4readEPvj+0x30>
    3ce0:	f6 01       	movw	r30, r12
    3ce2:	e7 5a       	subi	r30, 0xA7	; 167
    3ce4:	f8 4f       	sbci	r31, 0xF8	; 248
    3ce6:	d5 01       	movw	r26, r10
    3ce8:	cf 01       	movw	r24, r30
    3cea:	86 0d       	add	r24, r6
    3cec:	97 1d       	adc	r25, r7
    3cee:	8e 17       	cp	r24, r30
    3cf0:	9f 07       	cpc	r25, r31
    3cf2:	01 f3       	breq	.-64     	; 0x3cb4 <_ZN6SdFile4readEPvj+0x198>
    3cf4:	21 91       	ld	r18, Z+
    3cf6:	2d 93       	st	X+, r18
    3cf8:	fa cf       	rjmp	.-12     	; 0x3cee <_ZN6SdFile4readEPvj+0x1d2>
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	1f 91       	pop	r17
    3d00:	0f 91       	pop	r16
    3d02:	ff 90       	pop	r15
    3d04:	ef 90       	pop	r14
    3d06:	df 90       	pop	r13
    3d08:	cf 90       	pop	r12
    3d0a:	bf 90       	pop	r11
    3d0c:	af 90       	pop	r10
    3d0e:	9f 90       	pop	r9
    3d10:	8f 90       	pop	r8
    3d12:	7f 90       	pop	r7
    3d14:	6f 90       	pop	r6
    3d16:	5f 90       	pop	r5
    3d18:	4f 90       	pop	r4
    3d1a:	3f 90       	pop	r3
    3d1c:	2f 90       	pop	r2
    3d1e:	08 95       	ret

00003d20 <_ZN6SdFile12readDirCacheEv>:
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	1f 92       	push	r1
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	fc 01       	movw	r30, r24
    3d32:	25 81       	ldd	r18, Z+5	; 0x05
    3d34:	22 30       	cpi	r18, 0x02	; 2
    3d36:	18 f4       	brcc	.+6      	; 0x3d3e <_ZN6SdFile12readDirCacheEv+0x1e>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	32 c0       	rjmp	.+100    	; 0x3da2 <_ZN6SdFile12readDirCacheEv+0x82>
    3d3e:	8c 01       	movw	r16, r24
    3d40:	fc 01       	movw	r30, r24
    3d42:	42 85       	ldd	r20, Z+10	; 0x0a
    3d44:	53 85       	ldd	r21, Z+11	; 0x0b
    3d46:	64 85       	ldd	r22, Z+12	; 0x0c
    3d48:	75 85       	ldd	r23, Z+13	; 0x0d
    3d4a:	85 e0       	ldi	r24, 0x05	; 5
    3d4c:	76 95       	lsr	r23
    3d4e:	67 95       	ror	r22
    3d50:	57 95       	ror	r21
    3d52:	47 95       	ror	r20
    3d54:	8a 95       	dec	r24
    3d56:	d1 f7       	brne	.-12     	; 0x3d4c <_ZN6SdFile12readDirCacheEv+0x2c>
    3d58:	f4 2f       	mov	r31, r20
    3d5a:	ff 70       	andi	r31, 0x0F	; 15
    3d5c:	ff 2e       	mov	r15, r31
    3d5e:	41 e0       	ldi	r20, 0x01	; 1
    3d60:	50 e0       	ldi	r21, 0x00	; 0
    3d62:	be 01       	movw	r22, r28
    3d64:	6f 5f       	subi	r22, 0xFF	; 255
    3d66:	7f 4f       	sbci	r23, 0xFF	; 255
    3d68:	c8 01       	movw	r24, r16
    3d6a:	d8 de       	rcall	.-592    	; 0x3b1c <_ZN6SdFile4readEPvj>
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	19 f4       	brne	.+6      	; 0x3d76 <_ZN6SdFile12readDirCacheEv+0x56>
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <_ZN6SdFile12readDirCacheEv+0x5a>
    3d76:	8f ef       	ldi	r24, 0xFF	; 255
    3d78:	9f ef       	ldi	r25, 0xFF	; 255
    3d7a:	01 96       	adiw	r24, 0x01	; 1
    3d7c:	e9 f2       	breq	.-70     	; 0x3d38 <_ZN6SdFile12readDirCacheEv+0x18>
    3d7e:	f8 01       	movw	r30, r16
    3d80:	82 85       	ldd	r24, Z+10	; 0x0a
    3d82:	93 85       	ldd	r25, Z+11	; 0x0b
    3d84:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d86:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d88:	4f 96       	adiw	r24, 0x1f	; 31
    3d8a:	a1 1d       	adc	r26, r1
    3d8c:	b1 1d       	adc	r27, r1
    3d8e:	82 87       	std	Z+10, r24	; 0x0a
    3d90:	93 87       	std	Z+11, r25	; 0x0b
    3d92:	a4 87       	std	Z+12, r26	; 0x0c
    3d94:	b5 87       	std	Z+13, r27	; 0x0d
    3d96:	f0 e2       	ldi	r31, 0x20	; 32
    3d98:	ff 9e       	mul	r15, r31
    3d9a:	c0 01       	movw	r24, r0
    3d9c:	11 24       	eor	r1, r1
    3d9e:	87 5a       	subi	r24, 0xA7	; 167
    3da0:	98 4f       	sbci	r25, 0xF8	; 248
    3da2:	0f 90       	pop	r0
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	1f 91       	pop	r17
    3daa:	0f 91       	pop	r16
    3dac:	ff 90       	pop	r15
    3dae:	08 95       	ret

00003db0 <_ZN6SdFile7seekSetEm>:
    3db0:	8f 92       	push	r8
    3db2:	9f 92       	push	r9
    3db4:	af 92       	push	r10
    3db6:	bf 92       	push	r11
    3db8:	cf 92       	push	r12
    3dba:	df 92       	push	r13
    3dbc:	ef 92       	push	r14
    3dbe:	ff 92       	push	r15
    3dc0:	0f 93       	push	r16
    3dc2:	1f 93       	push	r17
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	ec 01       	movw	r28, r24
    3dca:	8d 81       	ldd	r24, Y+5	; 0x05
    3dcc:	81 11       	cpse	r24, r1
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <_ZN6SdFile7seekSetEm+0x24>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	77 c0       	rjmp	.+238    	; 0x3ec2 <_ZN6SdFile7seekSetEm+0x112>
    3dd4:	0b 89       	ldd	r16, Y+19	; 0x13
    3dd6:	1c 89       	ldd	r17, Y+20	; 0x14
    3dd8:	2d 89       	ldd	r18, Y+21	; 0x15
    3dda:	3e 89       	ldd	r19, Y+22	; 0x16
    3ddc:	04 17       	cp	r16, r20
    3dde:	15 07       	cpc	r17, r21
    3de0:	26 07       	cpc	r18, r22
    3de2:	37 07       	cpc	r19, r23
    3de4:	a8 f3       	brcs	.-22     	; 0x3dd0 <_ZN6SdFile7seekSetEm+0x20>
    3de6:	6a 01       	movw	r12, r20
    3de8:	7b 01       	movw	r14, r22
    3dea:	82 30       	cpi	r24, 0x02	; 2
    3dec:	29 f4       	brne	.+10     	; 0x3df8 <_ZN6SdFile7seekSetEm+0x48>
    3dee:	ca 86       	std	Y+10, r12	; 0x0a
    3df0:	db 86       	std	Y+11, r13	; 0x0b
    3df2:	ec 86       	std	Y+12, r14	; 0x0c
    3df4:	fd 86       	std	Y+13, r15	; 0x0d
    3df6:	0d c0       	rjmp	.+26     	; 0x3e12 <_ZN6SdFile7seekSetEm+0x62>
    3df8:	c1 14       	cp	r12, r1
    3dfa:	d1 04       	cpc	r13, r1
    3dfc:	e1 04       	cpc	r14, r1
    3dfe:	f1 04       	cpc	r15, r1
    3e00:	51 f4       	brne	.+20     	; 0x3e16 <_ZN6SdFile7seekSetEm+0x66>
    3e02:	1e 82       	std	Y+6, r1	; 0x06
    3e04:	1f 82       	std	Y+7, r1	; 0x07
    3e06:	18 86       	std	Y+8, r1	; 0x08
    3e08:	19 86       	std	Y+9, r1	; 0x09
    3e0a:	1a 86       	std	Y+10, r1	; 0x0a
    3e0c:	1b 86       	std	Y+11, r1	; 0x0b
    3e0e:	1c 86       	std	Y+12, r1	; 0x0c
    3e10:	1d 86       	std	Y+13, r1	; 0x0d
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	56 c0       	rjmp	.+172    	; 0x3ec2 <_ZN6SdFile7seekSetEm+0x112>
    3e16:	8a 84       	ldd	r8, Y+10	; 0x0a
    3e18:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e1a:	ac 84       	ldd	r10, Y+12	; 0x0c
    3e1c:	bd 84       	ldd	r11, Y+13	; 0x0d
    3e1e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3e20:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3e22:	25 85       	ldd	r18, Z+13	; 0x0d
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	27 5f       	subi	r18, 0xF7	; 247
    3e28:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2a:	b5 01       	movw	r22, r10
    3e2c:	a4 01       	movw	r20, r8
    3e2e:	41 50       	subi	r20, 0x01	; 1
    3e30:	51 09       	sbc	r21, r1
    3e32:	61 09       	sbc	r22, r1
    3e34:	71 09       	sbc	r23, r1
    3e36:	02 2e       	mov	r0, r18
    3e38:	04 c0       	rjmp	.+8      	; 0x3e42 <_ZN6SdFile7seekSetEm+0x92>
    3e3a:	76 95       	lsr	r23
    3e3c:	67 95       	ror	r22
    3e3e:	57 95       	ror	r21
    3e40:	47 95       	ror	r20
    3e42:	0a 94       	dec	r0
    3e44:	d2 f7       	brpl	.-12     	; 0x3e3a <_ZN6SdFile7seekSetEm+0x8a>
    3e46:	d7 01       	movw	r26, r14
    3e48:	c6 01       	movw	r24, r12
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	a1 09       	sbc	r26, r1
    3e4e:	b1 09       	sbc	r27, r1
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <_ZN6SdFile7seekSetEm+0xaa>
    3e52:	b6 95       	lsr	r27
    3e54:	a7 95       	ror	r26
    3e56:	97 95       	ror	r25
    3e58:	87 95       	ror	r24
    3e5a:	2a 95       	dec	r18
    3e5c:	d2 f7       	brpl	.-12     	; 0x3e52 <_ZN6SdFile7seekSetEm+0xa2>
    3e5e:	84 17       	cp	r24, r20
    3e60:	95 07       	cpc	r25, r21
    3e62:	a6 07       	cpc	r26, r22
    3e64:	b7 07       	cpc	r27, r23
    3e66:	20 f0       	brcs	.+8      	; 0x3e70 <_ZN6SdFile7seekSetEm+0xc0>
    3e68:	89 28       	or	r8, r9
    3e6a:	8a 28       	or	r8, r10
    3e6c:	8b 28       	or	r8, r11
    3e6e:	71 f4       	brne	.+28     	; 0x3e8c <_ZN6SdFile7seekSetEm+0xdc>
    3e70:	4f 89       	ldd	r20, Y+23	; 0x17
    3e72:	58 8d       	ldd	r21, Y+24	; 0x18
    3e74:	69 8d       	ldd	r22, Y+25	; 0x19
    3e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e78:	4e 83       	std	Y+6, r20	; 0x06
    3e7a:	5f 83       	std	Y+7, r21	; 0x07
    3e7c:	68 87       	std	Y+8, r22	; 0x08
    3e7e:	79 87       	std	Y+9, r23	; 0x09
    3e80:	4c 01       	movw	r8, r24
    3e82:	5d 01       	movw	r10, r26
    3e84:	8e 01       	movw	r16, r28
    3e86:	0a 5f       	subi	r16, 0xFA	; 250
    3e88:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8a:	15 c0       	rjmp	.+42     	; 0x3eb6 <_ZN6SdFile7seekSetEm+0x106>
    3e8c:	84 1b       	sub	r24, r20
    3e8e:	95 0b       	sbc	r25, r21
    3e90:	a6 0b       	sbc	r26, r22
    3e92:	b7 0b       	sbc	r27, r23
    3e94:	f5 cf       	rjmp	.-22     	; 0x3e80 <_ZN6SdFile7seekSetEm+0xd0>
    3e96:	4e 81       	ldd	r20, Y+6	; 0x06
    3e98:	5f 81       	ldd	r21, Y+7	; 0x07
    3e9a:	68 85       	ldd	r22, Y+8	; 0x08
    3e9c:	79 85       	ldd	r23, Y+9	; 0x09
    3e9e:	98 01       	movw	r18, r16
    3ea0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ea2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ea4:	a3 d4       	rcall	.+2374   	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
    3ea8:	89 1a       	sub	r8, r25
    3eaa:	91 08       	sbc	r9, r1
    3eac:	a1 08       	sbc	r10, r1
    3eae:	b1 08       	sbc	r11, r1
    3eb0:	88 23       	and	r24, r24
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <_ZN6SdFile7seekSetEm+0x106>
    3eb4:	8d cf       	rjmp	.-230    	; 0x3dd0 <_ZN6SdFile7seekSetEm+0x20>
    3eb6:	81 14       	cp	r8, r1
    3eb8:	91 04       	cpc	r9, r1
    3eba:	a1 04       	cpc	r10, r1
    3ebc:	b1 04       	cpc	r11, r1
    3ebe:	59 f7       	brne	.-42     	; 0x3e96 <_ZN6SdFile7seekSetEm+0xe6>
    3ec0:	96 cf       	rjmp	.-212    	; 0x3dee <_ZN6SdFile7seekSetEm+0x3e>
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	ef 90       	pop	r14
    3ece:	df 90       	pop	r13
    3ed0:	cf 90       	pop	r12
    3ed2:	bf 90       	pop	r11
    3ed4:	af 90       	pop	r10
    3ed6:	9f 90       	pop	r9
    3ed8:	8f 90       	pop	r8
    3eda:	08 95       	ret

00003edc <_ZN6SdFile4syncEv>:
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	ec 01       	movw	r28, r24
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	88 23       	and	r24, r24
    3eea:	b9 f1       	breq	.+110    	; 0x3f5a <_ZN6SdFile4syncEv+0x7e>
    3eec:	8c 81       	ldd	r24, Y+4	; 0x04
    3eee:	87 ff       	sbrs	r24, 7
    3ef0:	2f c0       	rjmp	.+94     	; 0x3f50 <_ZN6SdFile4syncEv+0x74>
    3ef2:	61 e0       	ldi	r22, 0x01	; 1
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	71 dd       	rcall	.-1310   	; 0x39da <_ZN6SdFile13cacheDirEntryEh>
    3ef8:	8c 01       	movw	r16, r24
    3efa:	89 2b       	or	r24, r25
    3efc:	71 f1       	breq	.+92     	; 0x3f5a <_ZN6SdFile4syncEv+0x7e>
    3efe:	8d 81       	ldd	r24, Y+5	; 0x05
    3f00:	82 30       	cpi	r24, 0x02	; 2
    3f02:	48 f4       	brcc	.+18     	; 0x3f16 <_ZN6SdFile4syncEv+0x3a>
    3f04:	8b 89       	ldd	r24, Y+19	; 0x13
    3f06:	9c 89       	ldd	r25, Y+20	; 0x14
    3f08:	ad 89       	ldd	r26, Y+21	; 0x15
    3f0a:	be 89       	ldd	r27, Y+22	; 0x16
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	84 8f       	std	Z+28, r24	; 0x1c
    3f10:	95 8f       	std	Z+29, r25	; 0x1d
    3f12:	a6 8f       	std	Z+30, r26	; 0x1e
    3f14:	b7 8f       	std	Z+31, r27	; 0x1f
    3f16:	8f 89       	ldd	r24, Y+23	; 0x17
    3f18:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1a:	a9 8d       	ldd	r26, Y+25	; 0x19
    3f1c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3f1e:	f8 01       	movw	r30, r16
    3f20:	93 8f       	std	Z+27, r25	; 0x1b
    3f22:	82 8f       	std	Z+26, r24	; 0x1a
    3f24:	b5 8b       	std	Z+21, r27	; 0x15
    3f26:	a4 8b       	std	Z+20, r26	; 0x14
    3f28:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <_ZN6SdFile9dateTime_E>
    3f2c:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <_ZN6SdFile9dateTime_E+0x1>
    3f30:	30 97       	sbiw	r30, 0x00	; 0
    3f32:	59 f0       	breq	.+22     	; 0x3f4a <_ZN6SdFile4syncEv+0x6e>
    3f34:	b8 01       	movw	r22, r16
    3f36:	6a 5e       	subi	r22, 0xEA	; 234
    3f38:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3a:	c8 01       	movw	r24, r16
    3f3c:	48 96       	adiw	r24, 0x18	; 24
    3f3e:	19 95       	eicall
    3f40:	f8 01       	movw	r30, r16
    3f42:	80 8d       	ldd	r24, Z+24	; 0x18
    3f44:	91 8d       	ldd	r25, Z+25	; 0x19
    3f46:	93 8b       	std	Z+19, r25	; 0x13
    3f48:	82 8b       	std	Z+18, r24	; 0x12
    3f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f4c:	8f 77       	andi	r24, 0x7F	; 127
    3f4e:	8c 83       	std	Y+4, r24	; 0x04
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	b4 c3       	rjmp	.+1896   	; 0x46c2 <_ZN8SdVolume10cacheFlushEv>
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	df 91       	pop	r29
    3f5e:	cf 91       	pop	r28
    3f60:	1f 91       	pop	r17
    3f62:	0f 91       	pop	r16
    3f64:	08 95       	ret

00003f66 <_ZN6SdFile5closeEv>:
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	ec 01       	movw	r28, r24
    3f6c:	b7 df       	rcall	.-146    	; 0x3edc <_ZN6SdFile4syncEv>
    3f6e:	88 23       	and	r24, r24
    3f70:	11 f0       	breq	.+4      	; 0x3f76 <_ZN6SdFile5closeEv+0x10>
    3f72:	1d 82       	std	Y+5, r1	; 0x05
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	df 91       	pop	r29
    3f78:	cf 91       	pop	r28
    3f7a:	08 95       	ret

00003f7c <_ZN6SdFile8truncateEm>:
    3f7c:	4f 92       	push	r4
    3f7e:	5f 92       	push	r5
    3f80:	6f 92       	push	r6
    3f82:	7f 92       	push	r7
    3f84:	8f 92       	push	r8
    3f86:	9f 92       	push	r9
    3f88:	af 92       	push	r10
    3f8a:	bf 92       	push	r11
    3f8c:	ef 92       	push	r14
    3f8e:	ff 92       	push	r15
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <_ZN6SdFile8truncateEm+0x1e>
    3f9a:	1f 92       	push	r1
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	85 81       	ldd	r24, Z+5	; 0x05
    3fa4:	81 30       	cpi	r24, 0x01	; 1
    3fa6:	e1 f4       	brne	.+56     	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    3fa8:	84 81       	ldd	r24, Z+4	; 0x04
    3faa:	81 ff       	sbrs	r24, 1
    3fac:	19 c0       	rjmp	.+50     	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    3fae:	83 89       	ldd	r24, Z+19	; 0x13
    3fb0:	94 89       	ldd	r25, Z+20	; 0x14
    3fb2:	a5 89       	ldd	r26, Z+21	; 0x15
    3fb4:	b6 89       	ldd	r27, Z+22	; 0x16
    3fb6:	84 17       	cp	r24, r20
    3fb8:	95 07       	cpc	r25, r21
    3fba:	a6 07       	cpc	r26, r22
    3fbc:	b7 07       	cpc	r27, r23
    3fbe:	80 f0       	brcs	.+32     	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    3fc0:	89 2b       	or	r24, r25
    3fc2:	8a 2b       	or	r24, r26
    3fc4:	8b 2b       	or	r24, r27
    3fc6:	09 f4       	brne	.+2      	; 0x3fca <_ZN6SdFile8truncateEm+0x4e>
    3fc8:	72 c0       	rjmp	.+228    	; 0x40ae <_ZN6SdFile8truncateEm+0x132>
    3fca:	4a 01       	movw	r8, r20
    3fcc:	5b 01       	movw	r10, r22
    3fce:	7f 01       	movw	r14, r30
    3fd0:	42 84       	ldd	r4, Z+10	; 0x0a
    3fd2:	53 84       	ldd	r5, Z+11	; 0x0b
    3fd4:	64 84       	ldd	r6, Z+12	; 0x0c
    3fd6:	75 84       	ldd	r7, Z+13	; 0x0d
    3fd8:	cf 01       	movw	r24, r30
    3fda:	ea de       	rcall	.-556    	; 0x3db0 <_ZN6SdFile7seekSetEm>
    3fdc:	81 11       	cpse	r24, r1
    3fde:	02 c0       	rjmp	.+4      	; 0x3fe4 <_ZN6SdFile8truncateEm+0x68>
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	66 c0       	rjmp	.+204    	; 0x40b0 <_ZN6SdFile8truncateEm+0x134>
    3fe4:	f7 01       	movw	r30, r14
    3fe6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3fe8:	94 8d       	ldd	r25, Z+28	; 0x1c
    3fea:	81 14       	cp	r8, r1
    3fec:	91 04       	cpc	r9, r1
    3fee:	a1 04       	cpc	r10, r1
    3ff0:	b1 04       	cpc	r11, r1
    3ff2:	69 f4       	brne	.+26     	; 0x400e <_ZN6SdFile8truncateEm+0x92>
    3ff4:	47 89       	ldd	r20, Z+23	; 0x17
    3ff6:	50 8d       	ldd	r21, Z+24	; 0x18
    3ff8:	61 8d       	ldd	r22, Z+25	; 0x19
    3ffa:	72 8d       	ldd	r23, Z+26	; 0x1a
    3ffc:	92 d6       	rcall	.+3364   	; 0x4d22 <_ZN8SdVolume9freeChainEm>
    3ffe:	88 23       	and	r24, r24
    4000:	79 f3       	breq	.-34     	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    4002:	f7 01       	movw	r30, r14
    4004:	17 8a       	std	Z+23, r1	; 0x17
    4006:	10 8e       	std	Z+24, r1	; 0x18
    4008:	11 8e       	std	Z+25, r1	; 0x19
    400a:	12 8e       	std	Z+26, r1	; 0x1a
    400c:	37 c0       	rjmp	.+110    	; 0x407c <_ZN6SdFile8truncateEm+0x100>
    400e:	f7 01       	movw	r30, r14
    4010:	46 81       	ldd	r20, Z+6	; 0x06
    4012:	57 81       	ldd	r21, Z+7	; 0x07
    4014:	60 85       	ldd	r22, Z+8	; 0x08
    4016:	71 85       	ldd	r23, Z+9	; 0x09
    4018:	9e 01       	movw	r18, r28
    401a:	2f 5f       	subi	r18, 0xFF	; 255
    401c:	3f 4f       	sbci	r19, 0xFF	; 255
    401e:	e6 d3       	rcall	.+1996   	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    4020:	88 23       	and	r24, r24
    4022:	f1 f2       	breq	.-68     	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    4024:	49 81       	ldd	r20, Y+1	; 0x01
    4026:	5a 81       	ldd	r21, Y+2	; 0x02
    4028:	6b 81       	ldd	r22, Y+3	; 0x03
    402a:	7c 81       	ldd	r23, Y+4	; 0x04
    402c:	f7 01       	movw	r30, r14
    402e:	83 8d       	ldd	r24, Z+27	; 0x1b
    4030:	94 8d       	ldd	r25, Z+28	; 0x1c
    4032:	fc 01       	movw	r30, r24
    4034:	27 89       	ldd	r18, Z+23	; 0x17
    4036:	20 31       	cpi	r18, 0x10	; 16
    4038:	29 f0       	breq	.+10     	; 0x4044 <_ZN6SdFile8truncateEm+0xc8>
    403a:	08 ef       	ldi	r16, 0xF8	; 248
    403c:	1f ef       	ldi	r17, 0xFF	; 255
    403e:	2f ef       	ldi	r18, 0xFF	; 255
    4040:	3f e0       	ldi	r19, 0x0F	; 15
    4042:	04 c0       	rjmp	.+8      	; 0x404c <_ZN6SdFile8truncateEm+0xd0>
    4044:	08 ef       	ldi	r16, 0xF8	; 248
    4046:	1f ef       	ldi	r17, 0xFF	; 255
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 17       	cp	r20, r16
    404e:	51 07       	cpc	r21, r17
    4050:	62 07       	cpc	r22, r18
    4052:	73 07       	cpc	r23, r19
    4054:	98 f4       	brcc	.+38     	; 0x407c <_ZN6SdFile8truncateEm+0x100>
    4056:	65 d6       	rcall	.+3274   	; 0x4d22 <_ZN8SdVolume9freeChainEm>
    4058:	88 23       	and	r24, r24
    405a:	09 f4       	brne	.+2      	; 0x405e <_ZN6SdFile8truncateEm+0xe2>
    405c:	c1 cf       	rjmp	.-126    	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    405e:	f7 01       	movw	r30, r14
    4060:	46 81       	ldd	r20, Z+6	; 0x06
    4062:	57 81       	ldd	r21, Z+7	; 0x07
    4064:	60 85       	ldd	r22, Z+8	; 0x08
    4066:	71 85       	ldd	r23, Z+9	; 0x09
    4068:	0f ef       	ldi	r16, 0xFF	; 255
    406a:	1f ef       	ldi	r17, 0xFF	; 255
    406c:	2f ef       	ldi	r18, 0xFF	; 255
    406e:	3f e0       	ldi	r19, 0x0F	; 15
    4070:	83 8d       	ldd	r24, Z+27	; 0x1b
    4072:	94 8d       	ldd	r25, Z+28	; 0x1c
    4074:	a5 d4       	rcall	.+2378   	; 0x49c0 <_ZN8SdVolume6fatPutEmm>
    4076:	88 23       	and	r24, r24
    4078:	09 f4       	brne	.+2      	; 0x407c <_ZN6SdFile8truncateEm+0x100>
    407a:	b2 cf       	rjmp	.-156    	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    407c:	f7 01       	movw	r30, r14
    407e:	83 8a       	std	Z+19, r8	; 0x13
    4080:	94 8a       	std	Z+20, r9	; 0x14
    4082:	a5 8a       	std	Z+21, r10	; 0x15
    4084:	b6 8a       	std	Z+22, r11	; 0x16
    4086:	84 81       	ldd	r24, Z+4	; 0x04
    4088:	80 68       	ori	r24, 0x80	; 128
    408a:	84 83       	std	Z+4, r24	; 0x04
    408c:	c7 01       	movw	r24, r14
    408e:	26 df       	rcall	.-436    	; 0x3edc <_ZN6SdFile4syncEv>
    4090:	88 23       	and	r24, r24
    4092:	09 f4       	brne	.+2      	; 0x4096 <_ZN6SdFile8truncateEm+0x11a>
    4094:	a5 cf       	rjmp	.-182    	; 0x3fe0 <_ZN6SdFile8truncateEm+0x64>
    4096:	b5 01       	movw	r22, r10
    4098:	a4 01       	movw	r20, r8
    409a:	48 14       	cp	r4, r8
    409c:	59 04       	cpc	r5, r9
    409e:	6a 04       	cpc	r6, r10
    40a0:	7b 04       	cpc	r7, r11
    40a2:	10 f4       	brcc	.+4      	; 0x40a8 <_ZN6SdFile8truncateEm+0x12c>
    40a4:	b3 01       	movw	r22, r6
    40a6:	a2 01       	movw	r20, r4
    40a8:	c7 01       	movw	r24, r14
    40aa:	82 de       	rcall	.-764    	; 0x3db0 <_ZN6SdFile7seekSetEm>
    40ac:	01 c0       	rjmp	.+2      	; 0x40b0 <_ZN6SdFile8truncateEm+0x134>
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	df 91       	pop	r29
    40ba:	cf 91       	pop	r28
    40bc:	1f 91       	pop	r17
    40be:	0f 91       	pop	r16
    40c0:	ff 90       	pop	r15
    40c2:	ef 90       	pop	r14
    40c4:	bf 90       	pop	r11
    40c6:	af 90       	pop	r10
    40c8:	9f 90       	pop	r9
    40ca:	8f 90       	pop	r8
    40cc:	7f 90       	pop	r7
    40ce:	6f 90       	pop	r6
    40d0:	5f 90       	pop	r5
    40d2:	4f 90       	pop	r4
    40d4:	08 95       	ret

000040d6 <_ZN6SdFile15openCachedEntryEhh>:
    40d6:	1f 93       	push	r17
    40d8:	cf 93       	push	r28
    40da:	df 93       	push	r29
    40dc:	ec 01       	movw	r28, r24
    40de:	80 e2       	ldi	r24, 0x20	; 32
    40e0:	68 9f       	mul	r22, r24
    40e2:	f0 01       	movw	r30, r0
    40e4:	11 24       	eor	r1, r1
    40e6:	e7 5a       	subi	r30, 0xA7	; 167
    40e8:	f8 4f       	sbci	r31, 0xF8	; 248
    40ea:	93 85       	ldd	r25, Z+11	; 0x0b
    40ec:	91 71       	andi	r25, 0x11	; 17
    40ee:	29 f0       	breq	.+10     	; 0x40fa <_ZN6SdFile15openCachedEntryEhh+0x24>
    40f0:	84 2f       	mov	r24, r20
    40f2:	82 74       	andi	r24, 0x42	; 66
    40f4:	11 f0       	breq	.+4      	; 0x40fa <_ZN6SdFile15openCachedEntryEhh+0x24>
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	50 c0       	rjmp	.+160    	; 0x419a <_ZN6SdFile15openCachedEntryEhh+0xc4>
    40fa:	14 2f       	mov	r17, r20
    40fc:	6a 8b       	std	Y+18, r22	; 0x12
    40fe:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    4102:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4106:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    410a:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    410e:	8e 87       	std	Y+14, r24	; 0x0e
    4110:	9f 87       	std	Y+15, r25	; 0x0f
    4112:	a8 8b       	std	Y+16, r26	; 0x10
    4114:	b9 8b       	std	Y+17, r27	; 0x11
    4116:	44 89       	ldd	r20, Z+20	; 0x14
    4118:	55 89       	ldd	r21, Z+21	; 0x15
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	ba 01       	movw	r22, r20
    4120:	55 27       	eor	r21, r21
    4122:	44 27       	eor	r20, r20
    4124:	82 8d       	ldd	r24, Z+26	; 0x1a
    4126:	93 8d       	ldd	r25, Z+27	; 0x1b
    4128:	a0 e0       	ldi	r26, 0x00	; 0
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	48 2b       	or	r20, r24
    412e:	59 2b       	or	r21, r25
    4130:	6a 2b       	or	r22, r26
    4132:	7b 2b       	or	r23, r27
    4134:	4f 8b       	std	Y+23, r20	; 0x17
    4136:	58 8f       	std	Y+24, r21	; 0x18
    4138:	69 8f       	std	Y+25, r22	; 0x19
    413a:	7a 8f       	std	Y+26, r23	; 0x1a
    413c:	83 85       	ldd	r24, Z+11	; 0x0b
    413e:	88 71       	andi	r24, 0x18	; 24
    4140:	51 f4       	brne	.+20     	; 0x4156 <_ZN6SdFile15openCachedEntryEhh+0x80>
    4142:	84 8d       	ldd	r24, Z+28	; 0x1c
    4144:	95 8d       	ldd	r25, Z+29	; 0x1d
    4146:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4148:	b7 8d       	ldd	r27, Z+31	; 0x1f
    414a:	8b 8b       	std	Y+19, r24	; 0x13
    414c:	9c 8b       	std	Y+20, r25	; 0x14
    414e:	ad 8b       	std	Y+21, r26	; 0x15
    4150:	be 8b       	std	Y+22, r27	; 0x16
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	0b c0       	rjmp	.+22     	; 0x416c <_ZN6SdFile15openCachedEntryEhh+0x96>
    4156:	80 31       	cpi	r24, 0x10	; 16
    4158:	71 f6       	brne	.-100    	; 0x40f6 <_ZN6SdFile15openCachedEntryEhh+0x20>
    415a:	9e 01       	movw	r18, r28
    415c:	2d 5e       	subi	r18, 0xED	; 237
    415e:	3f 4f       	sbci	r19, 0xFF	; 255
    4160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4164:	c5 d3       	rcall	.+1930   	; 0x48f0 <_ZNK8SdVolume9chainSizeEmPm>
    4166:	88 23       	and	r24, r24
    4168:	31 f2       	breq	.-116    	; 0x40f6 <_ZN6SdFile15openCachedEntryEhh+0x20>
    416a:	84 e0       	ldi	r24, 0x04	; 4
    416c:	8d 83       	std	Y+5, r24	; 0x05
    416e:	81 2f       	mov	r24, r17
    4170:	8f 70       	andi	r24, 0x0F	; 15
    4172:	8c 83       	std	Y+4, r24	; 0x04
    4174:	1e 82       	std	Y+6, r1	; 0x06
    4176:	1f 82       	std	Y+7, r1	; 0x07
    4178:	18 86       	std	Y+8, r1	; 0x08
    417a:	19 86       	std	Y+9, r1	; 0x09
    417c:	1a 86       	std	Y+10, r1	; 0x0a
    417e:	1b 86       	std	Y+11, r1	; 0x0b
    4180:	1c 86       	std	Y+12, r1	; 0x0c
    4182:	1d 86       	std	Y+13, r1	; 0x0d
    4184:	16 ff       	sbrs	r17, 6
    4186:	08 c0       	rjmp	.+16     	; 0x4198 <_ZN6SdFile15openCachedEntryEhh+0xc2>
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	50 e0       	ldi	r21, 0x00	; 0
    418c:	ba 01       	movw	r22, r20
    418e:	ce 01       	movw	r24, r28
    4190:	df 91       	pop	r29
    4192:	cf 91       	pop	r28
    4194:	1f 91       	pop	r17
    4196:	f2 ce       	rjmp	.-540    	; 0x3f7c <_ZN6SdFile8truncateEm>
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	1f 91       	pop	r17
    41a0:	08 95       	ret

000041a2 <_ZN6SdFile4openEPS_PKch>:
    41a2:	bf 92       	push	r11
    41a4:	cf 92       	push	r12
    41a6:	df 92       	push	r13
    41a8:	ef 92       	push	r14
    41aa:	ff 92       	push	r15
    41ac:	0f 93       	push	r16
    41ae:	1f 93       	push	r17
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	2b 97       	sbiw	r28, 0x0b	; 11
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	fc 01       	movw	r30, r24
    41c6:	35 81       	ldd	r19, Z+5	; 0x05
    41c8:	31 11       	cpse	r19, r1
    41ca:	b9 c0       	rjmp	.+370    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    41cc:	c2 2e       	mov	r12, r18
    41ce:	8b 01       	movw	r16, r22
    41d0:	7c 01       	movw	r14, r24
    41d2:	be 01       	movw	r22, r28
    41d4:	6f 5f       	subi	r22, 0xFF	; 255
    41d6:	7f 4f       	sbci	r23, 0xFF	; 255
    41d8:	ca 01       	movw	r24, r20
    41da:	17 dc       	rcall	.-2002   	; 0x3a0a <_ZN6SdFile10make83NameEPKcPh>
    41dc:	88 23       	and	r24, r24
    41de:	09 f4       	brne	.+2      	; 0x41e2 <_ZN6SdFile4openEPS_PKch+0x40>
    41e0:	ae c0       	rjmp	.+348    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    41e2:	f8 01       	movw	r30, r16
    41e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    41e6:	94 8d       	ldd	r25, Z+28	; 0x1c
    41e8:	f7 01       	movw	r30, r14
    41ea:	94 8f       	std	Z+28, r25	; 0x1c
    41ec:	83 8f       	std	Z+27, r24	; 0x1b
    41ee:	f8 01       	movw	r30, r16
    41f0:	16 82       	std	Z+6, r1	; 0x06
    41f2:	17 82       	std	Z+7, r1	; 0x07
    41f4:	10 86       	std	Z+8, r1	; 0x08
    41f6:	11 86       	std	Z+9, r1	; 0x09
    41f8:	12 86       	std	Z+10, r1	; 0x0a
    41fa:	13 86       	std	Z+11, r1	; 0x0b
    41fc:	14 86       	std	Z+12, r1	; 0x0c
    41fe:	15 86       	std	Z+13, r1	; 0x0d
    4200:	d1 2c       	mov	r13, r1
    4202:	f8 01       	movw	r30, r16
    4204:	82 85       	ldd	r24, Z+10	; 0x0a
    4206:	93 85       	ldd	r25, Z+11	; 0x0b
    4208:	a4 85       	ldd	r26, Z+12	; 0x0c
    420a:	b5 85       	ldd	r27, Z+13	; 0x0d
    420c:	43 89       	ldd	r20, Z+19	; 0x13
    420e:	54 89       	ldd	r21, Z+20	; 0x14
    4210:	65 89       	ldd	r22, Z+21	; 0x15
    4212:	76 89       	ldd	r23, Z+22	; 0x16
    4214:	84 17       	cp	r24, r20
    4216:	95 07       	cpc	r25, r21
    4218:	a6 07       	cpc	r26, r22
    421a:	b7 07       	cpc	r27, r23
    421c:	08 f0       	brcs	.+2      	; 0x4220 <_ZN6SdFile4openEPS_PKch+0x7e>
    421e:	3d c0       	rjmp	.+122    	; 0x429a <_ZN6SdFile4openEPS_PKch+0xf8>
    4220:	25 e0       	ldi	r18, 0x05	; 5
    4222:	b6 95       	lsr	r27
    4224:	a7 95       	ror	r26
    4226:	97 95       	ror	r25
    4228:	87 95       	ror	r24
    422a:	2a 95       	dec	r18
    422c:	d1 f7       	brne	.-12     	; 0x4222 <_ZN6SdFile4openEPS_PKch+0x80>
    422e:	f8 2f       	mov	r31, r24
    4230:	ff 70       	andi	r31, 0x0F	; 15
    4232:	bf 2e       	mov	r11, r31
    4234:	c8 01       	movw	r24, r16
    4236:	74 dd       	rcall	.-1304   	; 0x3d20 <_ZN6SdFile12readDirCacheEv>
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	09 f4       	brne	.+2      	; 0x423e <_ZN6SdFile4openEPS_PKch+0x9c>
    423c:	80 c0       	rjmp	.+256    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    423e:	fc 01       	movw	r30, r24
    4240:	20 81       	ld	r18, Z
    4242:	22 23       	and	r18, r18
    4244:	a1 f0       	breq	.+40     	; 0x426e <_ZN6SdFile4openEPS_PKch+0xcc>
    4246:	25 3e       	cpi	r18, 0xE5	; 229
    4248:	09 f4       	brne	.+2      	; 0x424c <_ZN6SdFile4openEPS_PKch+0xaa>
    424a:	7b c0       	rjmp	.+246    	; 0x4342 <_ZN6SdFile4openEPS_PKch+0x1a0>
    424c:	4b e0       	ldi	r20, 0x0B	; 11
    424e:	50 e0       	ldi	r21, 0x00	; 0
    4250:	bc 01       	movw	r22, r24
    4252:	ce 01       	movw	r24, r28
    4254:	01 96       	adiw	r24, 0x01	; 1
    4256:	0e 94 61 32 	call	0x64c2	; 0x64c2 <memcmp>
    425a:	89 2b       	or	r24, r25
    425c:	91 f6       	brne	.-92     	; 0x4202 <_ZN6SdFile4openEPS_PKch+0x60>
    425e:	8c 2d       	mov	r24, r12
    4260:	80 73       	andi	r24, 0x30	; 48
    4262:	80 33       	cpi	r24, 0x30	; 48
    4264:	09 f4       	brne	.+2      	; 0x4268 <_ZN6SdFile4openEPS_PKch+0xc6>
    4266:	6b c0       	rjmp	.+214    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    4268:	4c 2d       	mov	r20, r12
    426a:	6b 2d       	mov	r22, r11
    426c:	65 c0       	rjmp	.+202    	; 0x4338 <_ZN6SdFile4openEPS_PKch+0x196>
    426e:	d1 10       	cpse	r13, r1
    4270:	12 c0       	rjmp	.+36     	; 0x4296 <_ZN6SdFile4openEPS_PKch+0xf4>
    4272:	f7 01       	movw	r30, r14
    4274:	b2 8a       	std	Z+18, r11	; 0x12
    4276:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    427a:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    427e:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    4282:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4286:	46 87       	std	Z+14, r20	; 0x0e
    4288:	57 87       	std	Z+15, r21	; 0x0f
    428a:	60 8b       	std	Z+16, r22	; 0x10
    428c:	71 8b       	std	Z+17, r23	; 0x11
    428e:	fc 01       	movw	r30, r24
    4290:	80 81       	ld	r24, Z
    4292:	81 11       	cpse	r24, r1
    4294:	59 c0       	rjmp	.+178    	; 0x4348 <_ZN6SdFile4openEPS_PKch+0x1a6>
    4296:	dd 24       	eor	r13, r13
    4298:	d3 94       	inc	r13
    429a:	8c 2d       	mov	r24, r12
    429c:	82 71       	andi	r24, 0x12	; 18
    429e:	82 31       	cpi	r24, 0x12	; 18
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <_ZN6SdFile4openEPS_PKch+0x102>
    42a2:	4d c0       	rjmp	.+154    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    42a4:	dd 20       	and	r13, r13
    42a6:	39 f0       	breq	.+14     	; 0x42b6 <_ZN6SdFile4openEPS_PKch+0x114>
    42a8:	61 e0       	ldi	r22, 0x01	; 1
    42aa:	c7 01       	movw	r24, r14
    42ac:	96 db       	rcall	.-2260   	; 0x39da <_ZN6SdFile13cacheDirEntryEh>
    42ae:	8c 01       	movw	r16, r24
    42b0:	89 2b       	or	r24, r25
    42b2:	71 f4       	brne	.+28     	; 0x42d0 <_ZN6SdFile4openEPS_PKch+0x12e>
    42b4:	44 c0       	rjmp	.+136    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    42b6:	f8 01       	movw	r30, r16
    42b8:	85 81       	ldd	r24, Z+5	; 0x05
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <_ZN6SdFile4openEPS_PKch+0x11e>
    42be:	3f c0       	rjmp	.+126    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    42c0:	c8 01       	movw	r24, r16
    42c2:	2d db       	rcall	.-2470   	; 0x391e <_ZN6SdFile13addDirClusterEv>
    42c4:	88 23       	and	r24, r24
    42c6:	d9 f1       	breq	.+118    	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    42c8:	f7 01       	movw	r30, r14
    42ca:	12 8a       	std	Z+18, r1	; 0x12
    42cc:	09 e5       	ldi	r16, 0x59	; 89
    42ce:	17 e0       	ldi	r17, 0x07	; 7
    42d0:	80 e2       	ldi	r24, 0x20	; 32
    42d2:	f8 01       	movw	r30, r16
    42d4:	11 92       	st	Z+, r1
    42d6:	8a 95       	dec	r24
    42d8:	e9 f7       	brne	.-6      	; 0x42d4 <_ZN6SdFile4openEPS_PKch+0x132>
    42da:	8b e0       	ldi	r24, 0x0B	; 11
    42dc:	fe 01       	movw	r30, r28
    42de:	31 96       	adiw	r30, 0x01	; 1
    42e0:	d8 01       	movw	r26, r16
    42e2:	01 90       	ld	r0, Z+
    42e4:	0d 92       	st	X+, r0
    42e6:	8a 95       	dec	r24
    42e8:	e1 f7       	brne	.-8      	; 0x42e2 <_ZN6SdFile4openEPS_PKch+0x140>
    42ea:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <_ZN6SdFile9dateTime_E>
    42ee:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <_ZN6SdFile9dateTime_E+0x1>
    42f2:	30 97       	sbiw	r30, 0x00	; 0
    42f4:	39 f0       	breq	.+14     	; 0x4304 <_ZN6SdFile4openEPS_PKch+0x162>
    42f6:	b8 01       	movw	r22, r16
    42f8:	62 5f       	subi	r22, 0xF2	; 242
    42fa:	7f 4f       	sbci	r23, 0xFF	; 255
    42fc:	c8 01       	movw	r24, r16
    42fe:	40 96       	adiw	r24, 0x10	; 16
    4300:	19 95       	eicall
    4302:	09 c0       	rjmp	.+18     	; 0x4316 <_ZN6SdFile4openEPS_PKch+0x174>
    4304:	81 e2       	ldi	r24, 0x21	; 33
    4306:	98 e2       	ldi	r25, 0x28	; 40
    4308:	f8 01       	movw	r30, r16
    430a:	91 8b       	std	Z+17, r25	; 0x11
    430c:	80 8b       	std	Z+16, r24	; 0x10
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	98 e0       	ldi	r25, 0x08	; 8
    4312:	97 87       	std	Z+15, r25	; 0x0f
    4314:	86 87       	std	Z+14, r24	; 0x0e
    4316:	f8 01       	movw	r30, r16
    4318:	80 89       	ldd	r24, Z+16	; 0x10
    431a:	91 89       	ldd	r25, Z+17	; 0x11
    431c:	93 8b       	std	Z+19, r25	; 0x13
    431e:	82 8b       	std	Z+18, r24	; 0x12
    4320:	91 8f       	std	Z+25, r25	; 0x19
    4322:	80 8f       	std	Z+24, r24	; 0x18
    4324:	86 85       	ldd	r24, Z+14	; 0x0e
    4326:	97 85       	ldd	r25, Z+15	; 0x0f
    4328:	97 8b       	std	Z+23, r25	; 0x17
    432a:	86 8b       	std	Z+22, r24	; 0x16
    432c:	ca d1       	rcall	.+916    	; 0x46c2 <_ZN8SdVolume10cacheFlushEv>
    432e:	88 23       	and	r24, r24
    4330:	31 f0       	breq	.+12     	; 0x433e <_ZN6SdFile4openEPS_PKch+0x19c>
    4332:	4c 2d       	mov	r20, r12
    4334:	f7 01       	movw	r30, r14
    4336:	62 89       	ldd	r22, Z+18	; 0x12
    4338:	c7 01       	movw	r24, r14
    433a:	cd de       	rcall	.-614    	; 0x40d6 <_ZN6SdFile15openCachedEntryEhh>
    433c:	08 c0       	rjmp	.+16     	; 0x434e <_ZN6SdFile4openEPS_PKch+0x1ac>
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	06 c0       	rjmp	.+12     	; 0x434e <_ZN6SdFile4openEPS_PKch+0x1ac>
    4342:	dd 20       	and	r13, r13
    4344:	09 f4       	brne	.+2      	; 0x4348 <_ZN6SdFile4openEPS_PKch+0x1a6>
    4346:	95 cf       	rjmp	.-214    	; 0x4272 <_ZN6SdFile4openEPS_PKch+0xd0>
    4348:	dd 24       	eor	r13, r13
    434a:	d3 94       	inc	r13
    434c:	5a cf       	rjmp	.-332    	; 0x4202 <_ZN6SdFile4openEPS_PKch+0x60>
    434e:	2b 96       	adiw	r28, 0x0b	; 11
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	df 90       	pop	r13
    4368:	cf 90       	pop	r12
    436a:	bf 90       	pop	r11
    436c:	08 95       	ret

0000436e <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    436e:	2f 92       	push	r2
    4370:	3f 92       	push	r3
    4372:	4f 92       	push	r4
    4374:	5f 92       	push	r5
    4376:	6f 92       	push	r6
    4378:	7f 92       	push	r7
    437a:	8f 92       	push	r8
    437c:	9f 92       	push	r9
    437e:	af 92       	push	r10
    4380:	bf 92       	push	r11
    4382:	cf 92       	push	r12
    4384:	df 92       	push	r13
    4386:	ef 92       	push	r14
    4388:	ff 92       	push	r15
    438a:	0f 93       	push	r16
    438c:	1f 93       	push	r17
    438e:	cf 93       	push	r28
    4390:	df 93       	push	r29
    4392:	00 d0       	rcall	.+0      	; 0x4394 <_ZN6SdFile5writeEPKvj+0x26>
    4394:	1f 92       	push	r1
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	8c 01       	movw	r16, r24
    439c:	6b 01       	movw	r12, r22
    439e:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    43a0:	dc 01       	movw	r26, r24
    43a2:	15 96       	adiw	r26, 0x05	; 5
    43a4:	8c 91       	ld	r24, X
    43a6:	15 97       	sbiw	r26, 0x05	; 5
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	c1 f4       	brne	.+48     	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>
    43ac:	14 96       	adiw	r26, 0x04	; 4
    43ae:	8c 91       	ld	r24, X
    43b0:	81 ff       	sbrs	r24, 1
    43b2:	14 c0       	rjmp	.+40     	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    43b4:	82 ff       	sbrs	r24, 2
    43b6:	1c c0       	rjmp	.+56     	; 0x43f0 <_ZN6SdFile5writeEPKvj+0x82>
    43b8:	f8 01       	movw	r30, r16
    43ba:	43 89       	ldd	r20, Z+19	; 0x13
    43bc:	54 89       	ldd	r21, Z+20	; 0x14
    43be:	65 89       	ldd	r22, Z+21	; 0x15
    43c0:	76 89       	ldd	r23, Z+22	; 0x16
    43c2:	82 85       	ldd	r24, Z+10	; 0x0a
    43c4:	93 85       	ldd	r25, Z+11	; 0x0b
    43c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    43c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    43ca:	84 17       	cp	r24, r20
    43cc:	95 07       	cpc	r25, r21
    43ce:	a6 07       	cpc	r26, r22
    43d0:	b7 07       	cpc	r27, r23
    43d2:	71 f0       	breq	.+28     	; 0x43f0 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    43d4:	c8 01       	movw	r24, r16
    43d6:	ec dc       	rcall	.-1576   	; 0x3db0 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    43d8:	81 11       	cpse	r24, r1
    43da:	0a c0       	rjmp	.+20     	; 0x43f0 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	d8 01       	movw	r26, r16
    43e2:	13 96       	adiw	r26, 0x03	; 3
    43e4:	9c 93       	st	X, r25
    43e6:	8e 93       	st	-X, r24
    43e8:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	42 c1       	rjmp	.+644    	; 0x4674 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    43f0:	41 01       	movw	r8, r2
    43f2:	82 c0       	rjmp	.+260    	; 0x44f8 <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    43f4:	5b 96       	adiw	r26, 0x1b	; 27
    43f6:	8d 91       	ld	r24, X+
    43f8:	9c 91       	ld	r25, X
    43fa:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    43fc:	fc 01       	movw	r30, r24
    43fe:	74 80       	ldd	r7, Z+4	; 0x04
    4400:	2f ef       	ldi	r18, 0xFF	; 255
    4402:	27 0d       	add	r18, r7
    4404:	2a 01       	movw	r4, r20
    4406:	3b 01       	movw	r6, r22
    4408:	39 e0       	ldi	r19, 0x09	; 9
    440a:	76 94       	lsr	r7
    440c:	67 94       	ror	r6
    440e:	57 94       	ror	r5
    4410:	47 94       	ror	r4
    4412:	3a 95       	dec	r19
    4414:	d1 f7       	brne	.-12     	; 0x440a <_ZN6SdFile5writeEPKvj+0x9c>
    4416:	72 2e       	mov	r7, r18
    4418:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    441a:	7a 01       	movw	r14, r20
    441c:	f1 e0       	ldi	r31, 0x01	; 1
    441e:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    4420:	77 20       	and	r7, r7
    4422:	09 f4       	brne	.+2      	; 0x4426 <_ZN6SdFile5writeEPKvj+0xb8>
    4424:	75 c0       	rjmp	.+234    	; 0x4510 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	92 e0       	ldi	r25, 0x02	; 2
    442a:	8e 19       	sub	r24, r14
    442c:	9f 09       	sbc	r25, r15
    442e:	54 01       	movw	r10, r8
    4430:	88 15       	cp	r24, r8
    4432:	99 05       	cpc	r25, r9
    4434:	08 f4       	brcc	.+2      	; 0x4438 <_ZN6SdFile5writeEPKvj+0xca>
    4436:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    4438:	d8 01       	movw	r26, r16
    443a:	5b 96       	adiw	r26, 0x1b	; 27
    443c:	2d 91       	ld	r18, X+
    443e:	3c 91       	ld	r19, X
    4440:	5c 97       	sbiw	r26, 0x1c	; 28
    4442:	16 96       	adiw	r26, 0x06	; 6
    4444:	8d 91       	ld	r24, X+
    4446:	9d 91       	ld	r25, X+
    4448:	0d 90       	ld	r0, X+
    444a:	bc 91       	ld	r27, X
    444c:	a0 2d       	mov	r26, r0
    444e:	02 97       	sbiw	r24, 0x02	; 2
    4450:	a1 09       	sbc	r26, r1
    4452:	b1 09       	sbc	r27, r1
    4454:	f9 01       	movw	r30, r18
    4456:	05 84       	ldd	r0, Z+13	; 0x0d
    4458:	04 c0       	rjmp	.+8      	; 0x4462 <_ZN6SdFile5writeEPKvj+0xf4>
    445a:	88 0f       	add	r24, r24
    445c:	99 1f       	adc	r25, r25
    445e:	aa 1f       	adc	r26, r26
    4460:	bb 1f       	adc	r27, r27
    4462:	0a 94       	dec	r0
    4464:	d2 f7       	brpl	.-12     	; 0x445a <_ZN6SdFile5writeEPKvj+0xec>
    4466:	46 85       	ldd	r20, Z+14	; 0x0e
    4468:	57 85       	ldd	r21, Z+15	; 0x0f
    446a:	60 89       	ldd	r22, Z+16	; 0x10
    446c:	71 89       	ldd	r23, Z+17	; 0x11
    446e:	84 0f       	add	r24, r20
    4470:	95 1f       	adc	r25, r21
    4472:	a6 1f       	adc	r26, r22
    4474:	b7 1f       	adc	r27, r23
    4476:	9c 01       	movw	r18, r24
    4478:	ad 01       	movw	r20, r26
    447a:	27 0d       	add	r18, r7
    447c:	31 1d       	adc	r19, r1
    447e:	41 1d       	adc	r20, r1
    4480:	51 1d       	adc	r21, r1
    4482:	29 01       	movw	r4, r18
    4484:	3a 01       	movw	r6, r20
    if (n == 512) {
    4486:	a1 14       	cp	r10, r1
    4488:	32 e0       	ldi	r19, 0x02	; 2
    448a:	b3 06       	cpc	r11, r19
    448c:	09 f0       	breq	.+2      	; 0x4490 <_ZN6SdFile5writeEPKvj+0x122>
    448e:	85 c0       	rjmp	.+266    	; 0x459a <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    4490:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    4494:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4498:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    449c:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    44a0:	48 16       	cp	r4, r24
    44a2:	59 06       	cpc	r5, r25
    44a4:	6a 06       	cpc	r6, r26
    44a6:	7b 06       	cpc	r7, r27
    44a8:	59 f4       	brne	.+22     	; 0x44c0 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    44aa:	8f ef       	ldi	r24, 0xFF	; 255
    44ac:	9f ef       	ldi	r25, 0xFF	; 255
    44ae:	dc 01       	movw	r26, r24
    44b0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    44b4:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    44b8:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    44bc:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    44c0:	96 01       	movw	r18, r12
    44c2:	b3 01       	movw	r22, r6
    44c4:	a2 01       	movw	r20, r4
    44c6:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <_ZN8SdVolume7sdCard_E>
    44ca:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <_ZN8SdVolume7sdCard_E+0x1>
    44ce:	b3 d9       	rcall	.-3226   	; 0x3836 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    44d0:	88 23       	and	r24, r24
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <_ZN6SdFile5writeEPKvj+0x168>
    44d4:	83 cf       	rjmp	.-250    	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    44d6:	9e ef       	ldi	r25, 0xFE	; 254
    44d8:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    44da:	8a 18       	sub	r8, r10
    44dc:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    44de:	f8 01       	movw	r30, r16
    44e0:	82 85       	ldd	r24, Z+10	; 0x0a
    44e2:	93 85       	ldd	r25, Z+11	; 0x0b
    44e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    44e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    44e8:	8a 0d       	add	r24, r10
    44ea:	9b 1d       	adc	r25, r11
    44ec:	a1 1d       	adc	r26, r1
    44ee:	b1 1d       	adc	r27, r1
    44f0:	82 87       	std	Z+10, r24	; 0x0a
    44f2:	93 87       	std	Z+11, r25	; 0x0b
    44f4:	a4 87       	std	Z+12, r26	; 0x0c
    44f6:	b5 87       	std	Z+13, r27	; 0x0d
    44f8:	d8 01       	movw	r26, r16
    44fa:	1a 96       	adiw	r26, 0x0a	; 10
    44fc:	4d 91       	ld	r20, X+
    44fe:	5d 91       	ld	r21, X+
    4500:	6d 91       	ld	r22, X+
    4502:	7c 91       	ld	r23, X
    4504:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    4506:	81 14       	cp	r8, r1
    4508:	91 04       	cpc	r9, r1
    450a:	09 f0       	breq	.+2      	; 0x450e <_ZN6SdFile5writeEPKvj+0x1a0>
    450c:	73 cf       	rjmp	.-282    	; 0x43f4 <_ZN6SdFile5writeEPKvj+0x86>
    450e:	83 c0       	rjmp	.+262    	; 0x4616 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    4510:	e1 14       	cp	r14, r1
    4512:	f1 04       	cpc	r15, r1
    4514:	09 f0       	breq	.+2      	; 0x4518 <_ZN6SdFile5writeEPKvj+0x1aa>
    4516:	87 cf       	rjmp	.-242    	; 0x4426 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    4518:	16 96       	adiw	r26, 0x06	; 6
    451a:	4d 91       	ld	r20, X+
    451c:	5d 91       	ld	r21, X+
    451e:	6d 91       	ld	r22, X+
    4520:	7c 91       	ld	r23, X
    4522:	19 97       	sbiw	r26, 0x09	; 9
    4524:	41 15       	cp	r20, r1
    4526:	51 05       	cpc	r21, r1
    4528:	61 05       	cpc	r22, r1
    452a:	71 05       	cpc	r23, r1
    452c:	59 f4       	brne	.+22     	; 0x4544 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    452e:	57 96       	adiw	r26, 0x17	; 23
    4530:	8d 91       	ld	r24, X+
    4532:	9d 91       	ld	r25, X+
    4534:	0d 90       	ld	r0, X+
    4536:	bc 91       	ld	r27, X
    4538:	a0 2d       	mov	r26, r0
    453a:	00 97       	sbiw	r24, 0x00	; 0
    453c:	a1 05       	cpc	r26, r1
    453e:	b1 05       	cpc	r27, r1
    4540:	31 f5       	brne	.+76     	; 0x458e <_ZN6SdFile5writeEPKvj+0x220>
    4542:	20 c0       	rjmp	.+64     	; 0x4584 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    4544:	9e 01       	movw	r18, r28
    4546:	2f 5f       	subi	r18, 0xFF	; 255
    4548:	3f 4f       	sbci	r19, 0xFF	; 255
    454a:	50 d1       	rcall	.+672    	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    454c:	88 23       	and	r24, r24
    454e:	09 f4       	brne	.+2      	; 0x4552 <_ZN6SdFile5writeEPKvj+0x1e4>
    4550:	4d cf       	rjmp	.-358    	; 0x43ec <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	9a 81       	ldd	r25, Y+2	; 0x02
    4556:	ab 81       	ldd	r26, Y+3	; 0x03
    4558:	bc 81       	ldd	r27, Y+4	; 0x04
    455a:	f8 01       	movw	r30, r16
    455c:	23 8d       	ldd	r18, Z+27	; 0x1b
    455e:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4560:	f9 01       	movw	r30, r18
    4562:	27 89       	ldd	r18, Z+23	; 0x17
    4564:	20 31       	cpi	r18, 0x10	; 16
    4566:	29 f0       	breq	.+10     	; 0x4572 <_ZN6SdFile5writeEPKvj+0x204>
    4568:	48 ef       	ldi	r20, 0xF8	; 248
    456a:	5f ef       	ldi	r21, 0xFF	; 255
    456c:	6f ef       	ldi	r22, 0xFF	; 255
    456e:	7f e0       	ldi	r23, 0x0F	; 15
    4570:	04 c0       	rjmp	.+8      	; 0x457a <_ZN6SdFile5writeEPKvj+0x20c>
    4572:	48 ef       	ldi	r20, 0xF8	; 248
    4574:	5f ef       	ldi	r21, 0xFF	; 255
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	70 e0       	ldi	r23, 0x00	; 0
    457a:	84 17       	cp	r24, r20
    457c:	95 07       	cpc	r25, r21
    457e:	a6 07       	cpc	r26, r22
    4580:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    4582:	28 f0       	brcs	.+10     	; 0x458e <_ZN6SdFile5writeEPKvj+0x220>
    4584:	c8 01       	movw	r24, r16
    4586:	a4 d9       	rcall	.-3256   	; 0x38d0 <_ZN6SdFile10addClusterEv>
    4588:	81 11       	cpse	r24, r1
    458a:	4d cf       	rjmp	.-358    	; 0x4426 <_ZN6SdFile5writeEPKvj+0xb8>
    458c:	27 cf       	rjmp	.-434    	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    458e:	f8 01       	movw	r30, r16
    4590:	86 83       	std	Z+6, r24	; 0x06
    4592:	97 83       	std	Z+7, r25	; 0x07
    4594:	a0 87       	std	Z+8, r26	; 0x08
    4596:	b1 87       	std	Z+9, r27	; 0x09
    4598:	46 cf       	rjmp	.-372    	; 0x4426 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    459a:	e1 14       	cp	r14, r1
    459c:	f1 04       	cpc	r15, r1
    459e:	21 f5       	brne	.+72     	; 0x45e8 <_ZN6SdFile5writeEPKvj+0x27a>
    45a0:	d8 01       	movw	r26, r16
    45a2:	1a 96       	adiw	r26, 0x0a	; 10
    45a4:	4d 91       	ld	r20, X+
    45a6:	5d 91       	ld	r21, X+
    45a8:	6d 91       	ld	r22, X+
    45aa:	7c 91       	ld	r23, X
    45ac:	1d 97       	sbiw	r26, 0x0d	; 13
    45ae:	53 96       	adiw	r26, 0x13	; 19
    45b0:	8d 91       	ld	r24, X+
    45b2:	9d 91       	ld	r25, X+
    45b4:	0d 90       	ld	r0, X+
    45b6:	bc 91       	ld	r27, X
    45b8:	a0 2d       	mov	r26, r0
    45ba:	48 17       	cp	r20, r24
    45bc:	59 07       	cpc	r21, r25
    45be:	6a 07       	cpc	r22, r26
    45c0:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    45c2:	90 f0       	brcs	.+36     	; 0x45e8 <_ZN6SdFile5writeEPKvj+0x27a>
    45c4:	7e d0       	rcall	.+252    	; 0x46c2 <_ZN8SdVolume10cacheFlushEv>
    45c6:	88 23       	and	r24, r24
    45c8:	09 f4       	brne	.+2      	; 0x45cc <_ZN6SdFile5writeEPKvj+0x25e>
    45ca:	08 cf       	rjmp	.-496    	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    45cc:	40 92 21 02 	sts	0x0221, r4	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    45d0:	50 92 22 02 	sts	0x0222, r5	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    45d4:	60 92 23 02 	sts	0x0223, r6	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    45d8:	70 92 24 02 	sts	0x0224, r7	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    45dc:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
    45e0:	81 60       	ori	r24, 0x01	; 1
    45e2:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    45e6:	07 c0       	rjmp	.+14     	; 0x45f6 <_ZN6SdFile5writeEPKvj+0x288>
    45e8:	41 e0       	ldi	r20, 0x01	; 1
    45ea:	c3 01       	movw	r24, r6
    45ec:	b2 01       	movw	r22, r4
    45ee:	a2 d0       	rcall	.+324    	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    45f0:	88 23       	and	r24, r24
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <_ZN6SdFile5writeEPKvj+0x288>
    45f4:	f3 ce       	rjmp	.-538    	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>
    45f6:	d6 01       	movw	r26, r12
    45f8:	f7 01       	movw	r30, r14
    45fa:	e7 5a       	subi	r30, 0xA7	; 167
    45fc:	f8 4f       	sbci	r31, 0xF8	; 248
    45fe:	9f 01       	movw	r18, r30
    4600:	2a 0d       	add	r18, r10
    4602:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    4604:	2e 17       	cp	r18, r30
    4606:	3f 07       	cpc	r19, r31
    4608:	19 f0       	breq	.+6      	; 0x4610 <_ZN6SdFile5writeEPKvj+0x2a2>
    460a:	8d 91       	ld	r24, X+
    460c:	81 93       	st	Z+, r24
    460e:	fa cf       	rjmp	.-12     	; 0x4604 <_ZN6SdFile5writeEPKvj+0x296>
    4610:	ca 0c       	add	r12, r10
    4612:	db 1c       	adc	r13, r11
    4614:	62 cf       	rjmp	.-316    	; 0x44da <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    4616:	d8 01       	movw	r26, r16
    4618:	53 96       	adiw	r26, 0x13	; 19
    461a:	cd 90       	ld	r12, X+
    461c:	dd 90       	ld	r13, X+
    461e:	ed 90       	ld	r14, X+
    4620:	fc 90       	ld	r15, X
    4622:	56 97       	sbiw	r26, 0x16	; 22
    4624:	14 96       	adiw	r26, 0x04	; 4
    4626:	8c 91       	ld	r24, X
    4628:	c4 16       	cp	r12, r20
    462a:	d5 06       	cpc	r13, r21
    462c:	e6 06       	cpc	r14, r22
    462e:	f7 06       	cpc	r15, r23
    4630:	40 f4       	brcc	.+16     	; 0x4642 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    4632:	f8 01       	movw	r30, r16
    4634:	43 8b       	std	Z+19, r20	; 0x13
    4636:	54 8b       	std	Z+20, r21	; 0x14
    4638:	65 8b       	std	Z+21, r22	; 0x15
    463a:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    463c:	80 68       	ori	r24, 0x80	; 128
    463e:	84 83       	std	Z+4, r24	; 0x04
    4640:	0d c0       	rjmp	.+26     	; 0x465c <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    4642:	20 91 50 07 	lds	r18, 0x0750	; 0x800750 <_ZN6SdFile9dateTime_E>
    4646:	30 91 51 07 	lds	r19, 0x0751	; 0x800751 <_ZN6SdFile9dateTime_E+0x1>
    464a:	23 2b       	or	r18, r19
    464c:	39 f0       	breq	.+14     	; 0x465c <_ZN6SdFile5writeEPKvj+0x2ee>
    464e:	21 14       	cp	r2, r1
    4650:	31 04       	cpc	r3, r1
    4652:	21 f0       	breq	.+8      	; 0x465c <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    4654:	80 68       	ori	r24, 0x80	; 128
    4656:	d8 01       	movw	r26, r16
    4658:	14 96       	adiw	r26, 0x04	; 4
    465a:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    465c:	f8 01       	movw	r30, r16
    465e:	84 81       	ldd	r24, Z+4	; 0x04
    4660:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <_ZN6SdFile5writeEPKvj+0x2fa>
    4664:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    4666:	06 c0       	rjmp	.+12     	; 0x4674 <_ZN6SdFile5writeEPKvj+0x306>
    4668:	c8 01       	movw	r24, r16
    466a:	38 dc       	rcall	.-1936   	; 0x3edc <_ZN6SdFile4syncEv>
    466c:	88 23       	and	r24, r24
    466e:	09 f4       	brne	.+2      	; 0x4672 <_ZN6SdFile5writeEPKvj+0x304>
    4670:	b5 ce       	rjmp	.-662    	; 0x43dc <_ZN6SdFile5writeEPKvj+0x6e>
    4672:	f8 cf       	rjmp	.-16     	; 0x4664 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	df 91       	pop	r29
    467e:	cf 91       	pop	r28
    4680:	1f 91       	pop	r17
    4682:	0f 91       	pop	r16
    4684:	ff 90       	pop	r15
    4686:	ef 90       	pop	r14
    4688:	df 90       	pop	r13
    468a:	cf 90       	pop	r12
    468c:	bf 90       	pop	r11
    468e:	af 90       	pop	r10
    4690:	9f 90       	pop	r9
    4692:	8f 90       	pop	r8
    4694:	7f 90       	pop	r7
    4696:	6f 90       	pop	r6
    4698:	5f 90       	pop	r5
    469a:	4f 90       	pop	r4
    469c:	3f 90       	pop	r3
    469e:	2f 90       	pop	r2
    46a0:	08 95       	ret

000046a2 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	1f 92       	push	r1
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    46ae:	41 e0       	ldi	r20, 0x01	; 1
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	be 01       	movw	r22, r28
    46b4:	6f 5f       	subi	r22, 0xFF	; 255
    46b6:	7f 4f       	sbci	r23, 0xFF	; 255
    46b8:	5a de       	rcall	.-844    	; 0x436e <_ZN6SdFile5writeEPKvj>
}
    46ba:	0f 90       	pop	r0
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	08 95       	ret

000046c2 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    46c2:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
    46c6:	88 23       	and	r24, r24
    46c8:	99 f1       	breq	.+102    	; 0x4730 <_ZN8SdVolume10cacheFlushEv+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    46ca:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    46ce:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    46d2:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    46d6:	70 91 24 02 	lds	r23, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    46da:	29 e5       	ldi	r18, 0x59	; 89
    46dc:	37 e0       	ldi	r19, 0x07	; 7
    46de:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <_ZN8SdVolume7sdCard_E>
    46e2:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <_ZN8SdVolume7sdCard_E+0x1>
    46e6:	a7 d8       	rcall	.-3762   	; 0x3836 <_ZN7Sd2Card10writeBlockEmPKh>
    46e8:	81 11       	cpse	r24, r1
    46ea:	02 c0       	rjmp	.+4      	; 0x46f0 <_ZN8SdVolume10cacheFlushEv+0x2e>
      return false;
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    46f0:	40 91 52 07 	lds	r20, 0x0752	; 0x800752 <_ZN8SdVolume17cacheMirrorBlock_E>
    46f4:	50 91 53 07 	lds	r21, 0x0753	; 0x800753 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    46f8:	60 91 54 07 	lds	r22, 0x0754	; 0x800754 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    46fc:	70 91 55 07 	lds	r23, 0x0755	; 0x800755 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    4700:	41 15       	cp	r20, r1
    4702:	51 05       	cpc	r21, r1
    4704:	61 05       	cpc	r22, r1
    4706:	71 05       	cpc	r23, r1
    4708:	89 f0       	breq	.+34     	; 0x472c <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    470a:	29 e5       	ldi	r18, 0x59	; 89
    470c:	37 e0       	ldi	r19, 0x07	; 7
    470e:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <_ZN8SdVolume7sdCard_E>
    4712:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <_ZN8SdVolume7sdCard_E+0x1>
    4716:	8f d8       	rcall	.-3810   	; 0x3836 <_ZN7Sd2Card10writeBlockEmPKh>
    4718:	88 23       	and	r24, r24
    471a:	41 f3       	breq	.-48     	; 0x46ec <_ZN8SdVolume10cacheFlushEv+0x2a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    471c:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <_ZN8SdVolume17cacheMirrorBlock_E>
    4720:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    4724:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    4728:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    472c:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    4730:	81 e0       	ldi	r24, 0x01	; 1
}
    4732:	08 95       	ret

00004734 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    4734:	cf 92       	push	r12
    4736:	df 92       	push	r13
    4738:	ef 92       	push	r14
    473a:	ff 92       	push	r15
    473c:	cf 93       	push	r28
    473e:	6b 01       	movw	r12, r22
    4740:	7c 01       	movw	r14, r24
    4742:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    4744:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    4748:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    474c:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    4750:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4754:	8c 15       	cp	r24, r12
    4756:	9d 05       	cpc	r25, r13
    4758:	ae 05       	cpc	r26, r14
    475a:	bf 05       	cpc	r27, r15
    475c:	c1 f0       	breq	.+48     	; 0x478e <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    475e:	b1 df       	rcall	.-158    	; 0x46c2 <_ZN8SdVolume10cacheFlushEv>
    4760:	81 11       	cpse	r24, r1
    4762:	02 c0       	rjmp	.+4      	; 0x4768 <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	19 c0       	rjmp	.+50     	; 0x479a <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    4768:	29 e5       	ldi	r18, 0x59	; 89
    476a:	37 e0       	ldi	r19, 0x07	; 7
    476c:	b7 01       	movw	r22, r14
    476e:	a6 01       	movw	r20, r12
    4770:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <_ZN8SdVolume7sdCard_E>
    4774:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <_ZN8SdVolume7sdCard_E+0x1>
    4778:	25 d8       	rcall	.-4022   	; 0x37c4 <_ZN7Sd2Card9readBlockEmPh>
    477a:	88 23       	and	r24, r24
    477c:	99 f3       	breq	.-26     	; 0x4764 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    cacheBlockNumber_ = blockNumber;
    477e:	c0 92 21 02 	sts	0x0221, r12	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    4782:	d0 92 22 02 	sts	0x0222, r13	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4786:	e0 92 23 02 	sts	0x0223, r14	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    478a:	f0 92 24 02 	sts	0x0224, r15	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    478e:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
    4792:	c8 2b       	or	r28, r24
    4794:	c0 93 56 07 	sts	0x0756, r28	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
  return true;
    4798:	81 e0       	ldi	r24, 0x01	; 1
}
    479a:	cf 91       	pop	r28
    479c:	ff 90       	pop	r15
    479e:	ef 90       	pop	r14
    47a0:	df 90       	pop	r13
    47a2:	cf 90       	pop	r12
    47a4:	08 95       	ret

000047a6 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    47a6:	cf 92       	push	r12
    47a8:	df 92       	push	r13
    47aa:	ef 92       	push	r14
    47ac:	ff 92       	push	r15
    47ae:	6b 01       	movw	r12, r22
    47b0:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    47b2:	87 df       	rcall	.-242    	; 0x46c2 <_ZN8SdVolume10cacheFlushEv>
    47b4:	88 23       	and	r24, r24
    47b6:	a9 f0       	breq	.+42     	; 0x47e2 <_ZN8SdVolume14cacheZeroBlockEm+0x3c>
    47b8:	e9 e5       	ldi	r30, 0x59	; 89
    47ba:	f7 e0       	ldi	r31, 0x07	; 7

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    47bc:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    47be:	89 e0       	ldi	r24, 0x09	; 9
    47c0:	e9 35       	cpi	r30, 0x59	; 89
    47c2:	f8 07       	cpc	r31, r24
    47c4:	d9 f7       	brne	.-10     	; 0x47bc <_ZN8SdVolume14cacheZeroBlockEm+0x16>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    47c6:	c0 92 21 02 	sts	0x0221, r12	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    47ca:	d0 92 22 02 	sts	0x0222, r13	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    47ce:	e0 92 23 02 	sts	0x0223, r14	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    47d2:	f0 92 24 02 	sts	0x0224, r15	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    47d6:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
    47da:	81 60       	ori	r24, 0x01	; 1
    47dc:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    47e0:	81 e0       	ldi	r24, 0x01	; 1
}
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	df 90       	pop	r13
    47e8:	cf 90       	pop	r12
    47ea:	08 95       	ret

000047ec <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    47ec:	8f 92       	push	r8
    47ee:	9f 92       	push	r9
    47f0:	af 92       	push	r10
    47f2:	bf 92       	push	r11
    47f4:	cf 92       	push	r12
    47f6:	df 92       	push	r13
    47f8:	ef 92       	push	r14
    47fa:	ff 92       	push	r15
    47fc:	0f 93       	push	r16
    47fe:	1f 93       	push	r17
    4800:	cf 93       	push	r28
    4802:	df 93       	push	r29
    4804:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    4806:	81 85       	ldd	r24, Z+9	; 0x09
    4808:	92 85       	ldd	r25, Z+10	; 0x0a
    480a:	a3 85       	ldd	r26, Z+11	; 0x0b
    480c:	b4 85       	ldd	r27, Z+12	; 0x0c
    480e:	01 96       	adiw	r24, 0x01	; 1
    4810:	a1 1d       	adc	r26, r1
    4812:	b1 1d       	adc	r27, r1
    4814:	84 17       	cp	r24, r20
    4816:	95 07       	cpc	r25, r21
    4818:	a6 07       	cpc	r26, r22
    481a:	b7 07       	cpc	r27, r23
    481c:	10 f4       	brcc	.+4      	; 0x4822 <_ZNK8SdVolume6fatGetEmPm+0x36>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	5a c0       	rjmp	.+180    	; 0x48d6 <_ZNK8SdVolume6fatGetEmPm+0xea>
  uint32_t lba = fatStartBlock_;
    4822:	83 88       	ldd	r8, Z+19	; 0x13
    4824:	94 88       	ldd	r9, Z+20	; 0x14
    4826:	a5 88       	ldd	r10, Z+21	; 0x15
    4828:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    482a:	87 89       	ldd	r24, Z+23	; 0x17
    482c:	80 31       	cpi	r24, 0x10	; 16
    482e:	29 f4       	brne	.+10     	; 0x483a <_ZNK8SdVolume6fatGetEmPm+0x4e>
    4830:	bb 27       	eor	r27, r27
    4832:	a7 2f       	mov	r26, r23
    4834:	96 2f       	mov	r25, r22
    4836:	85 2f       	mov	r24, r21
    4838:	09 c0       	rjmp	.+18     	; 0x484c <_ZNK8SdVolume6fatGetEmPm+0x60>
    483a:	db 01       	movw	r26, r22
    483c:	ca 01       	movw	r24, r20
    483e:	c7 e0       	ldi	r28, 0x07	; 7
    4840:	b6 95       	lsr	r27
    4842:	a7 95       	ror	r26
    4844:	97 95       	ror	r25
    4846:	87 95       	ror	r24
    4848:	ca 95       	dec	r28
    484a:	d1 f7       	brne	.-12     	; 0x4840 <_ZNK8SdVolume6fatGetEmPm+0x54>
    484c:	e9 01       	movw	r28, r18
    484e:	6a 01       	movw	r12, r20
    4850:	7b 01       	movw	r14, r22
    4852:	8f 01       	movw	r16, r30
    4854:	bc 01       	movw	r22, r24
    4856:	cd 01       	movw	r24, r26
    4858:	68 0d       	add	r22, r8
    485a:	79 1d       	adc	r23, r9
    485c:	8a 1d       	adc	r24, r10
    485e:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    4860:	80 90 21 02 	lds	r8, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    4864:	90 90 22 02 	lds	r9, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4868:	a0 90 23 02 	lds	r10, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    486c:	b0 90 24 02 	lds	r11, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4870:	68 15       	cp	r22, r8
    4872:	79 05       	cpc	r23, r9
    4874:	8a 05       	cpc	r24, r10
    4876:	9b 05       	cpc	r25, r11
    4878:	91 f4       	brne	.+36     	; 0x489e <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    487a:	f8 01       	movw	r30, r16
    487c:	87 89       	ldd	r24, Z+23	; 0x17
    487e:	80 31       	cpi	r24, 0x10	; 16
    4880:	99 f4       	brne	.+38     	; 0x48a8 <_ZNK8SdVolume6fatGetEmPm+0xbc>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    4882:	dd 24       	eor	r13, r13
    4884:	ee 24       	eor	r14, r14
    4886:	ff 24       	eor	r15, r15
    4888:	c6 01       	movw	r24, r12
    488a:	88 0f       	add	r24, r24
    488c:	99 1f       	adc	r25, r25
    488e:	fc 01       	movw	r30, r24
    4890:	e7 5a       	subi	r30, 0xA7	; 167
    4892:	f8 4f       	sbci	r31, 0xF8	; 248
    4894:	80 81       	ld	r24, Z
    4896:	91 81       	ldd	r25, Z+1	; 0x01
    4898:	a0 e0       	ldi	r26, 0x00	; 0
    489a:	b0 e0       	ldi	r27, 0x00	; 0
    489c:	17 c0       	rjmp	.+46     	; 0x48cc <_ZNK8SdVolume6fatGetEmPm+0xe0>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    489e:	40 e0       	ldi	r20, 0x00	; 0
    48a0:	49 df       	rcall	.-366    	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    48a2:	81 11       	cpse	r24, r1
    48a4:	ea cf       	rjmp	.-44     	; 0x487a <_ZNK8SdVolume6fatGetEmPm+0x8e>
    48a6:	bb cf       	rjmp	.-138    	; 0x481e <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    48a8:	e8 94       	clt
    48aa:	c7 f8       	bld	r12, 7
    48ac:	dd 24       	eor	r13, r13
    48ae:	ee 24       	eor	r14, r14
    48b0:	ff 24       	eor	r15, r15
    48b2:	c6 01       	movw	r24, r12
    48b4:	88 0f       	add	r24, r24
    48b6:	99 1f       	adc	r25, r25
    48b8:	88 0f       	add	r24, r24
    48ba:	99 1f       	adc	r25, r25
    48bc:	fc 01       	movw	r30, r24
    48be:	e7 5a       	subi	r30, 0xA7	; 167
    48c0:	f8 4f       	sbci	r31, 0xF8	; 248
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	a2 81       	ldd	r26, Z+2	; 0x02
    48c8:	b3 81       	ldd	r27, Z+3	; 0x03
    48ca:	bf 70       	andi	r27, 0x0F	; 15
    48cc:	88 83       	st	Y, r24
    48ce:	99 83       	std	Y+1, r25	; 0x01
    48d0:	aa 83       	std	Y+2, r26	; 0x02
    48d2:	bb 83       	std	Y+3, r27	; 0x03
    48d4:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	1f 91       	pop	r17
    48dc:	0f 91       	pop	r16
    48de:	ff 90       	pop	r15
    48e0:	ef 90       	pop	r14
    48e2:	df 90       	pop	r13
    48e4:	cf 90       	pop	r12
    48e6:	bf 90       	pop	r11
    48e8:	af 90       	pop	r10
    48ea:	9f 90       	pop	r9
    48ec:	8f 90       	pop	r8
    48ee:	08 95       	ret

000048f0 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    48f0:	4f 92       	push	r4
    48f2:	5f 92       	push	r5
    48f4:	6f 92       	push	r6
    48f6:	7f 92       	push	r7
    48f8:	af 92       	push	r10
    48fa:	bf 92       	push	r11
    48fc:	cf 92       	push	r12
    48fe:	df 92       	push	r13
    4900:	ef 92       	push	r14
    4902:	ff 92       	push	r15
    4904:	0f 93       	push	r16
    4906:	1f 93       	push	r17
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
    490c:	00 d0       	rcall	.+0      	; 0x490e <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    490e:	1f 92       	push	r1
    4910:	cd b7       	in	r28, 0x3d	; 61
    4912:	de b7       	in	r29, 0x3e	; 62
    4914:	8c 01       	movw	r16, r24
    4916:	49 83       	std	Y+1, r20	; 0x01
    4918:	5a 83       	std	Y+2, r21	; 0x02
    491a:	6b 83       	std	Y+3, r22	; 0x03
    491c:	7c 83       	std	Y+4, r23	; 0x04
    491e:	59 01       	movw	r10, r18
  uint32_t s = 0;
    4920:	c1 2c       	mov	r12, r1
    4922:	d1 2c       	mov	r13, r1
    4924:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    4926:	41 2c       	mov	r4, r1
    4928:	82 e0       	ldi	r24, 0x02	; 2
    492a:	58 2e       	mov	r5, r24
    492c:	61 2c       	mov	r6, r1
    492e:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    4930:	49 81       	ldd	r20, Y+1	; 0x01
    4932:	5a 81       	ldd	r21, Y+2	; 0x02
    4934:	6b 81       	ldd	r22, Y+3	; 0x03
    4936:	7c 81       	ldd	r23, Y+4	; 0x04
    4938:	9e 01       	movw	r18, r28
    493a:	2f 5f       	subi	r18, 0xFF	; 255
    493c:	3f 4f       	sbci	r19, 0xFF	; 255
    493e:	c8 01       	movw	r24, r16
    4940:	55 df       	rcall	.-342    	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    4942:	88 23       	and	r24, r24
    4944:	51 f1       	breq	.+84     	; 0x499a <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    s += 512UL << clusterSizeShift_;
    4946:	d3 01       	movw	r26, r6
    4948:	c2 01       	movw	r24, r4
    494a:	f8 01       	movw	r30, r16
    494c:	05 84       	ldd	r0, Z+13	; 0x0d
    494e:	04 c0       	rjmp	.+8      	; 0x4958 <_ZNK8SdVolume9chainSizeEmPm+0x68>
    4950:	88 0f       	add	r24, r24
    4952:	99 1f       	adc	r25, r25
    4954:	aa 1f       	adc	r26, r26
    4956:	bb 1f       	adc	r27, r27
    4958:	0a 94       	dec	r0
    495a:	d2 f7       	brpl	.-12     	; 0x4950 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    495c:	c8 0e       	add	r12, r24
    495e:	d9 1e       	adc	r13, r25
    4960:	ea 1e       	adc	r14, r26
    4962:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    4964:	49 81       	ldd	r20, Y+1	; 0x01
    4966:	5a 81       	ldd	r21, Y+2	; 0x02
    4968:	6b 81       	ldd	r22, Y+3	; 0x03
    496a:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    496c:	87 89       	ldd	r24, Z+23	; 0x17
    496e:	80 31       	cpi	r24, 0x10	; 16
    4970:	29 f0       	breq	.+10     	; 0x497c <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    4972:	88 ef       	ldi	r24, 0xF8	; 248
    4974:	9f ef       	ldi	r25, 0xFF	; 255
    4976:	af ef       	ldi	r26, 0xFF	; 255
    4978:	bf e0       	ldi	r27, 0x0F	; 15
    497a:	04 c0       	rjmp	.+8      	; 0x4984 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    497c:	88 ef       	ldi	r24, 0xF8	; 248
    497e:	9f ef       	ldi	r25, 0xFF	; 255
    4980:	a0 e0       	ldi	r26, 0x00	; 0
    4982:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    4984:	48 17       	cp	r20, r24
    4986:	59 07       	cpc	r21, r25
    4988:	6a 07       	cpc	r22, r26
    498a:	7b 07       	cpc	r23, r27
    498c:	88 f2       	brcs	.-94     	; 0x4930 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    498e:	f5 01       	movw	r30, r10
    4990:	c0 82       	st	Z, r12
    4992:	d1 82       	std	Z+1, r13	; 0x01
    4994:	e2 82       	std	Z+2, r14	; 0x02
    4996:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    4998:	81 e0       	ldi	r24, 0x01	; 1
}
    499a:	0f 90       	pop	r0
    499c:	0f 90       	pop	r0
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	1f 91       	pop	r17
    49a8:	0f 91       	pop	r16
    49aa:	ff 90       	pop	r15
    49ac:	ef 90       	pop	r14
    49ae:	df 90       	pop	r13
    49b0:	cf 90       	pop	r12
    49b2:	bf 90       	pop	r11
    49b4:	af 90       	pop	r10
    49b6:	7f 90       	pop	r7
    49b8:	6f 90       	pop	r6
    49ba:	5f 90       	pop	r5
    49bc:	4f 90       	pop	r4
    49be:	08 95       	ret

000049c0 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    49c0:	4f 92       	push	r4
    49c2:	5f 92       	push	r5
    49c4:	6f 92       	push	r6
    49c6:	7f 92       	push	r7
    49c8:	8f 92       	push	r8
    49ca:	9f 92       	push	r9
    49cc:	af 92       	push	r10
    49ce:	bf 92       	push	r11
    49d0:	cf 92       	push	r12
    49d2:	df 92       	push	r13
    49d4:	ef 92       	push	r14
    49d6:	ff 92       	push	r15
    49d8:	0f 93       	push	r16
    49da:	1f 93       	push	r17
    49dc:	cf 93       	push	r28
    49de:	df 93       	push	r29
    49e0:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    49e2:	42 30       	cpi	r20, 0x02	; 2
    49e4:	51 05       	cpc	r21, r1
    49e6:	61 05       	cpc	r22, r1
    49e8:	71 05       	cpc	r23, r1
    49ea:	10 f4       	brcc	.+4      	; 0x49f0 <_ZN8SdVolume6fatPutEmm+0x30>
    49ec:	80 e0       	ldi	r24, 0x00	; 0
    49ee:	77 c0       	rjmp	.+238    	; 0x4ade <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    49f0:	89 85       	ldd	r24, Y+9	; 0x09
    49f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    49f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	a1 1d       	adc	r26, r1
    49fc:	b1 1d       	adc	r27, r1
    49fe:	84 17       	cp	r24, r20
    4a00:	95 07       	cpc	r25, r21
    4a02:	a6 07       	cpc	r26, r22
    4a04:	b7 07       	cpc	r27, r23
    4a06:	90 f3       	brcs	.-28     	; 0x49ec <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    4a08:	cb 88       	ldd	r12, Y+19	; 0x13
    4a0a:	dc 88       	ldd	r13, Y+20	; 0x14
    4a0c:	ed 88       	ldd	r14, Y+21	; 0x15
    4a0e:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4a10:	8f 89       	ldd	r24, Y+23	; 0x17
    4a12:	80 31       	cpi	r24, 0x10	; 16
    4a14:	29 f4       	brne	.+10     	; 0x4a20 <_ZN8SdVolume6fatPutEmm+0x60>
    4a16:	bb 27       	eor	r27, r27
    4a18:	a7 2f       	mov	r26, r23
    4a1a:	96 2f       	mov	r25, r22
    4a1c:	85 2f       	mov	r24, r21
    4a1e:	09 c0       	rjmp	.+18     	; 0x4a32 <_ZN8SdVolume6fatPutEmm+0x72>
    4a20:	db 01       	movw	r26, r22
    4a22:	ca 01       	movw	r24, r20
    4a24:	e7 e0       	ldi	r30, 0x07	; 7
    4a26:	b6 95       	lsr	r27
    4a28:	a7 95       	ror	r26
    4a2a:	97 95       	ror	r25
    4a2c:	87 95       	ror	r24
    4a2e:	ea 95       	dec	r30
    4a30:	d1 f7       	brne	.-12     	; 0x4a26 <_ZN8SdVolume6fatPutEmm+0x66>
    4a32:	48 01       	movw	r8, r16
    4a34:	59 01       	movw	r10, r18
    4a36:	2a 01       	movw	r4, r20
    4a38:	3b 01       	movw	r6, r22
    4a3a:	c8 0e       	add	r12, r24
    4a3c:	d9 1e       	adc	r13, r25
    4a3e:	ea 1e       	adc	r14, r26
    4a40:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    4a42:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <_ZN8SdVolume17cacheBlockNumber_E>
    4a46:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4a4a:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    4a4e:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4a52:	c8 16       	cp	r12, r24
    4a54:	d9 06       	cpc	r13, r25
    4a56:	ea 06       	cpc	r14, r26
    4a58:	fb 06       	cpc	r15, r27
    4a5a:	81 f4       	brne	.+32     	; 0x4a7c <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    4a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5e:	80 31       	cpi	r24, 0x10	; 16
    4a60:	a1 f4       	brne	.+40     	; 0x4a8a <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    4a62:	b3 01       	movw	r22, r6
    4a64:	a2 01       	movw	r20, r4
    4a66:	55 27       	eor	r21, r21
    4a68:	66 27       	eor	r22, r22
    4a6a:	77 27       	eor	r23, r23
    4a6c:	44 0f       	add	r20, r20
    4a6e:	55 1f       	adc	r21, r21
    4a70:	fa 01       	movw	r30, r20
    4a72:	e7 5a       	subi	r30, 0xA7	; 167
    4a74:	f8 4f       	sbci	r31, 0xF8	; 248
    4a76:	91 82       	std	Z+1, r9	; 0x01
    4a78:	80 82       	st	Z, r8
    4a7a:	18 c0       	rjmp	.+48     	; 0x4aac <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    4a7c:	40 e0       	ldi	r20, 0x00	; 0
    4a7e:	c7 01       	movw	r24, r14
    4a80:	b6 01       	movw	r22, r12
    4a82:	58 de       	rcall	.-848    	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    4a84:	81 11       	cpse	r24, r1
    4a86:	ea cf       	rjmp	.-44     	; 0x4a5c <_ZN8SdVolume6fatPutEmm+0x9c>
    4a88:	b1 cf       	rjmp	.-158    	; 0x49ec <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    4a8a:	b3 01       	movw	r22, r6
    4a8c:	a2 01       	movw	r20, r4
    4a8e:	4f 77       	andi	r20, 0x7F	; 127
    4a90:	55 27       	eor	r21, r21
    4a92:	66 27       	eor	r22, r22
    4a94:	77 27       	eor	r23, r23
    4a96:	44 0f       	add	r20, r20
    4a98:	55 1f       	adc	r21, r21
    4a9a:	44 0f       	add	r20, r20
    4a9c:	55 1f       	adc	r21, r21
    4a9e:	fa 01       	movw	r30, r20
    4aa0:	e7 5a       	subi	r30, 0xA7	; 167
    4aa2:	f8 4f       	sbci	r31, 0xF8	; 248
    4aa4:	80 82       	st	Z, r8
    4aa6:	91 82       	std	Z+1, r9	; 0x01
    4aa8:	a2 82       	std	Z+2, r10	; 0x02
    4aaa:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    4aac:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
    4ab0:	81 60       	ori	r24, 0x01	; 1
    4ab2:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    4ab6:	8a 89       	ldd	r24, Y+18	; 0x12
    4ab8:	82 30       	cpi	r24, 0x02	; 2
    4aba:	80 f0       	brcs	.+32     	; 0x4adc <_ZN8SdVolume6fatPutEmm+0x11c>
    4abc:	8d 81       	ldd	r24, Y+5	; 0x05
    4abe:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac0:	af 81       	ldd	r26, Y+7	; 0x07
    4ac2:	b8 85       	ldd	r27, Y+8	; 0x08
    4ac4:	c8 0e       	add	r12, r24
    4ac6:	d9 1e       	adc	r13, r25
    4ac8:	ea 1e       	adc	r14, r26
    4aca:	fb 1e       	adc	r15, r27
    4acc:	c0 92 52 07 	sts	0x0752, r12	; 0x800752 <_ZN8SdVolume17cacheMirrorBlock_E>
    4ad0:	d0 92 53 07 	sts	0x0753, r13	; 0x800753 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    4ad4:	e0 92 54 07 	sts	0x0754, r14	; 0x800754 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    4ad8:	f0 92 55 07 	sts	0x0755, r15	; 0x800755 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    4adc:	81 e0       	ldi	r24, 0x01	; 1
}
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	1f 91       	pop	r17
    4ae4:	0f 91       	pop	r16
    4ae6:	ff 90       	pop	r15
    4ae8:	ef 90       	pop	r14
    4aea:	df 90       	pop	r13
    4aec:	cf 90       	pop	r12
    4aee:	bf 90       	pop	r11
    4af0:	af 90       	pop	r10
    4af2:	9f 90       	pop	r9
    4af4:	8f 90       	pop	r8
    4af6:	7f 90       	pop	r7
    4af8:	6f 90       	pop	r6
    4afa:	5f 90       	pop	r5
    4afc:	4f 90       	pop	r4
    4afe:	08 95       	ret

00004b00 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    4b00:	2f 92       	push	r2
    4b02:	3f 92       	push	r3
    4b04:	4f 92       	push	r4
    4b06:	5f 92       	push	r5
    4b08:	6f 92       	push	r6
    4b0a:	7f 92       	push	r7
    4b0c:	9f 92       	push	r9
    4b0e:	af 92       	push	r10
    4b10:	bf 92       	push	r11
    4b12:	cf 92       	push	r12
    4b14:	df 92       	push	r13
    4b16:	ef 92       	push	r14
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	60 97       	sbiw	r28, 0x10	; 16
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	0f be       	out	0x3f, r0	; 63
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	5c 01       	movw	r10, r24
    4b34:	49 87       	std	Y+9, r20	; 0x09
    4b36:	5a 87       	std	Y+10, r21	; 0x0a
    4b38:	6b 87       	std	Y+11, r22	; 0x0b
    4b3a:	7c 87       	std	Y+12, r23	; 0x0c
    4b3c:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    4b3e:	d9 01       	movw	r26, r18
    4b40:	cd 90       	ld	r12, X+
    4b42:	dd 90       	ld	r13, X+
    4b44:	ed 90       	ld	r14, X+
    4b46:	fc 90       	ld	r15, X
    4b48:	c1 14       	cp	r12, r1
    4b4a:	d1 04       	cpc	r13, r1
    4b4c:	e1 04       	cpc	r14, r1
    4b4e:	f1 04       	cpc	r15, r1
    4b50:	31 f0       	breq	.+12     	; 0x4b5e <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    4b52:	bf ef       	ldi	r27, 0xFF	; 255
    4b54:	cb 1a       	sub	r12, r27
    4b56:	db 0a       	sbc	r13, r27
    4b58:	eb 0a       	sbc	r14, r27
    4b5a:	fb 0a       	sbc	r15, r27
    4b5c:	10 c0       	rjmp	.+32     	; 0x4b7e <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    4b5e:	fc 01       	movw	r30, r24
    4b60:	c0 80       	ld	r12, Z
    4b62:	d1 80       	ldd	r13, Z+1	; 0x01
    4b64:	e2 80       	ldd	r14, Z+2	; 0x02
    4b66:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    4b68:	99 24       	eor	r9, r9
    4b6a:	93 94       	inc	r9
    4b6c:	09 85       	ldd	r16, Y+9	; 0x09
    4b6e:	1a 85       	ldd	r17, Y+10	; 0x0a
    4b70:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b72:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b74:	01 30       	cpi	r16, 0x01	; 1
    4b76:	11 05       	cpc	r17, r1
    4b78:	21 05       	cpc	r18, r1
    4b7a:	31 05       	cpc	r19, r1
    4b7c:	09 f0       	breq	.+2      	; 0x4b80 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    4b7e:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    4b80:	f5 01       	movw	r30, r10
    4b82:	81 85       	ldd	r24, Z+9	; 0x09
    4b84:	92 85       	ldd	r25, Z+10	; 0x0a
    4b86:	a3 85       	ldd	r26, Z+11	; 0x0b
    4b88:	b4 85       	ldd	r27, Z+12	; 0x0c
    4b8a:	8c 01       	movw	r16, r24
    4b8c:	9d 01       	movw	r18, r26
    4b8e:	0f 5f       	subi	r16, 0xFF	; 255
    4b90:	1f 4f       	sbci	r17, 0xFF	; 255
    4b92:	2f 4f       	sbci	r18, 0xFF	; 255
    4b94:	3f 4f       	sbci	r19, 0xFF	; 255
    4b96:	0d 87       	std	Y+13, r16	; 0x0d
    4b98:	1e 87       	std	Y+14, r17	; 0x0e
    4b9a:	2f 87       	std	Y+15, r18	; 0x0f
    4b9c:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    4b9e:	26 01       	movw	r4, r12
    4ba0:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    4ba2:	1d 82       	std	Y+5, r1	; 0x05
    4ba4:	1e 82       	std	Y+6, r1	; 0x06
    4ba6:	1f 82       	std	Y+7, r1	; 0x07
    4ba8:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    4baa:	f5 01       	movw	r30, r10
    4bac:	81 85       	ldd	r24, Z+9	; 0x09
    4bae:	92 85       	ldd	r25, Z+10	; 0x0a
    4bb0:	a3 85       	ldd	r26, Z+11	; 0x0b
    4bb2:	b4 85       	ldd	r27, Z+12	; 0x0c
    4bb4:	0d 81       	ldd	r16, Y+5	; 0x05
    4bb6:	1e 81       	ldd	r17, Y+6	; 0x06
    4bb8:	2f 81       	ldd	r18, Y+7	; 0x07
    4bba:	38 85       	ldd	r19, Y+8	; 0x08
    4bbc:	08 17       	cp	r16, r24
    4bbe:	19 07       	cpc	r17, r25
    4bc0:	2a 07       	cpc	r18, r26
    4bc2:	3b 07       	cpc	r19, r27
    4bc4:	08 f0       	brcs	.+2      	; 0x4bc8 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    4bc6:	54 c0       	rjmp	.+168    	; 0x4c70 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    4bc8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4bca:	3e 85       	ldd	r19, Y+14	; 0x0e
    4bcc:	4f 85       	ldd	r20, Y+15	; 0x0f
    4bce:	58 89       	ldd	r21, Y+16	; 0x10
    4bd0:	24 15       	cp	r18, r4
    4bd2:	35 05       	cpc	r19, r5
    4bd4:	46 05       	cpc	r20, r6
    4bd6:	57 05       	cpc	r21, r7
    4bd8:	50 f4       	brcc	.+20     	; 0x4bee <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    4bda:	82 e0       	ldi	r24, 0x02	; 2
    4bdc:	48 2e       	mov	r4, r24
    4bde:	51 2c       	mov	r5, r1
    4be0:	61 2c       	mov	r6, r1
    4be2:	71 2c       	mov	r7, r1
    4be4:	92 e0       	ldi	r25, 0x02	; 2
    4be6:	c9 2e       	mov	r12, r25
    4be8:	d1 2c       	mov	r13, r1
    4bea:	e1 2c       	mov	r14, r1
    4bec:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    4bee:	9e 01       	movw	r18, r28
    4bf0:	2f 5f       	subi	r18, 0xFF	; 255
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	b3 01       	movw	r22, r6
    4bf6:	a2 01       	movw	r20, r4
    4bf8:	c5 01       	movw	r24, r10
    4bfa:	f8 dd       	rcall	.-1040   	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    4bfc:	88 23       	and	r24, r24
    4bfe:	c1 f1       	breq	.+112    	; 0x4c70 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    4c00:	49 81       	ldd	r20, Y+1	; 0x01
    4c02:	5a 81       	ldd	r21, Y+2	; 0x02
    4c04:	6b 81       	ldd	r22, Y+3	; 0x03
    4c06:	7c 81       	ldd	r23, Y+4	; 0x04
    4c08:	d3 01       	movw	r26, r6
    4c0a:	c2 01       	movw	r24, r4
    4c0c:	01 96       	adiw	r24, 0x01	; 1
    4c0e:	a1 1d       	adc	r26, r1
    4c10:	b1 1d       	adc	r27, r1
    4c12:	45 2b       	or	r20, r21
    4c14:	46 2b       	or	r20, r22
    4c16:	47 2b       	or	r20, r23
    4c18:	19 f0       	breq	.+6      	; 0x4c20 <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    4c1a:	6c 01       	movw	r12, r24
    4c1c:	7d 01       	movw	r14, r26
    4c1e:	0f c0       	rjmp	.+30     	; 0x4c3e <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    4c20:	ac 01       	movw	r20, r24
    4c22:	bd 01       	movw	r22, r26
    4c24:	4c 19       	sub	r20, r12
    4c26:	5d 09       	sbc	r21, r13
    4c28:	6e 09       	sbc	r22, r14
    4c2a:	7f 09       	sbc	r23, r15
    4c2c:	09 85       	ldd	r16, Y+9	; 0x09
    4c2e:	1a 85       	ldd	r17, Y+10	; 0x0a
    4c30:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c32:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c34:	04 17       	cp	r16, r20
    4c36:	15 07       	cpc	r17, r21
    4c38:	26 07       	cpc	r18, r22
    4c3a:	37 07       	cpc	r19, r23
    4c3c:	79 f0       	breq	.+30     	; 0x4c5c <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    4c3e:	2d 81       	ldd	r18, Y+5	; 0x05
    4c40:	3e 81       	ldd	r19, Y+6	; 0x06
    4c42:	4f 81       	ldd	r20, Y+7	; 0x07
    4c44:	58 85       	ldd	r21, Y+8	; 0x08
    4c46:	2f 5f       	subi	r18, 0xFF	; 255
    4c48:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4a:	4f 4f       	sbci	r20, 0xFF	; 255
    4c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c4e:	2d 83       	std	Y+5, r18	; 0x05
    4c50:	3e 83       	std	Y+6, r19	; 0x06
    4c52:	4f 83       	std	Y+7, r20	; 0x07
    4c54:	58 87       	std	Y+8, r21	; 0x08
    4c56:	2c 01       	movw	r4, r24
    4c58:	3d 01       	movw	r6, r26
    4c5a:	a7 cf       	rjmp	.-178    	; 0x4baa <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    4c5c:	0f ef       	ldi	r16, 0xFF	; 255
    4c5e:	1f ef       	ldi	r17, 0xFF	; 255
    4c60:	2f ef       	ldi	r18, 0xFF	; 255
    4c62:	3f e0       	ldi	r19, 0x0F	; 15
    4c64:	b3 01       	movw	r22, r6
    4c66:	a2 01       	movw	r20, r4
    4c68:	c5 01       	movw	r24, r10
    4c6a:	aa de       	rcall	.-684    	; 0x49c0 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    4c6c:	81 11       	cpse	r24, r1
    4c6e:	17 c0       	rjmp	.+46     	; 0x4c9e <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	3f c0       	rjmp	.+126    	; 0x4cf2 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    4c74:	d3 01       	movw	r26, r6
    4c76:	c2 01       	movw	r24, r4
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	a1 09       	sbc	r26, r1
    4c7c:	b1 09       	sbc	r27, r1
    4c7e:	8d 83       	std	Y+5, r24	; 0x05
    4c80:	9e 83       	std	Y+6, r25	; 0x06
    4c82:	af 83       	std	Y+7, r26	; 0x07
    4c84:	b8 87       	std	Y+8, r27	; 0x08
    4c86:	93 01       	movw	r18, r6
    4c88:	82 01       	movw	r16, r4
    4c8a:	ac 01       	movw	r20, r24
    4c8c:	bd 01       	movw	r22, r26
    4c8e:	c5 01       	movw	r24, r10
    4c90:	97 de       	rcall	.-722    	; 0x49c0 <_ZN8SdVolume6fatPutEmm>
    4c92:	88 23       	and	r24, r24
    4c94:	69 f3       	breq	.-38     	; 0x4c70 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    4c96:	4d 80       	ldd	r4, Y+5	; 0x05
    4c98:	5e 80       	ldd	r5, Y+6	; 0x06
    4c9a:	6f 80       	ldd	r6, Y+7	; 0x07
    4c9c:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    4c9e:	c4 14       	cp	r12, r4
    4ca0:	d5 04       	cpc	r13, r5
    4ca2:	e6 04       	cpc	r14, r6
    4ca4:	f7 04       	cpc	r15, r7
    4ca6:	30 f3       	brcs	.-52     	; 0x4c74 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    4ca8:	d1 01       	movw	r26, r2
    4caa:	4d 91       	ld	r20, X+
    4cac:	5d 91       	ld	r21, X+
    4cae:	6d 91       	ld	r22, X+
    4cb0:	7c 91       	ld	r23, X
    4cb2:	41 15       	cp	r20, r1
    4cb4:	51 05       	cpc	r21, r1
    4cb6:	61 05       	cpc	r22, r1
    4cb8:	71 05       	cpc	r23, r1
    4cba:	99 f4       	brne	.+38     	; 0x4ce2 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    4cbc:	f1 01       	movw	r30, r2
    4cbe:	c0 82       	st	Z, r12
    4cc0:	d1 82       	std	Z+1, r13	; 0x01
    4cc2:	e2 82       	std	Z+2, r14	; 0x02
    4cc4:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    4cc6:	99 20       	and	r9, r9
    4cc8:	99 f0       	breq	.+38     	; 0x4cf0 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    4cca:	ff ef       	ldi	r31, 0xFF	; 255
    4ccc:	cf 1a       	sub	r12, r31
    4cce:	df 0a       	sbc	r13, r31
    4cd0:	ef 0a       	sbc	r14, r31
    4cd2:	ff 0a       	sbc	r15, r31
    4cd4:	d5 01       	movw	r26, r10
    4cd6:	cd 92       	st	X+, r12
    4cd8:	dd 92       	st	X+, r13
    4cda:	ed 92       	st	X+, r14
    4cdc:	fc 92       	st	X, r15
    4cde:	13 97       	sbiw	r26, 0x03	; 3
    4ce0:	07 c0       	rjmp	.+14     	; 0x4cf0 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    4ce2:	97 01       	movw	r18, r14
    4ce4:	86 01       	movw	r16, r12
    4ce6:	c5 01       	movw	r24, r10
    4ce8:	6b de       	rcall	.-810    	; 0x49c0 <_ZN8SdVolume6fatPutEmm>
    4cea:	81 11       	cpse	r24, r1
    4cec:	e7 cf       	rjmp	.-50     	; 0x4cbc <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
    4cee:	c0 cf       	rjmp	.-128    	; 0x4c70 <_ZN8SdVolume15allocContiguousEmPm+0x170>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
}
    4cf2:	60 96       	adiw	r28, 0x10	; 16
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	f8 94       	cli
    4cf8:	de bf       	out	0x3e, r29	; 62
    4cfa:	0f be       	out	0x3f, r0	; 63
    4cfc:	cd bf       	out	0x3d, r28	; 61
    4cfe:	df 91       	pop	r29
    4d00:	cf 91       	pop	r28
    4d02:	1f 91       	pop	r17
    4d04:	0f 91       	pop	r16
    4d06:	ff 90       	pop	r15
    4d08:	ef 90       	pop	r14
    4d0a:	df 90       	pop	r13
    4d0c:	cf 90       	pop	r12
    4d0e:	bf 90       	pop	r11
    4d10:	af 90       	pop	r10
    4d12:	9f 90       	pop	r9
    4d14:	7f 90       	pop	r7
    4d16:	6f 90       	pop	r6
    4d18:	5f 90       	pop	r5
    4d1a:	4f 90       	pop	r4
    4d1c:	3f 90       	pop	r3
    4d1e:	2f 90       	pop	r2
    4d20:	08 95       	ret

00004d22 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    4d22:	af 92       	push	r10
    4d24:	bf 92       	push	r11
    4d26:	cf 92       	push	r12
    4d28:	df 92       	push	r13
    4d2a:	ef 92       	push	r14
    4d2c:	ff 92       	push	r15
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	00 d0       	rcall	.+0      	; 0x4d38 <_ZN8SdVolume9freeChainEm+0x16>
    4d38:	1f 92       	push	r1
    4d3a:	cd b7       	in	r28, 0x3d	; 61
    4d3c:	de b7       	in	r29, 0x3e	; 62
    4d3e:	5c 01       	movw	r10, r24
    4d40:	6a 01       	movw	r12, r20
    4d42:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    4d44:	82 e0       	ldi	r24, 0x02	; 2
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	a0 e0       	ldi	r26, 0x00	; 0
    4d4a:	b0 e0       	ldi	r27, 0x00	; 0
    4d4c:	f5 01       	movw	r30, r10
    4d4e:	80 83       	st	Z, r24
    4d50:	91 83       	std	Z+1, r25	; 0x01
    4d52:	a2 83       	std	Z+2, r26	; 0x02
    4d54:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    4d56:	9e 01       	movw	r18, r28
    4d58:	2f 5f       	subi	r18, 0xFF	; 255
    4d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5c:	b7 01       	movw	r22, r14
    4d5e:	a6 01       	movw	r20, r12
    4d60:	c5 01       	movw	r24, r10
    4d62:	44 dd       	rcall	.-1400   	; 0x47ec <_ZNK8SdVolume6fatGetEmPm>
    4d64:	88 23       	and	r24, r24
    4d66:	09 f1       	breq	.+66     	; 0x4daa <_ZN8SdVolume9freeChainEm+0x88>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    4d68:	00 e0       	ldi	r16, 0x00	; 0
    4d6a:	10 e0       	ldi	r17, 0x00	; 0
    4d6c:	98 01       	movw	r18, r16
    4d6e:	b7 01       	movw	r22, r14
    4d70:	a6 01       	movw	r20, r12
    4d72:	c5 01       	movw	r24, r10
    4d74:	25 de       	rcall	.-950    	; 0x49c0 <_ZN8SdVolume6fatPutEmm>
    4d76:	88 23       	and	r24, r24
    4d78:	c1 f0       	breq	.+48     	; 0x4daa <_ZN8SdVolume9freeChainEm+0x88>

    cluster = next;
    4d7a:	c9 80       	ldd	r12, Y+1	; 0x01
    4d7c:	da 80       	ldd	r13, Y+2	; 0x02
    4d7e:	eb 80       	ldd	r14, Y+3	; 0x03
    4d80:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4d82:	f5 01       	movw	r30, r10
    4d84:	87 89       	ldd	r24, Z+23	; 0x17
    4d86:	80 31       	cpi	r24, 0x10	; 16
    4d88:	29 f0       	breq	.+10     	; 0x4d94 <_ZN8SdVolume9freeChainEm+0x72>
    4d8a:	88 ef       	ldi	r24, 0xF8	; 248
    4d8c:	9f ef       	ldi	r25, 0xFF	; 255
    4d8e:	af ef       	ldi	r26, 0xFF	; 255
    4d90:	bf e0       	ldi	r27, 0x0F	; 15
    4d92:	04 c0       	rjmp	.+8      	; 0x4d9c <_ZN8SdVolume9freeChainEm+0x7a>
    4d94:	88 ef       	ldi	r24, 0xF8	; 248
    4d96:	9f ef       	ldi	r25, 0xFF	; 255
    4d98:	a0 e0       	ldi	r26, 0x00	; 0
    4d9a:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    4d9c:	c8 16       	cp	r12, r24
    4d9e:	d9 06       	cpc	r13, r25
    4da0:	ea 06       	cpc	r14, r26
    4da2:	fb 06       	cpc	r15, r27
    4da4:	c0 f2       	brcs	.-80     	; 0x4d56 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	01 c0       	rjmp	.+2      	; 0x4dac <_ZN8SdVolume9freeChainEm+0x8a>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    4daa:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	1f 91       	pop	r17
    4dba:	0f 91       	pop	r16
    4dbc:	ff 90       	pop	r15
    4dbe:	ef 90       	pop	r14
    4dc0:	df 90       	pop	r13
    4dc2:	cf 90       	pop	r12
    4dc4:	bf 90       	pop	r11
    4dc6:	af 90       	pop	r10
    4dc8:	08 95       	ret

00004dca <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    4dca:	8f 92       	push	r8
    4dcc:	9f 92       	push	r9
    4dce:	af 92       	push	r10
    4dd0:	bf 92       	push	r11
    4dd2:	cf 92       	push	r12
    4dd4:	df 92       	push	r13
    4dd6:	ef 92       	push	r14
    4dd8:	ff 92       	push	r15
    4dda:	0f 93       	push	r16
    4ddc:	1f 93       	push	r17
    4dde:	cf 93       	push	r28
    4de0:	df 93       	push	r29
    4de2:	ec 01       	movw	r28, r24
    4de4:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    4de6:	70 93 58 07 	sts	0x0758, r23	; 0x800758 <_ZN8SdVolume7sdCard_E+0x1>
    4dea:	60 93 57 07 	sts	0x0757, r22	; 0x800757 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4dee:	44 23       	and	r20, r20
    4df0:	61 f1       	breq	.+88     	; 0x4e4a <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    4df2:	45 30       	cpi	r20, 0x05	; 5
    4df4:	10 f0       	brcs	.+4      	; 0x4dfa <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	f0 c0       	rjmp	.+480    	; 0x4fda <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    4dfa:	40 e0       	ldi	r20, 0x00	; 0
    4dfc:	60 e0       	ldi	r22, 0x00	; 0
    4dfe:	70 e0       	ldi	r23, 0x00	; 0
    4e00:	cb 01       	movw	r24, r22
    4e02:	98 dc       	rcall	.-1744   	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    4e04:	88 23       	and	r24, r24
    4e06:	b9 f3       	breq	.-18     	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    4e08:	20 e1       	ldi	r18, 0x10	; 16
    4e0a:	12 9f       	mul	r17, r18
    4e0c:	a0 01       	movw	r20, r0
    4e0e:	11 24       	eor	r1, r1
    4e10:	47 5b       	subi	r20, 0xB7	; 183
    4e12:	58 4f       	sbci	r21, 0xF8	; 248
    4e14:	fa 01       	movw	r30, r20
    4e16:	e2 54       	subi	r30, 0x42	; 66
    4e18:	fe 4f       	sbci	r31, 0xFE	; 254
    4e1a:	80 81       	ld	r24, Z
    4e1c:	8f 77       	andi	r24, 0x7F	; 127
    4e1e:	59 f7       	brne	.-42     	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    4e20:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    4e22:	80 81       	ld	r24, Z
    4e24:	91 81       	ldd	r25, Z+1	; 0x01
    4e26:	a2 81       	ldd	r26, Z+2	; 0x02
    4e28:	b3 81       	ldd	r27, Z+3	; 0x03
    4e2a:	84 36       	cpi	r24, 0x64	; 100
    4e2c:	91 05       	cpc	r25, r1
    4e2e:	a1 05       	cpc	r26, r1
    4e30:	b1 05       	cpc	r27, r1
    4e32:	08 f3       	brcs	.-62     	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    4e34:	34 97       	sbiw	r30, 0x04	; 4
    4e36:	c0 80       	ld	r12, Z
    4e38:	d1 80       	ldd	r13, Z+1	; 0x01
    4e3a:	e2 80       	ldd	r14, Z+2	; 0x02
    4e3c:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    4e3e:	c1 14       	cp	r12, r1
    4e40:	d1 04       	cpc	r13, r1
    4e42:	e1 04       	cpc	r14, r1
    4e44:	f1 04       	cpc	r15, r1
    4e46:	21 f4       	brne	.+8      	; 0x4e50 <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    4e48:	d6 cf       	rjmp	.-84     	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    4e4a:	c1 2c       	mov	r12, r1
    4e4c:	d1 2c       	mov	r13, r1
    4e4e:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    4e50:	40 e0       	ldi	r20, 0x00	; 0
    4e52:	c7 01       	movw	r24, r14
    4e54:	b6 01       	movw	r22, r12
    4e56:	6e dc       	rcall	.-1828   	; 0x4734 <_ZN8SdVolume13cacheRawBlockEmh>
    4e58:	88 23       	and	r24, r24
    4e5a:	69 f2       	breq	.-102    	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    4e5c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ZN8SdVolume12cacheBuffer_E+0xb>
    4e60:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ZN8SdVolume12cacheBuffer_E+0xc>
    4e64:	81 15       	cp	r24, r1
    4e66:	92 40       	sbci	r25, 0x02	; 2
    4e68:	31 f6       	brne	.-116    	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    4e6a:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    4e6e:	99 23       	and	r25, r25
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    4e72:	c1 cf       	rjmp	.-126    	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    4e74:	20 91 67 07 	lds	r18, 0x0767	; 0x800767 <_ZN8SdVolume12cacheBuffer_E+0xe>
    4e78:	30 91 68 07 	lds	r19, 0x0768	; 0x800768 <_ZN8SdVolume12cacheBuffer_E+0xf>
    4e7c:	23 2b       	or	r18, r19
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    4e80:	ba cf       	rjmp	.-140    	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    4e82:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    4e86:	88 23       	and	r24, r24
    4e88:	09 f4       	brne	.+2      	; 0x4e8c <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    4e8a:	b5 cf       	rjmp	.-150    	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    4e8c:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    4e8e:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4e90:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	41 e0       	ldi	r20, 0x01	; 1
    4e96:	50 e0       	ldi	r21, 0x00	; 0
    4e98:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e9a:	e2 2f       	mov	r30, r18
    4e9c:	ba 01       	movw	r22, r20
    4e9e:	02 2e       	mov	r0, r18
    4ea0:	02 c0       	rjmp	.+4      	; 0x4ea6 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    4ea2:	66 0f       	add	r22, r22
    4ea4:	77 1f       	adc	r23, r23
    4ea6:	0a 94       	dec	r0
    4ea8:	e2 f7       	brpl	.-8      	; 0x4ea2 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    4eaa:	86 17       	cp	r24, r22
    4eac:	97 07       	cpc	r25, r23
    4eae:	31 f0       	breq	.+12     	; 0x4ebc <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    4eb0:	31 e0       	ldi	r19, 0x01	; 1
    4eb2:	32 0f       	add	r19, r18
    4eb4:	3d 87       	std	Y+13, r19	; 0x0d
    4eb6:	28 30       	cpi	r18, 0x08	; 8
    4eb8:	78 f3       	brcs	.-34     	; 0x4e98 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    4eba:	9d cf       	rjmp	.-198    	; 0x4df6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    4ebc:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <_ZN8SdVolume12cacheBuffer_E+0x16>
    4ec0:	30 91 70 07 	lds	r19, 0x0770	; 0x800770 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    4ec4:	21 15       	cp	r18, r1
    4ec6:	31 05       	cpc	r19, r1
    4ec8:	19 f0       	breq	.+6      	; 0x4ed0 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    4eca:	40 e0       	ldi	r20, 0x00	; 0
    4ecc:	50 e0       	ldi	r21, 0x00	; 0
    4ece:	08 c0       	rjmp	.+16     	; 0x4ee0 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    4ed0:	20 91 7d 07 	lds	r18, 0x077D	; 0x80077d <_ZN8SdVolume12cacheBuffer_E+0x24>
    4ed4:	30 91 7e 07 	lds	r19, 0x077E	; 0x80077e <_ZN8SdVolume12cacheBuffer_E+0x25>
    4ed8:	40 91 7f 07 	lds	r20, 0x077F	; 0x80077f <_ZN8SdVolume12cacheBuffer_E+0x26>
    4edc:	50 91 80 07 	lds	r21, 0x0780	; 0x800780 <_ZN8SdVolume12cacheBuffer_E+0x27>
    4ee0:	2d 83       	std	Y+5, r18	; 0x05
    4ee2:	3e 83       	std	Y+6, r19	; 0x06
    4ee4:	4f 83       	std	Y+7, r20	; 0x07
    4ee6:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4ee8:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <_ZN8SdVolume12cacheBuffer_E+0xe>
    4eec:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <_ZN8SdVolume12cacheBuffer_E+0xf>
    4ef0:	46 01       	movw	r8, r12
    4ef2:	57 01       	movw	r10, r14
    4ef4:	88 0e       	add	r8, r24
    4ef6:	99 1e       	adc	r9, r25
    4ef8:	a1 1c       	adc	r10, r1
    4efa:	b1 1c       	adc	r11, r1
    4efc:	8b 8a       	std	Y+19, r8	; 0x13
    4efe:	9c 8a       	std	Y+20, r9	; 0x14
    4f00:	ad 8a       	std	Y+21, r10	; 0x15
    4f02:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    4f04:	00 91 6a 07 	lds	r16, 0x076A	; 0x80076a <_ZN8SdVolume12cacheBuffer_E+0x11>
    4f08:	10 91 6b 07 	lds	r17, 0x076B	; 0x80076b <_ZN8SdVolume12cacheBuffer_E+0x12>
    4f0c:	19 8f       	std	Y+25, r17	; 0x19
    4f0e:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    4f10:	a0 91 69 07 	lds	r26, 0x0769	; 0x800769 <_ZN8SdVolume12cacheBuffer_E+0x10>
    4f14:	b0 e0       	ldi	r27, 0x00	; 0
    4f16:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <__muluhisi3>
    4f1a:	86 0e       	add	r8, r22
    4f1c:	97 1e       	adc	r9, r23
    4f1e:	a8 1e       	adc	r10, r24
    4f20:	b9 1e       	adc	r11, r25
    4f22:	8a 8e       	std	Y+26, r8	; 0x1a
    4f24:	9b 8e       	std	Y+27, r9	; 0x1b
    4f26:	ac 8e       	std	Y+28, r10	; 0x1c
    4f28:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    4f2a:	85 e0       	ldi	r24, 0x05	; 5
    4f2c:	00 0f       	add	r16, r16
    4f2e:	11 1f       	adc	r17, r17
    4f30:	8a 95       	dec	r24
    4f32:	e1 f7       	brne	.-8      	; 0x4f2c <_ZN8SdVolume4initEP7Sd2Cardh+0x162>
    4f34:	01 50       	subi	r16, 0x01	; 1
    4f36:	1e 4f       	sbci	r17, 0xFE	; 254
    4f38:	01 2f       	mov	r16, r17
    4f3a:	11 27       	eor	r17, r17
    4f3c:	06 95       	lsr	r16
    4f3e:	80 0e       	add	r8, r16
    4f40:	91 1e       	adc	r9, r17
    4f42:	a1 1c       	adc	r10, r1
    4f44:	b1 1c       	adc	r11, r1
    4f46:	8e 86       	std	Y+14, r8	; 0x0e
    4f48:	9f 86       	std	Y+15, r9	; 0x0f
    4f4a:	a8 8a       	std	Y+16, r10	; 0x10
    4f4c:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    4f4e:	20 91 6c 07 	lds	r18, 0x076C	; 0x80076c <_ZN8SdVolume12cacheBuffer_E+0x13>
    4f52:	30 91 6d 07 	lds	r19, 0x076D	; 0x80076d <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    4f56:	21 15       	cp	r18, r1
    4f58:	31 05       	cpc	r19, r1
    4f5a:	21 f0       	breq	.+8      	; 0x4f64 <_ZN8SdVolume4initEP7Sd2Cardh+0x19a>
    4f5c:	a9 01       	movw	r20, r18
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	70 e0       	ldi	r23, 0x00	; 0
    4f62:	08 c0       	rjmp	.+16     	; 0x4f74 <_ZN8SdVolume4initEP7Sd2Cardh+0x1aa>
    4f64:	40 91 79 07 	lds	r20, 0x0779	; 0x800779 <_ZN8SdVolume12cacheBuffer_E+0x20>
    4f68:	50 91 7a 07 	lds	r21, 0x077A	; 0x80077a <_ZN8SdVolume12cacheBuffer_E+0x21>
    4f6c:	60 91 7b 07 	lds	r22, 0x077B	; 0x80077b <_ZN8SdVolume12cacheBuffer_E+0x22>
    4f70:	70 91 7c 07 	lds	r23, 0x077C	; 0x80077c <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    4f74:	d7 01       	movw	r26, r14
    4f76:	c6 01       	movw	r24, r12
    4f78:	88 19       	sub	r24, r8
    4f7a:	99 09       	sbc	r25, r9
    4f7c:	aa 09       	sbc	r26, r10
    4f7e:	bb 09       	sbc	r27, r11
    4f80:	84 0f       	add	r24, r20
    4f82:	95 1f       	adc	r25, r21
    4f84:	a6 1f       	adc	r26, r22
    4f86:	b7 1f       	adc	r27, r23
    4f88:	04 c0       	rjmp	.+8      	; 0x4f92 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c8>
    4f8a:	b6 95       	lsr	r27
    4f8c:	a7 95       	ror	r26
    4f8e:	97 95       	ror	r25
    4f90:	87 95       	ror	r24
    4f92:	ea 95       	dec	r30
    4f94:	d2 f7       	brpl	.-12     	; 0x4f8a <_ZN8SdVolume4initEP7Sd2Cardh+0x1c0>
    4f96:	89 87       	std	Y+9, r24	; 0x09
    4f98:	9a 87       	std	Y+10, r25	; 0x0a
    4f9a:	ab 87       	std	Y+11, r26	; 0x0b
    4f9c:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    4f9e:	85 3f       	cpi	r24, 0xF5	; 245
    4fa0:	2f e0       	ldi	r18, 0x0F	; 15
    4fa2:	92 07       	cpc	r25, r18
    4fa4:	a1 05       	cpc	r26, r1
    4fa6:	b1 05       	cpc	r27, r1
    4fa8:	10 f4       	brcc	.+4      	; 0x4fae <_ZN8SdVolume4initEP7Sd2Cardh+0x1e4>
    fatType_ = 12;
    4faa:	8c e0       	ldi	r24, 0x0C	; 12
    4fac:	14 c0       	rjmp	.+40     	; 0x4fd6 <_ZN8SdVolume4initEP7Sd2Cardh+0x20c>
  } else if (clusterCount_ < 65525) {
    4fae:	85 3f       	cpi	r24, 0xF5	; 245
    4fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb2:	a1 05       	cpc	r26, r1
    4fb4:	b1 05       	cpc	r27, r1
    4fb6:	10 f4       	brcc	.+4      	; 0x4fbc <_ZN8SdVolume4initEP7Sd2Cardh+0x1f2>
    fatType_ = 16;
    4fb8:	80 e1       	ldi	r24, 0x10	; 16
    4fba:	0d c0       	rjmp	.+26     	; 0x4fd6 <_ZN8SdVolume4initEP7Sd2Cardh+0x20c>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    4fbc:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    4fc0:	90 91 86 07 	lds	r25, 0x0786	; 0x800786 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    4fc4:	a0 91 87 07 	lds	r26, 0x0787	; 0x800787 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    4fc8:	b0 91 88 07 	lds	r27, 0x0788	; 0x800788 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    4fcc:	8a 8f       	std	Y+26, r24	; 0x1a
    4fce:	9b 8f       	std	Y+27, r25	; 0x1b
    4fd0:	ac 8f       	std	Y+28, r26	; 0x1c
    4fd2:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    4fd4:	80 e2       	ldi	r24, 0x20	; 32
    4fd6:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
}
    4fda:	df 91       	pop	r29
    4fdc:	cf 91       	pop	r28
    4fde:	1f 91       	pop	r17
    4fe0:	0f 91       	pop	r16
    4fe2:	ff 90       	pop	r15
    4fe4:	ef 90       	pop	r14
    4fe6:	df 90       	pop	r13
    4fe8:	cf 90       	pop	r12
    4fea:	bf 90       	pop	r11
    4fec:	af 90       	pop	r10
    4fee:	9f 90       	pop	r9
    4ff0:	8f 90       	pop	r8
    4ff2:	08 95       	ret

00004ff4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
    4ff4:	cf 92       	push	r12
    4ff6:	df 92       	push	r13
    4ff8:	ef 92       	push	r14
    4ffa:	ff 92       	push	r15
    4ffc:	0f 93       	push	r16
    4ffe:	1f 93       	push	r17
    5000:	cf 93       	push	r28
    5002:	df 93       	push	r29
    5004:	7b 01       	movw	r14, r22
    5006:	6a 01       	movw	r12, r20
    5008:	08 2f       	mov	r16, r24
    500a:	10 e0       	ldi	r17, 0x00	; 0
    500c:	e8 01       	movw	r28, r16
    500e:	c6 5a       	subi	r28, 0xA6	; 166
    5010:	d6 4f       	sbci	r29, 0xF6	; 246
    5012:	88 81       	ld	r24, Y
    5014:	87 ff       	sbrs	r24, 7
    5016:	04 c0       	rjmp	.+8      	; 0x5020 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    5018:	fb 01       	movw	r30, r22
    501a:	11 82       	std	Z+1, r1	; 0x01
    501c:	10 82       	st	Z, r1
    501e:	24 c0       	rjmp	.+72     	; 0x5068 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    5020:	8c e0       	ldi	r24, 0x0C	; 12
    5022:	80 9f       	mul	r24, r16
    5024:	90 01       	movw	r18, r0
    5026:	81 9f       	mul	r24, r17
    5028:	30 0d       	add	r19, r0
    502a:	11 24       	eor	r1, r1
    502c:	88 81       	ld	r24, Y
    502e:	a9 01       	movw	r20, r18
    5030:	48 0f       	add	r20, r24
    5032:	51 1d       	adc	r21, r1
    5034:	87 fd       	sbrc	r24, 7
    5036:	5a 95       	dec	r21
    5038:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <ServoCount>
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	48 17       	cp	r20, r24
    5040:	59 07       	cpc	r21, r25
    5042:	94 f4       	brge	.+36     	; 0x5068 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    5044:	88 81       	ld	r24, Y
    5046:	a9 01       	movw	r20, r18
    5048:	48 0f       	add	r20, r24
    504a:	51 1d       	adc	r21, r1
    504c:	87 fd       	sbrc	r24, 7
    504e:	5a 95       	dec	r21
    5050:	ca 01       	movw	r24, r20
    5052:	fa 01       	movw	r30, r20
    5054:	ee 0f       	add	r30, r30
    5056:	ff 1f       	adc	r31, r31
    5058:	8e 0f       	add	r24, r30
    505a:	9f 1f       	adc	r25, r31
    505c:	fc 01       	movw	r30, r24
    505e:	e2 5a       	subi	r30, 0xA2	; 162
    5060:	f6 4f       	sbci	r31, 0xF6	; 246
    5062:	80 81       	ld	r24, Z
    5064:	86 fd       	sbrc	r24, 6
    5066:	19 c0       	rjmp	.+50     	; 0x509a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
    5068:	88 81       	ld	r24, Y
    506a:	8f 5f       	subi	r24, 0xFF	; 255
    506c:	88 83       	st	Y, r24
    506e:	8c e0       	ldi	r24, 0x0C	; 12
    5070:	80 9f       	mul	r24, r16
    5072:	90 01       	movw	r18, r0
    5074:	81 9f       	mul	r24, r17
    5076:	30 0d       	add	r19, r0
    5078:	11 24       	eor	r1, r1
    507a:	88 81       	ld	r24, Y
    507c:	a9 01       	movw	r20, r18
    507e:	48 0f       	add	r20, r24
    5080:	51 1d       	adc	r21, r1
    5082:	87 fd       	sbrc	r24, 7
    5084:	5a 95       	dec	r21
    5086:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <ServoCount>
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	48 17       	cp	r20, r24
    508e:	59 07       	cpc	r21, r25
    5090:	bc f4       	brge	.+46     	; 0x50c0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    5092:	88 81       	ld	r24, Y
    5094:	8c 30       	cpi	r24, 0x0C	; 12
    5096:	44 f1       	brlt	.+80     	; 0x50e8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf4>
    5098:	13 c0       	rjmp	.+38     	; 0x50c0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    509a:	88 81       	ld	r24, Y
    509c:	28 0f       	add	r18, r24
    509e:	31 1d       	adc	r19, r1
    50a0:	87 fd       	sbrc	r24, 7
    50a2:	3a 95       	dec	r19
    50a4:	f9 01       	movw	r30, r18
    50a6:	ee 0f       	add	r30, r30
    50a8:	ff 1f       	adc	r31, r31
    50aa:	2e 0f       	add	r18, r30
    50ac:	3f 1f       	adc	r19, r31
    50ae:	f9 01       	movw	r30, r18
    50b0:	e2 5a       	subi	r30, 0xA2	; 162
    50b2:	f6 4f       	sbci	r31, 0xF6	; 246
    50b4:	80 81       	ld	r24, Z
    50b6:	60 e0       	ldi	r22, 0x00	; 0
    50b8:	8f 73       	andi	r24, 0x3F	; 63
    50ba:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>
    50be:	d4 cf       	rjmp	.-88     	; 0x5068 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    50c0:	f7 01       	movw	r30, r14
    50c2:	80 81       	ld	r24, Z
    50c4:	91 81       	ldd	r25, Z+1	; 0x01
    50c6:	04 96       	adiw	r24, 0x04	; 4
    50c8:	80 34       	cpi	r24, 0x40	; 64
    50ca:	9c 49       	sbci	r25, 0x9C	; 156
    50cc:	18 f4       	brcc	.+6      	; 0x50d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe0>
    50ce:	80 e4       	ldi	r24, 0x40	; 64
    50d0:	9c e9       	ldi	r25, 0x9C	; 156
    50d2:	04 c0       	rjmp	.+8      	; 0x50dc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe8>
    50d4:	f7 01       	movw	r30, r14
    50d6:	80 81       	ld	r24, Z
    50d8:	91 81       	ldd	r25, Z+1	; 0x01
    50da:	04 96       	adiw	r24, 0x04	; 4
    50dc:	f6 01       	movw	r30, r12
    50de:	91 83       	std	Z+1, r25	; 0x01
    50e0:	80 83       	st	Z, r24
    50e2:	8f ef       	ldi	r24, 0xFF	; 255
    50e4:	88 83       	st	Y, r24
    50e6:	45 c0       	rjmp	.+138    	; 0x5172 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    50e8:	f7 01       	movw	r30, r14
    50ea:	40 81       	ld	r20, Z
    50ec:	51 81       	ldd	r21, Z+1	; 0x01
    50ee:	88 81       	ld	r24, Y
    50f0:	b9 01       	movw	r22, r18
    50f2:	68 0f       	add	r22, r24
    50f4:	71 1d       	adc	r23, r1
    50f6:	87 fd       	sbrc	r24, 7
    50f8:	7a 95       	dec	r23
    50fa:	cb 01       	movw	r24, r22
    50fc:	fb 01       	movw	r30, r22
    50fe:	ee 0f       	add	r30, r30
    5100:	ff 1f       	adc	r31, r31
    5102:	8e 0f       	add	r24, r30
    5104:	9f 1f       	adc	r25, r31
    5106:	fc 01       	movw	r30, r24
    5108:	e2 5a       	subi	r30, 0xA2	; 162
    510a:	f6 4f       	sbci	r31, 0xF6	; 246
    510c:	81 81       	ldd	r24, Z+1	; 0x01
    510e:	92 81       	ldd	r25, Z+2	; 0x02
    5110:	84 0f       	add	r24, r20
    5112:	95 1f       	adc	r25, r21
    5114:	f6 01       	movw	r30, r12
    5116:	91 83       	std	Z+1, r25	; 0x01
    5118:	80 83       	st	Z, r24
    511a:	88 81       	ld	r24, Y
    511c:	a9 01       	movw	r20, r18
    511e:	48 0f       	add	r20, r24
    5120:	51 1d       	adc	r21, r1
    5122:	87 fd       	sbrc	r24, 7
    5124:	5a 95       	dec	r21
    5126:	ca 01       	movw	r24, r20
    5128:	fa 01       	movw	r30, r20
    512a:	ee 0f       	add	r30, r30
    512c:	ff 1f       	adc	r31, r31
    512e:	8e 0f       	add	r24, r30
    5130:	9f 1f       	adc	r25, r31
    5132:	fc 01       	movw	r30, r24
    5134:	e2 5a       	subi	r30, 0xA2	; 162
    5136:	f6 4f       	sbci	r31, 0xF6	; 246
    5138:	80 81       	ld	r24, Z
    513a:	86 ff       	sbrs	r24, 6
    513c:	1a c0       	rjmp	.+52     	; 0x5172 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
    513e:	88 81       	ld	r24, Y
    5140:	28 0f       	add	r18, r24
    5142:	31 1d       	adc	r19, r1
    5144:	87 fd       	sbrc	r24, 7
    5146:	3a 95       	dec	r19
    5148:	f9 01       	movw	r30, r18
    514a:	ee 0f       	add	r30, r30
    514c:	ff 1f       	adc	r31, r31
    514e:	2e 0f       	add	r18, r30
    5150:	3f 1f       	adc	r19, r31
    5152:	f9 01       	movw	r30, r18
    5154:	e2 5a       	subi	r30, 0xA2	; 162
    5156:	f6 4f       	sbci	r31, 0xF6	; 246
    5158:	80 81       	ld	r24, Z
    515a:	61 e0       	ldi	r22, 0x01	; 1
    515c:	8f 73       	andi	r24, 0x3F	; 63
    515e:	df 91       	pop	r29
    5160:	cf 91       	pop	r28
    5162:	1f 91       	pop	r17
    5164:	0f 91       	pop	r16
    5166:	ff 90       	pop	r15
    5168:	ef 90       	pop	r14
    516a:	df 90       	pop	r13
    516c:	cf 90       	pop	r12
    516e:	0c 94 bd 12 	jmp	0x257a	; 0x257a <digitalWrite>
    5172:	df 91       	pop	r29
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ff 90       	pop	r15
    517c:	ef 90       	pop	r14
    517e:	df 90       	pop	r13
    5180:	cf 90       	pop	r12
    5182:	08 95       	ret

00005184 <__vector_17>:
    5184:	1f 92       	push	r1
    5186:	0f 92       	push	r0
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	0f 92       	push	r0
    518c:	11 24       	eor	r1, r1
    518e:	0b b6       	in	r0, 0x3b	; 59
    5190:	0f 92       	push	r0
    5192:	2f 93       	push	r18
    5194:	3f 93       	push	r19
    5196:	4f 93       	push	r20
    5198:	5f 93       	push	r21
    519a:	6f 93       	push	r22
    519c:	7f 93       	push	r23
    519e:	8f 93       	push	r24
    51a0:	9f 93       	push	r25
    51a2:	af 93       	push	r26
    51a4:	bf 93       	push	r27
    51a6:	ef 93       	push	r30
    51a8:	ff 93       	push	r31
    51aa:	48 e8       	ldi	r20, 0x88	; 136
    51ac:	50 e0       	ldi	r21, 0x00	; 0
    51ae:	64 e8       	ldi	r22, 0x84	; 132
    51b0:	70 e0       	ldi	r23, 0x00	; 0
    51b2:	81 e0       	ldi	r24, 0x01	; 1
    51b4:	1f df       	rcall	.-450    	; 0x4ff4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    51b6:	ff 91       	pop	r31
    51b8:	ef 91       	pop	r30
    51ba:	bf 91       	pop	r27
    51bc:	af 91       	pop	r26
    51be:	9f 91       	pop	r25
    51c0:	8f 91       	pop	r24
    51c2:	7f 91       	pop	r23
    51c4:	6f 91       	pop	r22
    51c6:	5f 91       	pop	r21
    51c8:	4f 91       	pop	r20
    51ca:	3f 91       	pop	r19
    51cc:	2f 91       	pop	r18
    51ce:	0f 90       	pop	r0
    51d0:	0b be       	out	0x3b, r0	; 59
    51d2:	0f 90       	pop	r0
    51d4:	0f be       	out	0x3f, r0	; 63
    51d6:	0f 90       	pop	r0
    51d8:	1f 90       	pop	r1
    51da:	18 95       	reti

000051dc <__vector_32>:
    51dc:	1f 92       	push	r1
    51de:	0f 92       	push	r0
    51e0:	0f b6       	in	r0, 0x3f	; 63
    51e2:	0f 92       	push	r0
    51e4:	11 24       	eor	r1, r1
    51e6:	0b b6       	in	r0, 0x3b	; 59
    51e8:	0f 92       	push	r0
    51ea:	2f 93       	push	r18
    51ec:	3f 93       	push	r19
    51ee:	4f 93       	push	r20
    51f0:	5f 93       	push	r21
    51f2:	6f 93       	push	r22
    51f4:	7f 93       	push	r23
    51f6:	8f 93       	push	r24
    51f8:	9f 93       	push	r25
    51fa:	af 93       	push	r26
    51fc:	bf 93       	push	r27
    51fe:	ef 93       	push	r30
    5200:	ff 93       	push	r31
    5202:	48 e9       	ldi	r20, 0x98	; 152
    5204:	50 e0       	ldi	r21, 0x00	; 0
    5206:	64 e9       	ldi	r22, 0x94	; 148
    5208:	70 e0       	ldi	r23, 0x00	; 0
    520a:	82 e0       	ldi	r24, 0x02	; 2
    520c:	f3 de       	rcall	.-538    	; 0x4ff4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    520e:	ff 91       	pop	r31
    5210:	ef 91       	pop	r30
    5212:	bf 91       	pop	r27
    5214:	af 91       	pop	r26
    5216:	9f 91       	pop	r25
    5218:	8f 91       	pop	r24
    521a:	7f 91       	pop	r23
    521c:	6f 91       	pop	r22
    521e:	5f 91       	pop	r21
    5220:	4f 91       	pop	r20
    5222:	3f 91       	pop	r19
    5224:	2f 91       	pop	r18
    5226:	0f 90       	pop	r0
    5228:	0b be       	out	0x3b, r0	; 59
    522a:	0f 90       	pop	r0
    522c:	0f be       	out	0x3f, r0	; 63
    522e:	0f 90       	pop	r0
    5230:	1f 90       	pop	r1
    5232:	18 95       	reti

00005234 <__vector_42>:
    5234:	1f 92       	push	r1
    5236:	0f 92       	push	r0
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	0f 92       	push	r0
    523c:	11 24       	eor	r1, r1
    523e:	0b b6       	in	r0, 0x3b	; 59
    5240:	0f 92       	push	r0
    5242:	2f 93       	push	r18
    5244:	3f 93       	push	r19
    5246:	4f 93       	push	r20
    5248:	5f 93       	push	r21
    524a:	6f 93       	push	r22
    524c:	7f 93       	push	r23
    524e:	8f 93       	push	r24
    5250:	9f 93       	push	r25
    5252:	af 93       	push	r26
    5254:	bf 93       	push	r27
    5256:	ef 93       	push	r30
    5258:	ff 93       	push	r31
    525a:	48 ea       	ldi	r20, 0xA8	; 168
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	64 ea       	ldi	r22, 0xA4	; 164
    5260:	70 e0       	ldi	r23, 0x00	; 0
    5262:	83 e0       	ldi	r24, 0x03	; 3
    5264:	c7 de       	rcall	.-626    	; 0x4ff4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    5266:	ff 91       	pop	r31
    5268:	ef 91       	pop	r30
    526a:	bf 91       	pop	r27
    526c:	af 91       	pop	r26
    526e:	9f 91       	pop	r25
    5270:	8f 91       	pop	r24
    5272:	7f 91       	pop	r23
    5274:	6f 91       	pop	r22
    5276:	5f 91       	pop	r21
    5278:	4f 91       	pop	r20
    527a:	3f 91       	pop	r19
    527c:	2f 91       	pop	r18
    527e:	0f 90       	pop	r0
    5280:	0b be       	out	0x3b, r0	; 59
    5282:	0f 90       	pop	r0
    5284:	0f be       	out	0x3f, r0	; 63
    5286:	0f 90       	pop	r0
    5288:	1f 90       	pop	r1
    528a:	18 95       	reti

0000528c <__vector_47>:
    528c:	1f 92       	push	r1
    528e:	0f 92       	push	r0
    5290:	0f b6       	in	r0, 0x3f	; 63
    5292:	0f 92       	push	r0
    5294:	11 24       	eor	r1, r1
    5296:	0b b6       	in	r0, 0x3b	; 59
    5298:	0f 92       	push	r0
    529a:	2f 93       	push	r18
    529c:	3f 93       	push	r19
    529e:	4f 93       	push	r20
    52a0:	5f 93       	push	r21
    52a2:	6f 93       	push	r22
    52a4:	7f 93       	push	r23
    52a6:	8f 93       	push	r24
    52a8:	9f 93       	push	r25
    52aa:	af 93       	push	r26
    52ac:	bf 93       	push	r27
    52ae:	ef 93       	push	r30
    52b0:	ff 93       	push	r31
    52b2:	48 e2       	ldi	r20, 0x28	; 40
    52b4:	51 e0       	ldi	r21, 0x01	; 1
    52b6:	64 e2       	ldi	r22, 0x24	; 36
    52b8:	71 e0       	ldi	r23, 0x01	; 1
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	9b de       	rcall	.-714    	; 0x4ff4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    52be:	ff 91       	pop	r31
    52c0:	ef 91       	pop	r30
    52c2:	bf 91       	pop	r27
    52c4:	af 91       	pop	r26
    52c6:	9f 91       	pop	r25
    52c8:	8f 91       	pop	r24
    52ca:	7f 91       	pop	r23
    52cc:	6f 91       	pop	r22
    52ce:	5f 91       	pop	r21
    52d0:	4f 91       	pop	r20
    52d2:	3f 91       	pop	r19
    52d4:	2f 91       	pop	r18
    52d6:	0f 90       	pop	r0
    52d8:	0b be       	out	0x3b, r0	; 59
    52da:	0f 90       	pop	r0
    52dc:	0f be       	out	0x3f, r0	; 63
    52de:	0f 90       	pop	r0
    52e0:	1f 90       	pop	r1
    52e2:	18 95       	reti

000052e4 <_ZN5ServoC1Ev>:
    52e4:	fc 01       	movw	r30, r24
    52e6:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <ServoCount>
    52ea:	90 33       	cpi	r25, 0x30	; 48
    52ec:	a0 f4       	brcc	.+40     	; 0x5316 <_ZN5ServoC1Ev+0x32>
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	89 0f       	add	r24, r25
    52f2:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <ServoCount>
    52f6:	90 83       	st	Z, r25
    52f8:	89 2f       	mov	r24, r25
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	fc 01       	movw	r30, r24
    52fe:	ee 0f       	add	r30, r30
    5300:	ff 1f       	adc	r31, r31
    5302:	8e 0f       	add	r24, r30
    5304:	9f 1f       	adc	r25, r31
    5306:	fc 01       	movw	r30, r24
    5308:	e2 5a       	subi	r30, 0xA2	; 162
    530a:	f6 4f       	sbci	r31, 0xF6	; 246
    530c:	88 eb       	ldi	r24, 0xB8	; 184
    530e:	9b e0       	ldi	r25, 0x0B	; 11
    5310:	92 83       	std	Z+2, r25	; 0x02
    5312:	81 83       	std	Z+1, r24	; 0x01
    5314:	08 95       	ret
    5316:	8f ef       	ldi	r24, 0xFF	; 255
    5318:	80 83       	st	Z, r24
    531a:	08 95       	ret

0000531c <_ZN5Servo6attachEiii>:
    531c:	df 92       	push	r13
    531e:	ef 92       	push	r14
    5320:	ff 92       	push	r15
    5322:	0f 93       	push	r16
    5324:	1f 93       	push	r17
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	ec 01       	movw	r28, r24
    532c:	d6 2e       	mov	r13, r22
    532e:	7a 01       	movw	r14, r20
    5330:	89 01       	movw	r16, r18
    5332:	88 81       	ld	r24, Y
    5334:	80 33       	cpi	r24, 0x30	; 48
    5336:	08 f0       	brcs	.+2      	; 0x533a <_ZN5Servo6attachEiii+0x1e>
    5338:	67 c0       	rjmp	.+206    	; 0x5408 <_ZN5Servo6attachEiii+0xec>
    533a:	61 e0       	ldi	r22, 0x01	; 1
    533c:	8d 2d       	mov	r24, r13
    533e:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
    5342:	88 81       	ld	r24, Y
    5344:	e8 2f       	mov	r30, r24
    5346:	f0 e0       	ldi	r31, 0x00	; 0
    5348:	9f 01       	movw	r18, r30
    534a:	22 0f       	add	r18, r18
    534c:	33 1f       	adc	r19, r19
    534e:	e2 0f       	add	r30, r18
    5350:	f3 1f       	adc	r31, r19
    5352:	e2 5a       	subi	r30, 0xA2	; 162
    5354:	f6 4f       	sbci	r31, 0xF6	; 246
    5356:	9d 2d       	mov	r25, r13
    5358:	9f 73       	andi	r25, 0x3F	; 63
    535a:	20 81       	ld	r18, Z
    535c:	20 7c       	andi	r18, 0xC0	; 192
    535e:	d2 2e       	mov	r13, r18
    5360:	d9 2a       	or	r13, r25
    5362:	d0 82       	st	Z, r13
    5364:	20 e2       	ldi	r18, 0x20	; 32
    5366:	32 e0       	ldi	r19, 0x02	; 2
    5368:	2e 19       	sub	r18, r14
    536a:	3f 09       	sbc	r19, r15
    536c:	37 ff       	sbrs	r19, 7
    536e:	02 c0       	rjmp	.+4      	; 0x5374 <_ZN5Servo6attachEiii+0x58>
    5370:	2d 5f       	subi	r18, 0xFD	; 253
    5372:	3f 4f       	sbci	r19, 0xFF	; 255
    5374:	35 95       	asr	r19
    5376:	27 95       	ror	r18
    5378:	35 95       	asr	r19
    537a:	27 95       	ror	r18
    537c:	29 83       	std	Y+1, r18	; 0x01
    537e:	20 e6       	ldi	r18, 0x60	; 96
    5380:	39 e0       	ldi	r19, 0x09	; 9
    5382:	20 1b       	sub	r18, r16
    5384:	31 0b       	sbc	r19, r17
    5386:	37 ff       	sbrs	r19, 7
    5388:	02 c0       	rjmp	.+4      	; 0x538e <_ZN5Servo6attachEiii+0x72>
    538a:	2d 5f       	subi	r18, 0xFD	; 253
    538c:	3f 4f       	sbci	r19, 0xFF	; 255
    538e:	35 95       	asr	r19
    5390:	27 95       	ror	r18
    5392:	35 95       	asr	r19
    5394:	27 95       	ror	r18
    5396:	2a 83       	std	Y+2, r18	; 0x02
    5398:	2c e0       	ldi	r18, 0x0C	; 12
    539a:	62 2f       	mov	r22, r18
    539c:	63 d5       	rcall	.+2758   	; 0x5e64 <__udivmodqi4>
    539e:	28 9f       	mul	r18, r24
    53a0:	b0 01       	movw	r22, r0
    53a2:	11 24       	eor	r1, r1
    53a4:	40 e0       	ldi	r20, 0x00	; 0
    53a6:	50 e0       	ldi	r21, 0x00	; 0
    53a8:	9b 01       	movw	r18, r22
    53aa:	24 0f       	add	r18, r20
    53ac:	35 1f       	adc	r19, r21
    53ae:	f9 01       	movw	r30, r18
    53b0:	ee 0f       	add	r30, r30
    53b2:	ff 1f       	adc	r31, r31
    53b4:	2e 0f       	add	r18, r30
    53b6:	3f 1f       	adc	r19, r31
    53b8:	f9 01       	movw	r30, r18
    53ba:	e2 5a       	subi	r30, 0xA2	; 162
    53bc:	f6 4f       	sbci	r31, 0xF6	; 246
    53be:	90 81       	ld	r25, Z
    53c0:	96 fd       	sbrc	r25, 6
    53c2:	16 c0       	rjmp	.+44     	; 0x53f0 <_ZN5Servo6attachEiii+0xd4>
    53c4:	4f 5f       	subi	r20, 0xFF	; 255
    53c6:	5f 4f       	sbci	r21, 0xFF	; 255
    53c8:	4c 30       	cpi	r20, 0x0C	; 12
    53ca:	51 05       	cpc	r21, r1
    53cc:	69 f7       	brne	.-38     	; 0x53a8 <_ZN5Servo6attachEiii+0x8c>
    53ce:	81 30       	cpi	r24, 0x01	; 1
    53d0:	21 f5       	brne	.+72     	; 0x541a <_ZN5Servo6attachEiii+0xfe>
    53d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    53d6:	82 e0       	ldi	r24, 0x02	; 2
    53d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    53dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    53e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    53e4:	b1 9a       	sbi	0x16, 1	; 22
    53e6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    53ea:	82 60       	ori	r24, 0x02	; 2
    53ec:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    53f0:	e8 81       	ld	r30, Y
    53f2:	f0 e0       	ldi	r31, 0x00	; 0
    53f4:	cf 01       	movw	r24, r30
    53f6:	88 0f       	add	r24, r24
    53f8:	99 1f       	adc	r25, r25
    53fa:	e8 0f       	add	r30, r24
    53fc:	f9 1f       	adc	r31, r25
    53fe:	e2 5a       	subi	r30, 0xA2	; 162
    5400:	f6 4f       	sbci	r31, 0xF6	; 246
    5402:	80 81       	ld	r24, Z
    5404:	80 64       	ori	r24, 0x40	; 64
    5406:	80 83       	st	Z, r24
    5408:	88 81       	ld	r24, Y
    540a:	df 91       	pop	r29
    540c:	cf 91       	pop	r28
    540e:	1f 91       	pop	r17
    5410:	0f 91       	pop	r16
    5412:	ff 90       	pop	r15
    5414:	ef 90       	pop	r14
    5416:	df 90       	pop	r13
    5418:	08 95       	ret
    541a:	82 30       	cpi	r24, 0x02	; 2
    541c:	61 f4       	brne	.+24     	; 0x5436 <_ZN5Servo6attachEiii+0x11a>
    541e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    5422:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    5426:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    542a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    542e:	88 bb       	out	0x18, r24	; 24
    5430:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    5434:	dd cf       	rjmp	.-70     	; 0x53f0 <_ZN5Servo6attachEiii+0xd4>
    5436:	83 30       	cpi	r24, 0x03	; 3
    5438:	69 f4       	brne	.+26     	; 0x5454 <_ZN5Servo6attachEiii+0x138>
    543a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    543e:	82 e0       	ldi	r24, 0x02	; 2
    5440:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    5444:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    5448:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    544c:	89 bb       	out	0x19, r24	; 25
    544e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    5452:	ce cf       	rjmp	.-100    	; 0x53f0 <_ZN5Servo6attachEiii+0xd4>
    5454:	81 11       	cpse	r24, r1
    5456:	cc cf       	rjmp	.-104    	; 0x53f0 <_ZN5Servo6attachEiii+0xd4>
    5458:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    545c:	82 e0       	ldi	r24, 0x02	; 2
    545e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    5462:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
    5466:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
    546a:	8a bb       	out	0x1a, r24	; 26
    546c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    5470:	bf cf       	rjmp	.-130    	; 0x53f0 <_ZN5Servo6attachEiii+0xd4>

00005472 <_ZN5Servo6attachEi>:
    5472:	20 e6       	ldi	r18, 0x60	; 96
    5474:	39 e0       	ldi	r19, 0x09	; 9
    5476:	40 e2       	ldi	r20, 0x20	; 32
    5478:	52 e0       	ldi	r21, 0x02	; 2
    547a:	50 cf       	rjmp	.-352    	; 0x531c <_ZN5Servo6attachEiii>

0000547c <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    547c:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    547e:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    5480:	90 33       	cpi	r25, 0x30	; 48
    5482:	88 f5       	brcc	.+98     	; 0x54e6 <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    5484:	81 81       	ldd	r24, Z+1	; 0x01
    5486:	28 e8       	ldi	r18, 0x88	; 136
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	28 1b       	sub	r18, r24
    548c:	31 09       	sbc	r19, r1
    548e:	87 fd       	sbrc	r24, 7
    5490:	33 95       	inc	r19
    5492:	22 0f       	add	r18, r18
    5494:	33 1f       	adc	r19, r19
    5496:	22 0f       	add	r18, r18
    5498:	33 1f       	adc	r19, r19
    549a:	62 17       	cp	r22, r18
    549c:	73 07       	cpc	r23, r19
    549e:	84 f0       	brlt	.+32     	; 0x54c0 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    54a0:	82 81       	ldd	r24, Z+2	; 0x02
    54a2:	48 e5       	ldi	r20, 0x58	; 88
    54a4:	52 e0       	ldi	r21, 0x02	; 2
    54a6:	48 1b       	sub	r20, r24
    54a8:	51 09       	sbc	r21, r1
    54aa:	87 fd       	sbrc	r24, 7
    54ac:	53 95       	inc	r21
    54ae:	44 0f       	add	r20, r20
    54b0:	55 1f       	adc	r21, r21
    54b2:	44 0f       	add	r20, r20
    54b4:	55 1f       	adc	r21, r21
    54b6:	9b 01       	movw	r18, r22
    54b8:	46 17       	cp	r20, r22
    54ba:	57 07       	cpc	r21, r23
    54bc:	0c f4       	brge	.+2      	; 0x54c0 <_ZN5Servo17writeMicrosecondsEi+0x44>
    54be:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    54c0:	22 50       	subi	r18, 0x02	; 2
    54c2:	31 09       	sbc	r19, r1
    54c4:	22 0f       	add	r18, r18
    54c6:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
    54c8:	4f b7       	in	r20, 0x3f	; 63
    cli();
    54ca:	f8 94       	cli
    servos[channel].ticks = value;
    54cc:	89 2f       	mov	r24, r25
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	fc 01       	movw	r30, r24
    54d2:	ee 0f       	add	r30, r30
    54d4:	ff 1f       	adc	r31, r31
    54d6:	8e 0f       	add	r24, r30
    54d8:	9f 1f       	adc	r25, r31
    54da:	fc 01       	movw	r30, r24
    54dc:	e2 5a       	subi	r30, 0xA2	; 162
    54de:	f6 4f       	sbci	r31, 0xF6	; 246
    54e0:	32 83       	std	Z+2, r19	; 0x02
    54e2:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
    54e4:	4f bf       	out	0x3f, r20	; 63
    54e6:	08 95       	ret

000054e8 <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
    54e8:	af 92       	push	r10
    54ea:	bf 92       	push	r11
    54ec:	cf 92       	push	r12
    54ee:	df 92       	push	r13
    54f0:	ef 92       	push	r14
    54f2:	ff 92       	push	r15
    54f4:	0f 93       	push	r16
    54f6:	1f 93       	push	r17
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    54fe:	60 32       	cpi	r22, 0x20	; 32
    5500:	82 e0       	ldi	r24, 0x02	; 2
    5502:	78 07       	cpc	r23, r24
    5504:	0c f0       	brlt	.+2      	; 0x5508 <_ZN5Servo5writeEi+0x20>
    5506:	3f c0       	rjmp	.+126    	; 0x5586 <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    5508:	77 fd       	sbrc	r23, 7
    550a:	06 c0       	rjmp	.+12     	; 0x5518 <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
    550c:	65 3b       	cpi	r22, 0xB5	; 181
    550e:	71 05       	cpc	r23, r1
    5510:	2c f0       	brlt	.+10     	; 0x551c <_ZN5Servo5writeEi+0x34>
    5512:	64 eb       	ldi	r22, 0xB4	; 180
    5514:	70 e0       	ldi	r23, 0x00	; 0
    5516:	02 c0       	rjmp	.+4      	; 0x551c <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    5518:	60 e0       	ldi	r22, 0x00	; 0
    551a:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    551c:	89 81       	ldd	r24, Y+1	; 0x01
    551e:	28 e8       	ldi	r18, 0x88	; 136
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	59 01       	movw	r10, r18
    5524:	a8 1a       	sub	r10, r24
    5526:	b1 08       	sbc	r11, r1
    5528:	87 fd       	sbrc	r24, 7
    552a:	b3 94       	inc	r11
    552c:	aa 0c       	add	r10, r10
    552e:	bb 1c       	adc	r11, r11
    5530:	aa 0c       	add	r10, r10
    5532:	bb 1c       	adc	r11, r11
    5534:	0b 2c       	mov	r0, r11
    5536:	00 0c       	add	r0, r0
    5538:	cc 08       	sbc	r12, r12
    553a:	dd 08       	sbc	r13, r13
    553c:	07 2e       	mov	r0, r23
    553e:	00 0c       	add	r0, r0
    5540:	88 0b       	sbc	r24, r24
    5542:	99 0b       	sbc	r25, r25
    5544:	2a 81       	ldd	r18, Y+2	; 0x02
    5546:	08 e5       	ldi	r16, 0x58	; 88
    5548:	12 e0       	ldi	r17, 0x02	; 2
    554a:	02 1b       	sub	r16, r18
    554c:	11 09       	sbc	r17, r1
    554e:	27 fd       	sbrc	r18, 7
    5550:	13 95       	inc	r17
    5552:	00 0f       	add	r16, r16
    5554:	11 1f       	adc	r17, r17
    5556:	00 0f       	add	r16, r16
    5558:	11 1f       	adc	r17, r17
    555a:	01 2e       	mov	r0, r17
    555c:	00 0c       	add	r0, r0
    555e:	22 0b       	sbc	r18, r18
    5560:	33 0b       	sbc	r19, r19
    5562:	3f 93       	push	r19
    5564:	2f 93       	push	r18
    5566:	1f 93       	push	r17
    5568:	0f 93       	push	r16
    556a:	14 eb       	ldi	r17, 0xB4	; 180
    556c:	e1 2e       	mov	r14, r17
    556e:	f1 2c       	mov	r15, r1
    5570:	00 e0       	ldi	r16, 0x00	; 0
    5572:	10 e0       	ldi	r17, 0x00	; 0
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	a9 01       	movw	r20, r18
    557a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_Z3maplllll>
    557e:	0f 90       	pop	r0
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    5586:	ce 01       	movw	r24, r28
}
    5588:	df 91       	pop	r29
    558a:	cf 91       	pop	r28
    558c:	1f 91       	pop	r17
    558e:	0f 91       	pop	r16
    5590:	ff 90       	pop	r15
    5592:	ef 90       	pop	r14
    5594:	df 90       	pop	r13
    5596:	cf 90       	pop	r12
    5598:	bf 90       	pop	r11
    559a:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
    559c:	6f cf       	rjmp	.-290    	; 0x547c <_ZN5Servo17writeMicrosecondsEi>

0000559e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    559e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    55a0:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    55a2:	f8 94       	cli
  if (!initialized) {
    55a4:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <_ZN8SPIClass11initializedE>
    55a8:	81 11       	cpse	r24, r1
    55aa:	27 c0       	rjmp	.+78     	; 0x55fa <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    55ac:	e9 e4       	ldi	r30, 0x49	; 73
    55ae:	f2 e0       	ldi	r31, 0x02	; 2
    55b0:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    55b2:	e3 e0       	ldi	r30, 0x03	; 3
    55b4:	f2 e0       	ldi	r31, 0x02	; 2
    55b6:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    55b8:	e8 2f       	mov	r30, r24
    55ba:	f0 e0       	ldi	r31, 0x00	; 0
    55bc:	ee 0f       	add	r30, r30
    55be:	ff 1f       	adc	r31, r31
    55c0:	e2 57       	subi	r30, 0x72	; 114
    55c2:	fd 4f       	sbci	r31, 0xFD	; 253
    55c4:	a5 91       	lpm	r26, Z+
    55c6:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    55c8:	ec 91       	ld	r30, X
    55ca:	e9 23       	and	r30, r25
    55cc:	21 f4       	brne	.+8      	; 0x55d6 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    55ce:	61 e0       	ldi	r22, 0x01	; 1
    55d0:	85 e3       	ldi	r24, 0x35	; 53
    55d2:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    55d6:	61 e0       	ldi	r22, 0x01	; 1
    55d8:	85 e3       	ldi	r24, 0x35	; 53
    55da:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    55de:	8c b5       	in	r24, 0x2c	; 44
    55e0:	80 61       	ori	r24, 0x10	; 16
    55e2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    55e4:	8c b5       	in	r24, 0x2c	; 44
    55e6:	80 64       	ori	r24, 0x40	; 64
    55e8:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    55ea:	61 e0       	ldi	r22, 0x01	; 1
    55ec:	84 e3       	ldi	r24, 0x34	; 52
    55ee:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
    pinMode(MOSI, OUTPUT);
    55f2:	61 e0       	ldi	r22, 0x01	; 1
    55f4:	83 e3       	ldi	r24, 0x33	; 51
    55f6:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
  }
  initialized++; // reference count
    55fa:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <_ZN8SPIClass11initializedE>
    55fe:	8f 5f       	subi	r24, 0xFF	; 255
    5600:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5604:	cf bf       	out	0x3f, r28	; 63
}
    5606:	cf 91       	pop	r28
    5608:	08 95       	ret

0000560a <_ZN6TMRpcm7timerStEv>:
		//Serial.print("siz");
		//Serial.println(sFile.size());
		sFile.close();

	}
}
    560a:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <tt>
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	22 0f       	add	r18, r18
    5612:	33 1f       	adc	r19, r19
    5614:	f9 01       	movw	r30, r18
    5616:	e8 5c       	subi	r30, 0xC8	; 200
    5618:	fd 4f       	sbci	r31, 0xFD	; 253
    561a:	01 90       	ld	r0, Z+
    561c:	f0 81       	ld	r31, Z
    561e:	e0 2d       	mov	r30, r0
    5620:	dc 01       	movw	r26, r24
    5622:	15 96       	adiw	r26, 0x05	; 5
    5624:	8d 91       	ld	r24, X+
    5626:	9c 91       	ld	r25, X
    5628:	16 97       	sbiw	r26, 0x06	; 6
    562a:	91 83       	std	Z+1, r25	; 0x01
    562c:	80 83       	st	Z, r24
    562e:	f9 01       	movw	r30, r18
    5630:	e0 5b       	subi	r30, 0xB0	; 176
    5632:	fd 4f       	sbci	r31, 0xFD	; 253
    5634:	01 90       	ld	r0, Z+
    5636:	f0 81       	ld	r31, Z
    5638:	e0 2d       	mov	r30, r0
    563a:	82 eb       	ldi	r24, 0xB2	; 178
    563c:	80 83       	st	Z, r24
    563e:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    5642:	f0 e0       	ldi	r31, 0x00	; 0
    5644:	ee 0f       	add	r30, r30
    5646:	ff 1f       	adc	r31, r31
    5648:	e8 5b       	subi	r30, 0xB8	; 184
    564a:	fd 4f       	sbci	r31, 0xFD	; 253
    564c:	01 90       	ld	r0, Z+
    564e:	f0 81       	ld	r31, Z
    5650:	e0 2d       	mov	r30, r0
    5652:	89 e1       	ldi	r24, 0x19	; 25
    5654:	80 83       	st	Z, r24
    5656:	08 95       	ret

00005658 <_ZN5SDLib4FileaSEOS0_>:
    5658:	cf 93       	push	r28
    565a:	df 93       	push	r29
    565c:	fb 01       	movw	r30, r22
    565e:	22 81       	ldd	r18, Z+2	; 0x02
    5660:	33 81       	ldd	r19, Z+3	; 0x03
    5662:	dc 01       	movw	r26, r24
    5664:	13 96       	adiw	r26, 0x03	; 3
    5666:	3c 93       	st	X, r19
    5668:	2e 93       	st	-X, r18
    566a:	12 97       	sbiw	r26, 0x02	; 2
    566c:	44 81       	ldd	r20, Z+4	; 0x04
    566e:	55 81       	ldd	r21, Z+5	; 0x05
    5670:	66 81       	ldd	r22, Z+6	; 0x06
    5672:	77 81       	ldd	r23, Z+7	; 0x07
    5674:	14 96       	adiw	r26, 0x04	; 4
    5676:	4d 93       	st	X+, r20
    5678:	5d 93       	st	X+, r21
    567a:	6d 93       	st	X+, r22
    567c:	7c 93       	st	X, r23
    567e:	17 97       	sbiw	r26, 0x07	; 7
    5680:	40 85       	ldd	r20, Z+8	; 0x08
    5682:	51 85       	ldd	r21, Z+9	; 0x09
    5684:	62 85       	ldd	r22, Z+10	; 0x0a
    5686:	73 85       	ldd	r23, Z+11	; 0x0b
    5688:	18 96       	adiw	r26, 0x08	; 8
    568a:	4d 93       	st	X+, r20
    568c:	5d 93       	st	X+, r21
    568e:	6d 93       	st	X+, r22
    5690:	7c 93       	st	X, r23
    5692:	1b 97       	sbiw	r26, 0x0b	; 11
    5694:	1c 96       	adiw	r26, 0x0c	; 12
    5696:	ef 01       	movw	r28, r30
    5698:	2c 96       	adiw	r28, 0x0c	; 12
    569a:	9c 01       	movw	r18, r24
    569c:	27 5e       	subi	r18, 0xE7	; 231
    569e:	3f 4f       	sbci	r19, 0xFF	; 255
    56a0:	49 91       	ld	r20, Y+
    56a2:	4d 93       	st	X+, r20
    56a4:	a2 17       	cp	r26, r18
    56a6:	b3 07       	cpc	r27, r19
    56a8:	d9 f7       	brne	.-10     	; 0x56a0 <_ZN5SDLib4FileaSEOS0_+0x48>
    56aa:	21 8d       	ldd	r18, Z+25	; 0x19
    56ac:	32 8d       	ldd	r19, Z+26	; 0x1a
    56ae:	fc 01       	movw	r30, r24
    56b0:	32 8f       	std	Z+26, r19	; 0x1a
    56b2:	21 8f       	std	Z+25, r18	; 0x19
    56b4:	df 91       	pop	r29
    56b6:	cf 91       	pop	r28
    56b8:	08 95       	ret

000056ba <_ZN6TMRpcm4seekEm>:
    56ba:	82 ef       	ldi	r24, 0xF2	; 242
    56bc:	99 e0       	ldi	r25, 0x09	; 9
    56be:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <_ZN5SDLib4File4seekEm>

000056c2 <_ZN6TMRpcm6ifOpenEv>:
    56c2:	82 ef       	ldi	r24, 0xF2	; 242
    56c4:	99 e0       	ldi	r25, 0x09	; 9
    56c6:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN5SDLib4FilecvbEv>
    56ca:	88 23       	and	r24, r24
    56cc:	11 f0       	breq	.+4      	; 0x56d2 <_ZN6TMRpcm6ifOpenEv+0x10>
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	08 95       	ret
    56d2:	08 95       	ret

000056d4 <_ZN6TMRpcm7wavInfoEPc>:
    56d4:	af 92       	push	r10
    56d6:	bf 92       	push	r11
    56d8:	df 92       	push	r13
    56da:	ef 92       	push	r14
    56dc:	ff 92       	push	r15
    56de:	0f 93       	push	r16
    56e0:	1f 93       	push	r17
    56e2:	cf 93       	push	r28
    56e4:	df 93       	push	r29
    56e6:	cd b7       	in	r28, 0x3d	; 61
    56e8:	de b7       	in	r29, 0x3e	; 62
    56ea:	6b 97       	sbiw	r28, 0x1b	; 27
    56ec:	0f b6       	in	r0, 0x3f	; 63
    56ee:	f8 94       	cli
    56f0:	de bf       	out	0x3e, r29	; 62
    56f2:	0f be       	out	0x3f, r0	; 63
    56f4:	cd bf       	out	0x3d, r28	; 61
    56f6:	8c 01       	movw	r16, r24
    56f8:	ab 01       	movw	r20, r22
    56fa:	21 e0       	ldi	r18, 0x01	; 1
    56fc:	64 e0       	ldi	r22, 0x04	; 4
    56fe:	77 e0       	ldi	r23, 0x07	; 7
    5700:	ce 01       	movw	r24, r28
    5702:	01 96       	adiw	r24, 0x01	; 1
    5704:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN5SDLib7SDClass4openEPKch>
    5708:	be 01       	movw	r22, r28
    570a:	6f 5f       	subi	r22, 0xFF	; 255
    570c:	7f 4f       	sbci	r23, 0xFF	; 255
    570e:	82 ef       	ldi	r24, 0xF2	; 242
    5710:	99 e0       	ldi	r25, 0x09	; 9
    5712:	a2 df       	rcall	.-188    	; 0x5658 <_ZN5SDLib4FileaSEOS0_>
    5714:	c8 01       	movw	r24, r16
    5716:	d5 df       	rcall	.-86     	; 0x56c2 <_ZN6TMRpcm6ifOpenEv>
    5718:	d8 2e       	mov	r13, r24
    571a:	88 23       	and	r24, r24
    571c:	09 f4       	brne	.+2      	; 0x5720 <_ZN6TMRpcm7wavInfoEPc+0x4c>
    571e:	4e c0       	rjmp	.+156    	; 0x57bc <_ZN6TMRpcm7wavInfoEPc+0xe8>
    5720:	48 e0       	ldi	r20, 0x08	; 8
    5722:	50 e0       	ldi	r21, 0x00	; 0
    5724:	60 e0       	ldi	r22, 0x00	; 0
    5726:	70 e0       	ldi	r23, 0x00	; 0
    5728:	c8 01       	movw	r24, r16
    572a:	c7 df       	rcall	.-114    	; 0x56ba <_ZN6TMRpcm4seekEm>
    572c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <TIMSK+0x8>
    5730:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <TIMSK+0x9>
    5734:	a0 91 62 02 	lds	r26, 0x0262	; 0x800262 <TIMSK+0xa>
    5738:	b0 91 63 02 	lds	r27, 0x0263	; 0x800263 <TIMSK+0xb>
    573c:	89 83       	std	Y+1, r24	; 0x01
    573e:	9a 83       	std	Y+2, r25	; 0x02
    5740:	ab 83       	std	Y+3, r26	; 0x03
    5742:	bc 83       	std	Y+4, r27	; 0x04
    5744:	ce 01       	movw	r24, r28
    5746:	01 96       	adiw	r24, 0x01	; 1
    5748:	7c 01       	movw	r14, r24
    574a:	5e 01       	movw	r10, r28
    574c:	95 e0       	ldi	r25, 0x05	; 5
    574e:	a9 0e       	add	r10, r25
    5750:	b1 1c       	adc	r11, r1
    5752:	82 ef       	ldi	r24, 0xF2	; 242
    5754:	99 e0       	ldi	r25, 0x09	; 9
    5756:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN5SDLib4File4readEv>
    575a:	f7 01       	movw	r30, r14
    575c:	21 91       	ld	r18, Z+
    575e:	7f 01       	movw	r14, r30
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	82 17       	cp	r24, r18
    5764:	93 07       	cpc	r25, r19
    5766:	19 f4       	brne	.+6      	; 0x576e <_ZN6TMRpcm7wavInfoEPc+0x9a>
    5768:	ea 15       	cp	r30, r10
    576a:	fb 05       	cpc	r31, r11
    576c:	91 f7       	brne	.-28     	; 0x5752 <_ZN6TMRpcm7wavInfoEPc+0x7e>
    576e:	48 e1       	ldi	r20, 0x18	; 24
    5770:	50 e0       	ldi	r21, 0x00	; 0
    5772:	60 e0       	ldi	r22, 0x00	; 0
    5774:	70 e0       	ldi	r23, 0x00	; 0
    5776:	c8 01       	movw	r24, r16
    5778:	a0 df       	rcall	.-192    	; 0x56ba <_ZN6TMRpcm4seekEm>
    577a:	82 ef       	ldi	r24, 0xF2	; 242
    577c:	99 e0       	ldi	r25, 0x09	; 9
    577e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN5SDLib4File4readEv>
    5782:	f8 01       	movw	r30, r16
    5784:	94 83       	std	Z+4, r25	; 0x04
    5786:	83 83       	std	Z+3, r24	; 0x03
    5788:	82 ef       	ldi	r24, 0xF2	; 242
    578a:	99 e0       	ldi	r25, 0x09	; 9
    578c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN5SDLib4File4readEv>
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	38 2f       	mov	r19, r24
    5796:	f8 01       	movw	r30, r16
    5798:	83 81       	ldd	r24, Z+3	; 0x03
    579a:	94 81       	ldd	r25, Z+4	; 0x04
    579c:	28 2b       	or	r18, r24
    579e:	39 2b       	or	r19, r25
    57a0:	34 83       	std	Z+4, r19	; 0x04
    57a2:	23 83       	std	Z+3, r18	; 0x03
    57a4:	4c e2       	ldi	r20, 0x2C	; 44
    57a6:	50 e0       	ldi	r21, 0x00	; 0
    57a8:	60 e0       	ldi	r22, 0x00	; 0
    57aa:	70 e0       	ldi	r23, 0x00	; 0
    57ac:	c8 01       	movw	r24, r16
    57ae:	85 df       	rcall	.-246    	; 0x56ba <_ZN6TMRpcm4seekEm>
    57b0:	8e ef       	ldi	r24, 0xFE	; 254
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	90 93 11 0c 	sts	0x0C11, r25	; 0x800c11 <dataEnd+0x1>
    57b8:	80 93 10 0c 	sts	0x0C10, r24	; 0x800c10 <dataEnd>
    57bc:	8d 2d       	mov	r24, r13
    57be:	6b 96       	adiw	r28, 0x1b	; 27
    57c0:	0f b6       	in	r0, 0x3f	; 63
    57c2:	f8 94       	cli
    57c4:	de bf       	out	0x3e, r29	; 62
    57c6:	0f be       	out	0x3f, r0	; 63
    57c8:	cd bf       	out	0x3d, r28	; 61
    57ca:	df 91       	pop	r29
    57cc:	cf 91       	pop	r28
    57ce:	1f 91       	pop	r17
    57d0:	0f 91       	pop	r16
    57d2:	ff 90       	pop	r15
    57d4:	ef 90       	pop	r14
    57d6:	df 90       	pop	r13
    57d8:	bf 90       	pop	r11
    57da:	af 90       	pop	r10
    57dc:	08 95       	ret

000057de <_ZN6TMRpcm12stopPlaybackEv>:
    57de:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <playing>
    57e2:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    57e6:	f0 e0       	ldi	r31, 0x00	; 0
    57e8:	ee 0f       	add	r30, r30
    57ea:	ff 1f       	adc	r31, r31
    57ec:	e8 5a       	subi	r30, 0xA8	; 168
    57ee:	fd 4f       	sbci	r31, 0xFD	; 253
    57f0:	01 90       	ld	r0, Z+
    57f2:	f0 81       	ld	r31, Z
    57f4:	e0 2d       	mov	r30, r0
    57f6:	20 81       	ld	r18, Z
    57f8:	2e 7d       	andi	r18, 0xDE	; 222
    57fa:	20 83       	st	Z, r18
    57fc:	62 df       	rcall	.-316    	; 0x56c2 <_ZN6TMRpcm6ifOpenEv>
    57fe:	88 23       	and	r24, r24
    5800:	21 f0       	breq	.+8      	; 0x580a <_ZN6TMRpcm12stopPlaybackEv+0x2c>
    5802:	82 ef       	ldi	r24, 0xF2	; 242
    5804:	99 e0       	ldi	r25, 0x09	; 9
    5806:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <_ZN5SDLib4File5closeEv>
    580a:	08 95       	ret

0000580c <_ZN6TMRpcm9setVolumeEc>:
    580c:	64 50       	subi	r22, 0x04	; 4
    580e:	60 93 0f 0a 	sts	0x0A0F, r22	; 0x800a0f <volMod>
    5812:	08 95       	ret

00005814 <__vector_16>:
    5814:	1f 92       	push	r1
    5816:	0f 92       	push	r0
    5818:	0f b6       	in	r0, 0x3f	; 63
    581a:	0f 92       	push	r0
    581c:	11 24       	eor	r1, r1
    581e:	0b b6       	in	r0, 0x3b	; 59
    5820:	0f 92       	push	r0
    5822:	2f 93       	push	r18
    5824:	3f 93       	push	r19
    5826:	4f 93       	push	r20
    5828:	5f 93       	push	r21
    582a:	6f 93       	push	r22
    582c:	7f 93       	push	r23
    582e:	8f 93       	push	r24
    5830:	9f 93       	push	r25
    5832:	af 93       	push	r26
    5834:	bf 93       	push	r27
    5836:	ef 93       	push	r30
    5838:	ff 93       	push	r31
    583a:	e0 91 0f 0c 	lds	r30, 0x0C0F	; 0x800c0f <whichBuff>
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	e8 27       	eor	r30, r24
    5842:	f0 e0       	ldi	r31, 0x00	; 0
    5844:	ea 5d       	subi	r30, 0xDA	; 218
    5846:	fd 4f       	sbci	r31, 0xFD	; 253
    5848:	90 81       	ld	r25, Z
    584a:	99 23       	and	r25, r25
    584c:	09 f4       	brne	.+2      	; 0x5850 <__vector_16+0x3c>
    584e:	66 c0       	rjmp	.+204    	; 0x591c <__vector_16+0x108>
    5850:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <whichBuff>
    5854:	89 27       	eor	r24, r25
    5856:	80 93 0d 0c 	sts	0x0C0D, r24	; 0x800c0d <a>
    585a:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    585e:	f0 e0       	ldi	r31, 0x00	; 0
    5860:	ee 0f       	add	r30, r30
    5862:	ff 1f       	adc	r31, r31
    5864:	e8 5a       	subi	r30, 0xA8	; 168
    5866:	fd 4f       	sbci	r31, 0xFD	; 253
    5868:	01 90       	ld	r0, Z+
    586a:	f0 81       	ld	r31, Z
    586c:	e0 2d       	mov	r30, r0
    586e:	80 81       	ld	r24, Z
    5870:	8f 7d       	andi	r24, 0xDF	; 223
    5872:	80 83       	st	Z, r24
    5874:	78 94       	sei
    5876:	82 ef       	ldi	r24, 0xF2	; 242
    5878:	99 e0       	ldi	r25, 0x09	; 9
    587a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <_ZN5SDLib4File9availableEv>
    587e:	20 91 10 0c 	lds	r18, 0x0C10	; 0x800c10 <dataEnd>
    5882:	30 91 11 0c 	lds	r19, 0x0C11	; 0x800c11 <dataEnd+0x1>
    5886:	28 17       	cp	r18, r24
    5888:	39 07       	cpc	r19, r25
    588a:	38 f1       	brcs	.+78     	; 0x58da <__vector_16+0xc6>
    588c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <optionByte>
    5890:	83 ff       	sbrs	r24, 3
    5892:	09 c0       	rjmp	.+18     	; 0x58a6 <__vector_16+0x92>
    5894:	4c e2       	ldi	r20, 0x2C	; 44
    5896:	50 e0       	ldi	r21, 0x00	; 0
    5898:	60 e0       	ldi	r22, 0x00	; 0
    589a:	70 e0       	ldi	r23, 0x00	; 0
    589c:	82 ef       	ldi	r24, 0xF2	; 242
    589e:	99 e0       	ldi	r25, 0x09	; 9
    58a0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN5SDLib4File4seekEm>
    58a4:	2e c0       	rjmp	.+92     	; 0x5902 <__vector_16+0xee>
    58a6:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    58aa:	f0 e0       	ldi	r31, 0x00	; 0
    58ac:	ee 0f       	add	r30, r30
    58ae:	ff 1f       	adc	r31, r31
    58b0:	e8 5a       	subi	r30, 0xA8	; 168
    58b2:	fd 4f       	sbci	r31, 0xFD	; 253
    58b4:	01 90       	ld	r0, Z+
    58b6:	f0 81       	ld	r31, Z
    58b8:	e0 2d       	mov	r30, r0
    58ba:	80 81       	ld	r24, Z
    58bc:	8e 7d       	andi	r24, 0xDE	; 222
    58be:	80 83       	st	Z, r24
    58c0:	82 ef       	ldi	r24, 0xF2	; 242
    58c2:	99 e0       	ldi	r25, 0x09	; 9
    58c4:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN5SDLib4FilecvbEv>
    58c8:	88 23       	and	r24, r24
    58ca:	21 f0       	breq	.+8      	; 0x58d4 <__vector_16+0xc0>
    58cc:	82 ef       	ldi	r24, 0xF2	; 242
    58ce:	99 e0       	ldi	r25, 0x09	; 9
    58d0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN5SDLib4File5closeEv>
    58d4:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <playing>
    58d8:	21 c0       	rjmp	.+66     	; 0x591c <__vector_16+0x108>
    58da:	60 91 0d 0c 	lds	r22, 0x0C0D	; 0x800c0d <a>
    58de:	8e ef       	ldi	r24, 0xFE	; 254
    58e0:	68 9f       	mul	r22, r24
    58e2:	b0 01       	movw	r22, r0
    58e4:	11 24       	eor	r1, r1
    58e6:	6f 5e       	subi	r22, 0xEF	; 239
    58e8:	75 4f       	sbci	r23, 0xF5	; 245
    58ea:	4e ef       	ldi	r20, 0xFE	; 254
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	82 ef       	ldi	r24, 0xF2	; 242
    58f0:	99 e0       	ldi	r25, 0x09	; 9
    58f2:	0e 94 e7 16 	call	0x2dce	; 0x2dce <_ZN5SDLib4File4readEPvj>
    58f6:	e0 91 0d 0c 	lds	r30, 0x0C0D	; 0x800c0d <a>
    58fa:	f0 e0       	ldi	r31, 0x00	; 0
    58fc:	ea 5d       	subi	r30, 0xDA	; 218
    58fe:	fd 4f       	sbci	r31, 0xFD	; 253
    5900:	10 82       	st	Z, r1
    5902:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    5906:	f0 e0       	ldi	r31, 0x00	; 0
    5908:	ee 0f       	add	r30, r30
    590a:	ff 1f       	adc	r31, r31
    590c:	e8 5a       	subi	r30, 0xA8	; 168
    590e:	fd 4f       	sbci	r31, 0xFD	; 253
    5910:	01 90       	ld	r0, Z+
    5912:	f0 81       	ld	r31, Z
    5914:	e0 2d       	mov	r30, r0
    5916:	80 81       	ld	r24, Z
    5918:	80 62       	ori	r24, 0x20	; 32
    591a:	80 83       	st	Z, r24
    591c:	ff 91       	pop	r31
    591e:	ef 91       	pop	r30
    5920:	bf 91       	pop	r27
    5922:	af 91       	pop	r26
    5924:	9f 91       	pop	r25
    5926:	8f 91       	pop	r24
    5928:	7f 91       	pop	r23
    592a:	6f 91       	pop	r22
    592c:	5f 91       	pop	r21
    592e:	4f 91       	pop	r20
    5930:	3f 91       	pop	r19
    5932:	2f 91       	pop	r18
    5934:	0f 90       	pop	r0
    5936:	0b be       	out	0x3b, r0	; 59
    5938:	0f 90       	pop	r0
    593a:	0f be       	out	0x3f, r0	; 63
    593c:	0f 90       	pop	r0
    593e:	1f 90       	pop	r1
    5940:	18 95       	reti

00005942 <__vector_20>:
    5942:	1f 92       	push	r1
    5944:	0f 92       	push	r0
    5946:	0f b6       	in	r0, 0x3f	; 63
    5948:	0f 92       	push	r0
    594a:	11 24       	eor	r1, r1
    594c:	0b b6       	in	r0, 0x3b	; 59
    594e:	0f 92       	push	r0
    5950:	8f 93       	push	r24
    5952:	9f 93       	push	r25
    5954:	af 93       	push	r26
    5956:	bf 93       	push	r27
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	ef 93       	push	r30
    595e:	ff 93       	push	r31
    5960:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <optionByte>
    5964:	86 fd       	sbrc	r24, 6
    5966:	41 c0       	rjmp	.+130    	; 0x59ea <__vector_20+0xa8>
    5968:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <tt>
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	88 0f       	add	r24, r24
    5970:	99 1f       	adc	r25, r25
    5972:	fc 01       	movw	r30, r24
    5974:	e0 5c       	subi	r30, 0xC0	; 192
    5976:	fd 4f       	sbci	r31, 0xFD	; 253
    5978:	a0 81       	ld	r26, Z
    597a:	b1 81       	ldd	r27, Z+1	; 0x01
    597c:	fc 01       	movw	r30, r24
    597e:	e8 5d       	subi	r30, 0xD8	; 216
    5980:	fd 4f       	sbci	r31, 0xFD	; 253
    5982:	c0 81       	ld	r28, Z
    5984:	d1 81       	ldd	r29, Z+1	; 0x01
    5986:	e0 91 0f 0c 	lds	r30, 0x0C0F	; 0x800c0f <whichBuff>
    598a:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <buffCount>
    598e:	9e ef       	ldi	r25, 0xFE	; 254
    5990:	e9 9f       	mul	r30, r25
    5992:	f0 01       	movw	r30, r0
    5994:	11 24       	eor	r1, r1
    5996:	ef 5e       	subi	r30, 0xEF	; 239
    5998:	f5 4f       	sbci	r31, 0xF5	; 245
    599a:	e8 0f       	add	r30, r24
    599c:	f1 1d       	adc	r31, r1
    599e:	80 81       	ld	r24, Z
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	00 90 0f 0a 	lds	r0, 0x0A0F	; 0x800a0f <volMod>
    59a6:	02 c0       	rjmp	.+4      	; 0x59ac <__vector_20+0x6a>
    59a8:	88 0f       	add	r24, r24
    59aa:	99 1f       	adc	r25, r25
    59ac:	0a 94       	dec	r0
    59ae:	e2 f7       	brpl	.-8      	; 0x59a8 <__vector_20+0x66>
    59b0:	99 83       	std	Y+1, r25	; 0x01
    59b2:	88 83       	st	Y, r24
    59b4:	11 96       	adiw	r26, 0x01	; 1
    59b6:	9c 93       	st	X, r25
    59b8:	8e 93       	st	-X, r24
    59ba:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <buffCount>
    59be:	8f 5f       	subi	r24, 0xFF	; 255
    59c0:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <buffCount>
    59c4:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <buffCount>
    59c8:	8e 3f       	cpi	r24, 0xFE	; 254
    59ca:	d0 f0       	brcs	.+52     	; 0x5a00 <__vector_20+0xbe>
    59cc:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <buffCount>
    59d0:	e0 91 0f 0c 	lds	r30, 0x0C0F	; 0x800c0f <whichBuff>
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	ea 5d       	subi	r30, 0xDA	; 218
    59d8:	fd 4f       	sbci	r31, 0xFD	; 253
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	80 83       	st	Z, r24
    59de:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <whichBuff>
    59e2:	89 27       	eor	r24, r25
    59e4:	80 93 0f 0c 	sts	0x0C0F, r24	; 0x800c0f <whichBuff>
    59e8:	0b c0       	rjmp	.+22     	; 0x5a00 <__vector_20+0xbe>
    59ea:	90 91 0d 0a 	lds	r25, 0x0A0D	; 0x800a0d <loadCounter>
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	89 27       	eor	r24, r25
    59f2:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <loadCounter>
    59f6:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <loadCounter>
    59fa:	88 23       	and	r24, r24
    59fc:	09 f4       	brne	.+2      	; 0x5a00 <__vector_20+0xbe>
    59fe:	b4 cf       	rjmp	.-152    	; 0x5968 <__vector_20+0x26>
    5a00:	ff 91       	pop	r31
    5a02:	ef 91       	pop	r30
    5a04:	df 91       	pop	r29
    5a06:	cf 91       	pop	r28
    5a08:	bf 91       	pop	r27
    5a0a:	af 91       	pop	r26
    5a0c:	9f 91       	pop	r25
    5a0e:	8f 91       	pop	r24
    5a10:	0f 90       	pop	r0
    5a12:	0b be       	out	0x3b, r0	; 59
    5a14:	0f 90       	pop	r0
    5a16:	0f be       	out	0x3f, r0	; 63
    5a18:	0f 90       	pop	r0
    5a1a:	1f 90       	pop	r1
    5a1c:	18 95       	reti

00005a1e <_ZN6TMRpcm7disableEv>:
    5a1e:	4f 92       	push	r4
    5a20:	5f 92       	push	r5
    5a22:	6f 92       	push	r6
    5a24:	7f 92       	push	r7
    5a26:	8f 92       	push	r8
    5a28:	9f 92       	push	r9
    5a2a:	af 92       	push	r10
    5a2c:	bf 92       	push	r11
    5a2e:	cf 92       	push	r12
    5a30:	df 92       	push	r13
    5a32:	ef 92       	push	r14
    5a34:	ff 92       	push	r15
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	ec 01       	movw	r28, r24
    5a40:	10 92 0e 0c 	sts	0x0C0E, r1	; 0x800c0e <playing>
    5a44:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    5a48:	f0 e0       	ldi	r31, 0x00	; 0
    5a4a:	ee 0f       	add	r30, r30
    5a4c:	ff 1f       	adc	r31, r31
    5a4e:	e8 5a       	subi	r30, 0xA8	; 168
    5a50:	fd 4f       	sbci	r31, 0xFD	; 253
    5a52:	01 90       	ld	r0, Z+
    5a54:	f0 81       	ld	r31, Z
    5a56:	e0 2d       	mov	r30, r0
    5a58:	80 81       	ld	r24, Z
    5a5a:	8e 7d       	andi	r24, 0xDE	; 222
    5a5c:	80 83       	st	Z, r24
    5a5e:	ce 01       	movw	r24, r28
    5a60:	30 de       	rcall	.-928    	; 0x56c2 <_ZN6TMRpcm6ifOpenEv>
    5a62:	88 23       	and	r24, r24
    5a64:	21 f0       	breq	.+8      	; 0x5a6e <_ZN6TMRpcm7disableEv+0x50>
    5a66:	82 ef       	ldi	r24, 0xF2	; 242
    5a68:	99 e0       	ldi	r25, 0x09	; 9
    5a6a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN5SDLib4File5closeEv>
    5a6e:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <tt>
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	88 0f       	add	r24, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	fc 01       	movw	r30, r24
    5a7a:	e0 5b       	subi	r30, 0xB0	; 176
    5a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    5a7e:	00 81       	ld	r16, Z
    5a80:	11 81       	ldd	r17, Z+1	; 0x01
    5a82:	d8 01       	movw	r26, r16
    5a84:	2c 91       	ld	r18, X
    5a86:	27 ff       	sbrs	r18, 7
    5a88:	51 c0       	rjmp	.+162    	; 0x5b2c <_ZN6TMRpcm7disableEv+0x10e>
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	e0 5c       	subi	r30, 0xC0	; 192
    5a8e:	fd 4f       	sbci	r31, 0xFD	; 253
    5a90:	e0 80       	ld	r14, Z
    5a92:	f1 80       	ldd	r15, Z+1	; 0x01
    5a94:	f7 01       	movw	r30, r14
    5a96:	60 81       	ld	r22, Z
    5a98:	71 81       	ldd	r23, Z+1	; 0x01
    5a9a:	9b 01       	movw	r18, r22
    5a9c:	ab 01       	movw	r20, r22
    5a9e:	dc 01       	movw	r26, r24
    5aa0:	a8 5d       	subi	r26, 0xD8	; 216
    5aa2:	bd 4f       	sbci	r27, 0xFD	; 253
    5aa4:	3d 01       	movw	r6, r26
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	e0 5d       	subi	r30, 0xD0	; 208
    5aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    5aac:	4f 01       	movw	r8, r30
    5aae:	ed 81       	ldd	r30, Y+5	; 0x05
    5ab0:	fe 81       	ldd	r31, Y+6	; 0x06
    5ab2:	d9 01       	movw	r26, r18
    5ab4:	a6 1b       	sub	r26, r22
    5ab6:	b7 0b       	sbc	r27, r23
    5ab8:	ae 17       	cp	r26, r30
    5aba:	bf 07       	cpc	r27, r31
    5abc:	b8 f5       	brcc	.+110    	; 0x5b2c <_ZN6TMRpcm7disableEv+0x10e>
    5abe:	d3 01       	movw	r26, r6
    5ac0:	cd 90       	ld	r12, X+
    5ac2:	dc 90       	ld	r13, X
    5ac4:	37 fd       	sbrc	r19, 7
    5ac6:	05 c0       	rjmp	.+10     	; 0x5ad2 <_ZN6TMRpcm7disableEv+0xb4>
    5ac8:	2e 17       	cp	r18, r30
    5aca:	3f 07       	cpc	r19, r31
    5acc:	20 f4       	brcc	.+8      	; 0x5ad6 <_ZN6TMRpcm7disableEv+0xb8>
    5ace:	f9 01       	movw	r30, r18
    5ad0:	02 c0       	rjmp	.+4      	; 0x5ad6 <_ZN6TMRpcm7disableEv+0xb8>
    5ad2:	e0 e0       	ldi	r30, 0x00	; 0
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
    5ad6:	d6 01       	movw	r26, r12
    5ad8:	11 96       	adiw	r26, 0x01	; 1
    5ada:	fc 93       	st	X, r31
    5adc:	ee 93       	st	-X, r30
    5ade:	57 fd       	sbrc	r21, 7
    5ae0:	07 c0       	rjmp	.+14     	; 0x5af0 <_ZN6TMRpcm7disableEv+0xd2>
    5ae2:	ed 81       	ldd	r30, Y+5	; 0x05
    5ae4:	fe 81       	ldd	r31, Y+6	; 0x06
    5ae6:	4e 17       	cp	r20, r30
    5ae8:	5f 07       	cpc	r21, r31
    5aea:	20 f4       	brcc	.+8      	; 0x5af4 <_ZN6TMRpcm7disableEv+0xd6>
    5aec:	fa 01       	movw	r30, r20
    5aee:	02 c0       	rjmp	.+4      	; 0x5af4 <_ZN6TMRpcm7disableEv+0xd6>
    5af0:	e0 e0       	ldi	r30, 0x00	; 0
    5af2:	f0 e0       	ldi	r31, 0x00	; 0
    5af4:	d7 01       	movw	r26, r14
    5af6:	11 96       	adiw	r26, 0x01	; 1
    5af8:	fc 93       	st	X, r31
    5afa:	ee 93       	st	-X, r30
    5afc:	f4 01       	movw	r30, r8
    5afe:	a0 80       	ld	r10, Z
    5b00:	b1 80       	ldd	r11, Z+1	; 0x01
    5b02:	ad 81       	ldd	r26, Y+5	; 0x05
    5b04:	be 81       	ldd	r27, Y+6	; 0x06
    5b06:	2d 01       	movw	r4, r26
    5b08:	f2 e3       	ldi	r31, 0x32	; 50
    5b0a:	4f 1a       	sub	r4, r31
    5b0c:	51 08       	sbc	r5, r1
    5b0e:	ea e0       	ldi	r30, 0x0A	; 10
    5b10:	f0 e0       	ldi	r31, 0x00	; 0
    5b12:	d5 01       	movw	r26, r10
    5b14:	cd 90       	ld	r12, X+
    5b16:	dc 90       	ld	r13, X
    5b18:	c4 14       	cp	r12, r4
    5b1a:	d5 04       	cpc	r13, r5
    5b1c:	d0 f3       	brcs	.-12     	; 0x5b12 <_ZN6TMRpcm7disableEv+0xf4>
    5b1e:	31 97       	sbiw	r30, 0x01	; 1
    5b20:	c1 f7       	brne	.-16     	; 0x5b12 <_ZN6TMRpcm7disableEv+0xf4>
    5b22:	41 50       	subi	r20, 0x01	; 1
    5b24:	51 09       	sbc	r21, r1
    5b26:	2f 5f       	subi	r18, 0xFF	; 255
    5b28:	3f 4f       	sbci	r19, 0xFF	; 255
    5b2a:	c1 cf       	rjmp	.-126    	; 0x5aae <_ZN6TMRpcm7disableEv+0x90>
    5b2c:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <optionByte>
    5b30:	20 62       	ori	r18, 0x20	; 32
    5b32:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <optionByte>
    5b36:	fc 01       	movw	r30, r24
    5b38:	e8 5b       	subi	r30, 0xB8	; 184
    5b3a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b3c:	01 90       	ld	r0, Z+
    5b3e:	f0 81       	ld	r31, Z
    5b40:	e0 2d       	mov	r30, r0
    5b42:	10 82       	st	Z, r1
    5b44:	f8 01       	movw	r30, r16
    5b46:	10 82       	st	Z, r1
    5b48:	df 91       	pop	r29
    5b4a:	cf 91       	pop	r28
    5b4c:	1f 91       	pop	r17
    5b4e:	0f 91       	pop	r16
    5b50:	ff 90       	pop	r15
    5b52:	ef 90       	pop	r14
    5b54:	df 90       	pop	r13
    5b56:	cf 90       	pop	r12
    5b58:	bf 90       	pop	r11
    5b5a:	af 90       	pop	r10
    5b5c:	9f 90       	pop	r9
    5b5e:	8f 90       	pop	r8
    5b60:	7f 90       	pop	r7
    5b62:	6f 90       	pop	r6
    5b64:	5f 90       	pop	r5
    5b66:	4f 90       	pop	r4
    5b68:	08 95       	ret

00005b6a <_ZN6TMRpcm6setPinEv>:
    5b6a:	cf 93       	push	r28
    5b6c:	df 93       	push	r29
    5b6e:	ec 01       	movw	r28, r24
    5b70:	56 df       	rcall	.-340    	; 0x5a1e <_ZN6TMRpcm7disableEv>
    5b72:	61 e0       	ldi	r22, 0x01	; 1
    5b74:	88 81       	ld	r24, Y
    5b76:	0e 94 81 12 	call	0x2502	; 0x2502 <pinMode>
    5b7a:	88 81       	ld	r24, Y
    5b7c:	86 30       	cpi	r24, 0x06	; 6
    5b7e:	31 f0       	breq	.+12     	; 0x5b8c <_ZN6TMRpcm6setPinEv+0x22>
    5b80:	8e 32       	cpi	r24, 0x2E	; 46
    5b82:	41 f0       	breq	.+16     	; 0x5b94 <_ZN6TMRpcm6setPinEv+0x2a>
    5b84:	85 30       	cpi	r24, 0x05	; 5
    5b86:	41 f4       	brne	.+16     	; 0x5b98 <_ZN6TMRpcm6setPinEv+0x2e>
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	01 c0       	rjmp	.+2      	; 0x5b8e <_ZN6TMRpcm6setPinEv+0x24>
    5b8c:	82 e0       	ldi	r24, 0x02	; 2
    5b8e:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <tt>
    5b92:	04 c0       	rjmp	.+8      	; 0x5b9c <_ZN6TMRpcm6setPinEv+0x32>
    5b94:	83 e0       	ldi	r24, 0x03	; 3
    5b96:	fb cf       	rjmp	.-10     	; 0x5b8e <_ZN6TMRpcm6setPinEv+0x24>
    5b98:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <tt>
    5b9c:	8d b5       	in	r24, 0x2d	; 45
    5b9e:	81 60       	ori	r24, 0x01	; 1
    5ba0:	8d bd       	out	0x2d, r24	; 45
    5ba2:	8c b5       	in	r24, 0x2c	; 44
    5ba4:	8c 7f       	andi	r24, 0xFC	; 252
    5ba6:	8c bd       	out	0x2c, r24	; 44
    5ba8:	df 91       	pop	r29
    5baa:	cf 91       	pop	r28
    5bac:	08 95       	ret

00005bae <_ZN6TMRpcm4playEPcm>:
    5bae:	cf 92       	push	r12
    5bb0:	df 92       	push	r13
    5bb2:	ef 92       	push	r14
    5bb4:	ff 92       	push	r15
    5bb6:	0f 93       	push	r16
    5bb8:	1f 93       	push	r17
    5bba:	cf 93       	push	r28
    5bbc:	df 93       	push	r29
    5bbe:	ec 01       	movw	r28, r24
    5bc0:	8b 01       	movw	r16, r22
    5bc2:	69 01       	movw	r12, r18
    5bc4:	7a 01       	movw	r14, r20
    5bc6:	98 81       	ld	r25, Y
    5bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    5bca:	98 17       	cp	r25, r24
    5bcc:	21 f0       	breq	.+8      	; 0x5bd6 <_ZN6TMRpcm4playEPcm+0x28>
    5bce:	ce 01       	movw	r24, r28
    5bd0:	cc df       	rcall	.-104    	; 0x5b6a <_ZN6TMRpcm6setPinEv>
    5bd2:	88 81       	ld	r24, Y
    5bd4:	8f 83       	std	Y+7, r24	; 0x07
    5bd6:	ce 01       	movw	r24, r28
    5bd8:	02 de       	rcall	.-1020   	; 0x57de <_ZN6TMRpcm12stopPlaybackEv>
    5bda:	b8 01       	movw	r22, r16
    5bdc:	ce 01       	movw	r24, r28
    5bde:	7a dd       	rcall	.-1292   	; 0x56d4 <_ZN6TMRpcm7wavInfoEPc>
    5be0:	88 23       	and	r24, r24
    5be2:	09 f4       	brne	.+2      	; 0x5be6 <_ZN6TMRpcm4playEPcm+0x38>
    5be4:	1e c1       	rjmp	.+572    	; 0x5e22 <_ZN6TMRpcm4playEPcm+0x274>
    5be6:	c1 14       	cp	r12, r1
    5be8:	d1 04       	cpc	r13, r1
    5bea:	e1 04       	cpc	r14, r1
    5bec:	f1 04       	cpc	r15, r1
    5bee:	99 f0       	breq	.+38     	; 0x5c16 <_ZN6TMRpcm4playEPcm+0x68>
    5bf0:	ab 81       	ldd	r26, Y+3	; 0x03
    5bf2:	bc 81       	ldd	r27, Y+4	; 0x04
    5bf4:	a7 01       	movw	r20, r14
    5bf6:	96 01       	movw	r18, r12
    5bf8:	a9 d1       	rcall	.+850    	; 0x5f4c <__muluhisi3>
    5bfa:	6b 01       	movw	r12, r22
    5bfc:	7c 01       	movw	r14, r24
    5bfe:	82 ef       	ldi	r24, 0xF2	; 242
    5c00:	99 e0       	ldi	r25, 0x09	; 9
    5c02:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <_ZN5SDLib4File8positionEv>
    5c06:	ab 01       	movw	r20, r22
    5c08:	bc 01       	movw	r22, r24
    5c0a:	4c 0d       	add	r20, r12
    5c0c:	5d 1d       	adc	r21, r13
    5c0e:	6e 1d       	adc	r22, r14
    5c10:	7f 1d       	adc	r23, r15
    5c12:	ce 01       	movw	r24, r28
    5c14:	52 dd       	rcall	.-1372   	; 0x56ba <_ZN6TMRpcm4seekEm>
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <playing>
    5c1c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <optionByte>
    5c20:	98 2f       	mov	r25, r24
    5c22:	9f 77       	andi	r25, 0x7F	; 127
    5c24:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <optionByte>
    5c28:	2b 81       	ldd	r18, Y+3	; 0x03
    5c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    5c2c:	2b 3f       	cpi	r18, 0xFB	; 251
    5c2e:	3f 4a       	sbci	r19, 0xAF	; 175
    5c30:	20 f0       	brcs	.+8      	; 0x5c3a <_ZN6TMRpcm4playEPcm+0x8c>
    5c32:	20 ec       	ldi	r18, 0xC0	; 192
    5c34:	3d e5       	ldi	r19, 0x5D	; 93
    5c36:	3c 83       	std	Y+4, r19	; 0x04
    5c38:	2b 83       	std	Y+3, r18	; 0x03
    5c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    5c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    5c3e:	40 e0       	ldi	r20, 0x00	; 0
    5c40:	50 e0       	ldi	r21, 0x00	; 0
    5c42:	86 ff       	sbrs	r24, 6
    5c44:	05 c0       	rjmp	.+10     	; 0x5c50 <_ZN6TMRpcm4playEPcm+0xa2>
    5c46:	60 e0       	ldi	r22, 0x00	; 0
    5c48:	75 e3       	ldi	r23, 0x35	; 53
    5c4a:	8c e0       	ldi	r24, 0x0C	; 12
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	04 c0       	rjmp	.+8      	; 0x5c58 <_ZN6TMRpcm4playEPcm+0xaa>
    5c50:	60 e0       	ldi	r22, 0x00	; 0
    5c52:	7a e6       	ldi	r23, 0x6A	; 106
    5c54:	88 e1       	ldi	r24, 0x18	; 24
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	46 d1       	rcall	.+652    	; 0x5ee6 <__divmodsi4>
    5c5a:	6a e0       	ldi	r22, 0x0A	; 10
    5c5c:	62 9f       	mul	r22, r18
    5c5e:	c0 01       	movw	r24, r0
    5c60:	63 9f       	mul	r22, r19
    5c62:	90 0d       	add	r25, r0
    5c64:	11 24       	eor	r1, r1
    5c66:	9e 83       	std	Y+6, r25	; 0x06
    5c68:	8d 83       	std	Y+5, r24	; 0x05
    5c6a:	82 ef       	ldi	r24, 0xF2	; 242
    5c6c:	99 e0       	ldi	r25, 0x09	; 9
    5c6e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <_ZN5SDLib4File4readEv>
    5c72:	8c 01       	movw	r16, r24
    5c74:	82 ef       	ldi	r24, 0xF2	; 242
    5c76:	99 e0       	ldi	r25, 0x09	; 9
    5c78:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN5SDLib4File4peekEv>
    5c7c:	80 0f       	add	r24, r16
    5c7e:	91 1f       	adc	r25, r17
    5c80:	97 fd       	sbrc	r25, 7
    5c82:	01 96       	adiw	r24, 0x01	; 1
    5c84:	8c 01       	movw	r16, r24
    5c86:	15 95       	asr	r17
    5c88:	07 95       	ror	r16
    5c8a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <optionByte>
    5c8e:	85 ff       	sbrs	r24, 5
    5c90:	3b c0       	rjmp	.+118    	; 0x5d08 <_ZN6TMRpcm4playEPcm+0x15a>
    5c92:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <tt>
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	88 0f       	add	r24, r24
    5c9a:	99 1f       	adc	r25, r25
    5c9c:	fc 01       	movw	r30, r24
    5c9e:	e0 5c       	subi	r30, 0xC0	; 192
    5ca0:	fd 4f       	sbci	r31, 0xFD	; 253
    5ca2:	01 90       	ld	r0, Z+
    5ca4:	f0 81       	ld	r31, Z
    5ca6:	e0 2d       	mov	r30, r0
    5ca8:	11 82       	std	Z+1, r1	; 0x01
    5caa:	10 82       	st	Z, r1
    5cac:	fc 01       	movw	r30, r24
    5cae:	e8 5d       	subi	r30, 0xD8	; 216
    5cb0:	fd 4f       	sbci	r31, 0xFD	; 253
    5cb2:	01 90       	ld	r0, Z+
    5cb4:	f0 81       	ld	r31, Z
    5cb6:	e0 2d       	mov	r30, r0
    5cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cba:	9e 81       	ldd	r25, Y+6	; 0x06
    5cbc:	91 83       	std	Z+1, r25	; 0x01
    5cbe:	80 83       	st	Z, r24
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	a3 dc       	rcall	.-1722   	; 0x560a <_ZN6TMRpcm7timerStEv>
    5cc4:	e1 2c       	mov	r14, r1
    5cc6:	f1 2c       	mov	r15, r1
    5cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cca:	9e 81       	ldd	r25, Y+6	; 0x06
    5ccc:	e8 16       	cp	r14, r24
    5cce:	f9 06       	cpc	r15, r25
    5cd0:	d8 f4       	brcc	.+54     	; 0x5d08 <_ZN6TMRpcm4playEPcm+0x15a>
    5cd2:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    5cd6:	f0 e0       	ldi	r31, 0x00	; 0
    5cd8:	ee 0f       	add	r30, r30
    5cda:	ff 1f       	adc	r31, r31
    5cdc:	e8 5d       	subi	r30, 0xD8	; 216
    5cde:	fd 4f       	sbci	r31, 0xFD	; 253
    5ce0:	01 90       	ld	r0, Z+
    5ce2:	f0 81       	ld	r31, Z
    5ce4:	e0 2d       	mov	r30, r0
    5ce6:	9c 01       	movw	r18, r24
    5ce8:	2e 19       	sub	r18, r14
    5cea:	3f 09       	sbc	r19, r15
    5cec:	82 17       	cp	r24, r18
    5cee:	93 07       	cpc	r25, r19
    5cf0:	08 f4       	brcc	.+2      	; 0x5cf4 <_ZN6TMRpcm4playEPcm+0x146>
    5cf2:	9c 01       	movw	r18, r24
    5cf4:	31 83       	std	Z+1, r19	; 0x01
    5cf6:	20 83       	st	Z, r18
    5cf8:	86 e9       	ldi	r24, 0x96	; 150
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	0e 94 99 11 	call	0x2332	; 0x2332 <delayMicroseconds>
    5d00:	8f ef       	ldi	r24, 0xFF	; 255
    5d02:	e8 1a       	sub	r14, r24
    5d04:	f8 0a       	sbc	r15, r24
    5d06:	e0 cf       	rjmp	.-64     	; 0x5cc8 <_ZN6TMRpcm4playEPcm+0x11a>
    5d08:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <optionByte>
    5d0c:	8f 7d       	andi	r24, 0xDF	; 223
    5d0e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <optionByte>
    5d12:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <volMod>
    5d16:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    5d1a:	f0 e0       	ldi	r31, 0x00	; 0
    5d1c:	ee 0f       	add	r30, r30
    5d1e:	ff 1f       	adc	r31, r31
    5d20:	e0 5c       	subi	r30, 0xC0	; 192
    5d22:	fd 4f       	sbci	r31, 0xFD	; 253
    5d24:	01 90       	ld	r0, Z+
    5d26:	f0 81       	ld	r31, Z
    5d28:	e0 2d       	mov	r30, r0
    5d2a:	20 81       	ld	r18, Z
    5d2c:	31 81       	ldd	r19, Z+1	; 0x01
    5d2e:	88 23       	and	r24, r24
    5d30:	29 f0       	breq	.+10     	; 0x5d3c <_ZN6TMRpcm4playEPcm+0x18e>
    5d32:	02 c0       	rjmp	.+4      	; 0x5d38 <_ZN6TMRpcm4playEPcm+0x18a>
    5d34:	36 95       	lsr	r19
    5d36:	27 95       	ror	r18
    5d38:	8a 95       	dec	r24
    5d3a:	e2 f7       	brpl	.-8      	; 0x5d34 <_ZN6TMRpcm4playEPcm+0x186>
    5d3c:	11 27       	eor	r17, r17
    5d3e:	80 e0       	ldi	r24, 0x00	; 0
    5d40:	90 e0       	ldi	r25, 0x00	; 0
    5d42:	20 17       	cp	r18, r16
    5d44:	31 07       	cpc	r19, r17
    5d46:	08 f0       	brcs	.+2      	; 0x5d4a <_ZN6TMRpcm4playEPcm+0x19c>
    5d48:	41 c0       	rjmp	.+130    	; 0x5dcc <_ZN6TMRpcm4playEPcm+0x21e>
    5d4a:	a9 01       	movw	r20, r18
    5d4c:	4f 5f       	subi	r20, 0xFF	; 255
    5d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d50:	42 17       	cp	r20, r18
    5d52:	53 07       	cpc	r21, r19
    5d54:	28 f0       	brcs	.+10     	; 0x5d60 <_ZN6TMRpcm4playEPcm+0x1b2>
    5d56:	98 01       	movw	r18, r16
    5d58:	40 17       	cp	r20, r16
    5d5a:	51 07       	cpc	r21, r17
    5d5c:	08 f4       	brcc	.+2      	; 0x5d60 <_ZN6TMRpcm4playEPcm+0x1b2>
    5d5e:	9a 01       	movw	r18, r20
    5d60:	fc 01       	movw	r30, r24
    5d62:	ef 5e       	subi	r30, 0xEF	; 239
    5d64:	f5 4f       	sbci	r31, 0xF5	; 245
    5d66:	20 83       	st	Z, r18
    5d68:	01 96       	adiw	r24, 0x01	; 1
    5d6a:	8e 3f       	cpi	r24, 0xFE	; 254
    5d6c:	91 05       	cpc	r25, r1
    5d6e:	69 f7       	brne	.-38     	; 0x5d4a <_ZN6TMRpcm4playEPcm+0x19c>
    5d70:	80 e0       	ldi	r24, 0x00	; 0
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	a9 01       	movw	r20, r18
    5d76:	4f 5f       	subi	r20, 0xFF	; 255
    5d78:	5f 4f       	sbci	r21, 0xFF	; 255
    5d7a:	42 17       	cp	r20, r18
    5d7c:	53 07       	cpc	r21, r19
    5d7e:	28 f0       	brcs	.+10     	; 0x5d8a <_ZN6TMRpcm4playEPcm+0x1dc>
    5d80:	98 01       	movw	r18, r16
    5d82:	40 17       	cp	r20, r16
    5d84:	51 07       	cpc	r21, r17
    5d86:	08 f4       	brcc	.+2      	; 0x5d8a <_ZN6TMRpcm4playEPcm+0x1dc>
    5d88:	9a 01       	movw	r18, r20
    5d8a:	fc 01       	movw	r30, r24
    5d8c:	e1 5f       	subi	r30, 0xF1	; 241
    5d8e:	f4 4f       	sbci	r31, 0xF4	; 244
    5d90:	20 83       	st	Z, r18
    5d92:	01 96       	adiw	r24, 0x01	; 1
    5d94:	8e 3f       	cpi	r24, 0xFE	; 254
    5d96:	91 05       	cpc	r25, r1
    5d98:	69 f7       	brne	.-38     	; 0x5d74 <_ZN6TMRpcm4playEPcm+0x1c6>
    5d9a:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <whichBuff>
    5d9e:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <buffEmpty>
    5da2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <buffEmpty+0x1>
    5da6:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <buffCount>
    5daa:	f8 94       	cli
    5dac:	ce 01       	movw	r24, r28
    5dae:	2d dc       	rcall	.-1958   	; 0x560a <_ZN6TMRpcm7timerStEv>
    5db0:	e0 91 0e 0a 	lds	r30, 0x0A0E	; 0x800a0e <tt>
    5db4:	f0 e0       	ldi	r31, 0x00	; 0
    5db6:	ee 0f       	add	r30, r30
    5db8:	ff 1f       	adc	r31, r31
    5dba:	e8 5a       	subi	r30, 0xA8	; 168
    5dbc:	fd 4f       	sbci	r31, 0xFD	; 253
    5dbe:	01 90       	ld	r0, Z+
    5dc0:	f0 81       	ld	r31, Z
    5dc2:	e0 2d       	mov	r30, r0
    5dc4:	81 e2       	ldi	r24, 0x21	; 33
    5dc6:	80 83       	st	Z, r24
    5dc8:	78 94       	sei
    5dca:	2b c0       	rjmp	.+86     	; 0x5e22 <_ZN6TMRpcm4playEPcm+0x274>
    5dcc:	a9 01       	movw	r20, r18
    5dce:	41 50       	subi	r20, 0x01	; 1
    5dd0:	51 09       	sbc	r21, r1
    5dd2:	40 17       	cp	r20, r16
    5dd4:	51 07       	cpc	r21, r17
    5dd6:	28 f0       	brcs	.+10     	; 0x5de2 <_ZN6TMRpcm4playEPcm+0x234>
    5dd8:	42 17       	cp	r20, r18
    5dda:	53 07       	cpc	r21, r19
    5ddc:	18 f4       	brcc	.+6      	; 0x5de4 <_ZN6TMRpcm4playEPcm+0x236>
    5dde:	9a 01       	movw	r18, r20
    5de0:	01 c0       	rjmp	.+2      	; 0x5de4 <_ZN6TMRpcm4playEPcm+0x236>
    5de2:	98 01       	movw	r18, r16
    5de4:	fc 01       	movw	r30, r24
    5de6:	ef 5e       	subi	r30, 0xEF	; 239
    5de8:	f5 4f       	sbci	r31, 0xF5	; 245
    5dea:	20 83       	st	Z, r18
    5dec:	01 96       	adiw	r24, 0x01	; 1
    5dee:	8e 3f       	cpi	r24, 0xFE	; 254
    5df0:	91 05       	cpc	r25, r1
    5df2:	61 f7       	brne	.-40     	; 0x5dcc <_ZN6TMRpcm4playEPcm+0x21e>
    5df4:	80 e0       	ldi	r24, 0x00	; 0
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	a9 01       	movw	r20, r18
    5dfa:	41 50       	subi	r20, 0x01	; 1
    5dfc:	51 09       	sbc	r21, r1
    5dfe:	40 17       	cp	r20, r16
    5e00:	51 07       	cpc	r21, r17
    5e02:	28 f0       	brcs	.+10     	; 0x5e0e <_ZN6TMRpcm4playEPcm+0x260>
    5e04:	42 17       	cp	r20, r18
    5e06:	53 07       	cpc	r21, r19
    5e08:	18 f4       	brcc	.+6      	; 0x5e10 <_ZN6TMRpcm4playEPcm+0x262>
    5e0a:	9a 01       	movw	r18, r20
    5e0c:	01 c0       	rjmp	.+2      	; 0x5e10 <_ZN6TMRpcm4playEPcm+0x262>
    5e0e:	98 01       	movw	r18, r16
    5e10:	fc 01       	movw	r30, r24
    5e12:	e1 5f       	subi	r30, 0xF1	; 241
    5e14:	f4 4f       	sbci	r31, 0xF4	; 244
    5e16:	20 83       	st	Z, r18
    5e18:	01 96       	adiw	r24, 0x01	; 1
    5e1a:	8e 3f       	cpi	r24, 0xFE	; 254
    5e1c:	91 05       	cpc	r25, r1
    5e1e:	61 f7       	brne	.-40     	; 0x5df8 <_ZN6TMRpcm4playEPcm+0x24a>
    5e20:	bc cf       	rjmp	.-136    	; 0x5d9a <_ZN6TMRpcm4playEPcm+0x1ec>
    5e22:	df 91       	pop	r29
    5e24:	cf 91       	pop	r28
    5e26:	1f 91       	pop	r17
    5e28:	0f 91       	pop	r16
    5e2a:	ff 90       	pop	r15
    5e2c:	ef 90       	pop	r14
    5e2e:	df 90       	pop	r13
    5e30:	cf 90       	pop	r12
    5e32:	08 95       	ret

00005e34 <_ZN6TMRpcm4playEPc>:
    5e34:	20 e0       	ldi	r18, 0x00	; 0
    5e36:	30 e0       	ldi	r19, 0x00	; 0
    5e38:	a9 01       	movw	r20, r18
    5e3a:	b9 ce       	rjmp	.-654    	; 0x5bae <_ZN6TMRpcm4playEPcm>

00005e3c <_GLOBAL__sub_I_TIMSK>:
#else
	volatile byte loadCounter = 0, SR = 3;
#endif

#if !defined (SDFAT)
	File sFile;
    5e3c:	82 ef       	ldi	r24, 0xF2	; 242
    5e3e:	99 e0       	ldi	r25, 0x09	; 9
    5e40:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <_ZN5SDLib4FileC1Ev>

00005e44 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5e44:	08 95       	ret

00005e46 <__mulsi3>:
    5e46:	db 01       	movw	r26, r22
    5e48:	8f 93       	push	r24
    5e4a:	9f 93       	push	r25
    5e4c:	7f d0       	rcall	.+254    	; 0x5f4c <__muluhisi3>
    5e4e:	bf 91       	pop	r27
    5e50:	af 91       	pop	r26
    5e52:	a2 9f       	mul	r26, r18
    5e54:	80 0d       	add	r24, r0
    5e56:	91 1d       	adc	r25, r1
    5e58:	a3 9f       	mul	r26, r19
    5e5a:	90 0d       	add	r25, r0
    5e5c:	b2 9f       	mul	r27, r18
    5e5e:	90 0d       	add	r25, r0
    5e60:	11 24       	eor	r1, r1
    5e62:	08 95       	ret

00005e64 <__udivmodqi4>:
    5e64:	99 1b       	sub	r25, r25
    5e66:	79 e0       	ldi	r23, 0x09	; 9
    5e68:	04 c0       	rjmp	.+8      	; 0x5e72 <__udivmodqi4_ep>

00005e6a <__udivmodqi4_loop>:
    5e6a:	99 1f       	adc	r25, r25
    5e6c:	96 17       	cp	r25, r22
    5e6e:	08 f0       	brcs	.+2      	; 0x5e72 <__udivmodqi4_ep>
    5e70:	96 1b       	sub	r25, r22

00005e72 <__udivmodqi4_ep>:
    5e72:	88 1f       	adc	r24, r24
    5e74:	7a 95       	dec	r23
    5e76:	c9 f7       	brne	.-14     	; 0x5e6a <__udivmodqi4_loop>
    5e78:	80 95       	com	r24
    5e7a:	08 95       	ret

00005e7c <__divmodhi4>:
    5e7c:	97 fb       	bst	r25, 7
    5e7e:	07 2e       	mov	r0, r23
    5e80:	16 f4       	brtc	.+4      	; 0x5e86 <__divmodhi4+0xa>
    5e82:	00 94       	com	r0
    5e84:	06 d0       	rcall	.+12     	; 0x5e92 <__divmodhi4_neg1>
    5e86:	77 fd       	sbrc	r23, 7
    5e88:	08 d0       	rcall	.+16     	; 0x5e9a <__divmodhi4_neg2>
    5e8a:	6a d0       	rcall	.+212    	; 0x5f60 <__udivmodhi4>
    5e8c:	07 fc       	sbrc	r0, 7
    5e8e:	05 d0       	rcall	.+10     	; 0x5e9a <__divmodhi4_neg2>
    5e90:	3e f4       	brtc	.+14     	; 0x5ea0 <__divmodhi4_exit>

00005e92 <__divmodhi4_neg1>:
    5e92:	90 95       	com	r25
    5e94:	81 95       	neg	r24
    5e96:	9f 4f       	sbci	r25, 0xFF	; 255
    5e98:	08 95       	ret

00005e9a <__divmodhi4_neg2>:
    5e9a:	70 95       	com	r23
    5e9c:	61 95       	neg	r22
    5e9e:	7f 4f       	sbci	r23, 0xFF	; 255

00005ea0 <__divmodhi4_exit>:
    5ea0:	08 95       	ret

00005ea2 <__udivmodsi4>:
    5ea2:	a1 e2       	ldi	r26, 0x21	; 33
    5ea4:	1a 2e       	mov	r1, r26
    5ea6:	aa 1b       	sub	r26, r26
    5ea8:	bb 1b       	sub	r27, r27
    5eaa:	fd 01       	movw	r30, r26
    5eac:	0d c0       	rjmp	.+26     	; 0x5ec8 <__udivmodsi4_ep>

00005eae <__udivmodsi4_loop>:
    5eae:	aa 1f       	adc	r26, r26
    5eb0:	bb 1f       	adc	r27, r27
    5eb2:	ee 1f       	adc	r30, r30
    5eb4:	ff 1f       	adc	r31, r31
    5eb6:	a2 17       	cp	r26, r18
    5eb8:	b3 07       	cpc	r27, r19
    5eba:	e4 07       	cpc	r30, r20
    5ebc:	f5 07       	cpc	r31, r21
    5ebe:	20 f0       	brcs	.+8      	; 0x5ec8 <__udivmodsi4_ep>
    5ec0:	a2 1b       	sub	r26, r18
    5ec2:	b3 0b       	sbc	r27, r19
    5ec4:	e4 0b       	sbc	r30, r20
    5ec6:	f5 0b       	sbc	r31, r21

00005ec8 <__udivmodsi4_ep>:
    5ec8:	66 1f       	adc	r22, r22
    5eca:	77 1f       	adc	r23, r23
    5ecc:	88 1f       	adc	r24, r24
    5ece:	99 1f       	adc	r25, r25
    5ed0:	1a 94       	dec	r1
    5ed2:	69 f7       	brne	.-38     	; 0x5eae <__udivmodsi4_loop>
    5ed4:	60 95       	com	r22
    5ed6:	70 95       	com	r23
    5ed8:	80 95       	com	r24
    5eda:	90 95       	com	r25
    5edc:	9b 01       	movw	r18, r22
    5ede:	ac 01       	movw	r20, r24
    5ee0:	bd 01       	movw	r22, r26
    5ee2:	cf 01       	movw	r24, r30
    5ee4:	08 95       	ret

00005ee6 <__divmodsi4>:
    5ee6:	05 2e       	mov	r0, r21
    5ee8:	97 fb       	bst	r25, 7
    5eea:	16 f4       	brtc	.+4      	; 0x5ef0 <__divmodsi4+0xa>
    5eec:	00 94       	com	r0
    5eee:	0f d0       	rcall	.+30     	; 0x5f0e <__negsi2>
    5ef0:	57 fd       	sbrc	r21, 7
    5ef2:	05 d0       	rcall	.+10     	; 0x5efe <__divmodsi4_neg2>
    5ef4:	d6 df       	rcall	.-84     	; 0x5ea2 <__udivmodsi4>
    5ef6:	07 fc       	sbrc	r0, 7
    5ef8:	02 d0       	rcall	.+4      	; 0x5efe <__divmodsi4_neg2>
    5efa:	46 f4       	brtc	.+16     	; 0x5f0c <__divmodsi4_exit>
    5efc:	08 c0       	rjmp	.+16     	; 0x5f0e <__negsi2>

00005efe <__divmodsi4_neg2>:
    5efe:	50 95       	com	r21
    5f00:	40 95       	com	r20
    5f02:	30 95       	com	r19
    5f04:	21 95       	neg	r18
    5f06:	3f 4f       	sbci	r19, 0xFF	; 255
    5f08:	4f 4f       	sbci	r20, 0xFF	; 255
    5f0a:	5f 4f       	sbci	r21, 0xFF	; 255

00005f0c <__divmodsi4_exit>:
    5f0c:	08 95       	ret

00005f0e <__negsi2>:
    5f0e:	90 95       	com	r25
    5f10:	80 95       	com	r24
    5f12:	70 95       	com	r23
    5f14:	61 95       	neg	r22
    5f16:	7f 4f       	sbci	r23, 0xFF	; 255
    5f18:	8f 4f       	sbci	r24, 0xFF	; 255
    5f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1c:	08 95       	ret

00005f1e <__tablejump2__>:
    5f1e:	ee 0f       	add	r30, r30
    5f20:	ff 1f       	adc	r31, r31
    5f22:	88 1f       	adc	r24, r24
    5f24:	8b bf       	out	0x3b, r24	; 59
    5f26:	07 90       	elpm	r0, Z+
    5f28:	f6 91       	elpm	r31, Z
    5f2a:	e0 2d       	mov	r30, r0
    5f2c:	19 94       	eijmp

00005f2e <__umulhisi3>:
    5f2e:	a2 9f       	mul	r26, r18
    5f30:	b0 01       	movw	r22, r0
    5f32:	b3 9f       	mul	r27, r19
    5f34:	c0 01       	movw	r24, r0
    5f36:	a3 9f       	mul	r26, r19
    5f38:	70 0d       	add	r23, r0
    5f3a:	81 1d       	adc	r24, r1
    5f3c:	11 24       	eor	r1, r1
    5f3e:	91 1d       	adc	r25, r1
    5f40:	b2 9f       	mul	r27, r18
    5f42:	70 0d       	add	r23, r0
    5f44:	81 1d       	adc	r24, r1
    5f46:	11 24       	eor	r1, r1
    5f48:	91 1d       	adc	r25, r1
    5f4a:	08 95       	ret

00005f4c <__muluhisi3>:
    5f4c:	f0 df       	rcall	.-32     	; 0x5f2e <__umulhisi3>
    5f4e:	a5 9f       	mul	r26, r21
    5f50:	90 0d       	add	r25, r0
    5f52:	b4 9f       	mul	r27, r20
    5f54:	90 0d       	add	r25, r0
    5f56:	a4 9f       	mul	r26, r20
    5f58:	80 0d       	add	r24, r0
    5f5a:	91 1d       	adc	r25, r1
    5f5c:	11 24       	eor	r1, r1
    5f5e:	08 95       	ret

00005f60 <__udivmodhi4>:
    5f60:	aa 1b       	sub	r26, r26
    5f62:	bb 1b       	sub	r27, r27
    5f64:	51 e1       	ldi	r21, 0x11	; 17
    5f66:	07 c0       	rjmp	.+14     	; 0x5f76 <__udivmodhi4_ep>

00005f68 <__udivmodhi4_loop>:
    5f68:	aa 1f       	adc	r26, r26
    5f6a:	bb 1f       	adc	r27, r27
    5f6c:	a6 17       	cp	r26, r22
    5f6e:	b7 07       	cpc	r27, r23
    5f70:	10 f0       	brcs	.+4      	; 0x5f76 <__udivmodhi4_ep>
    5f72:	a6 1b       	sub	r26, r22
    5f74:	b7 0b       	sbc	r27, r23

00005f76 <__udivmodhi4_ep>:
    5f76:	88 1f       	adc	r24, r24
    5f78:	99 1f       	adc	r25, r25
    5f7a:	5a 95       	dec	r21
    5f7c:	a9 f7       	brne	.-22     	; 0x5f68 <__udivmodhi4_loop>
    5f7e:	80 95       	com	r24
    5f80:	90 95       	com	r25
    5f82:	bc 01       	movw	r22, r24
    5f84:	cd 01       	movw	r24, r26
    5f86:	08 95       	ret

00005f88 <malloc>:
    5f88:	0f 93       	push	r16
    5f8a:	1f 93       	push	r17
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	82 30       	cpi	r24, 0x02	; 2
    5f92:	91 05       	cpc	r25, r1
    5f94:	10 f4       	brcc	.+4      	; 0x5f9a <malloc+0x12>
    5f96:	82 e0       	ldi	r24, 0x02	; 2
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	e0 91 14 0c 	lds	r30, 0x0C14	; 0x800c14 <__flp>
    5f9e:	f0 91 15 0c 	lds	r31, 0x0C15	; 0x800c15 <__flp+0x1>
    5fa2:	20 e0       	ldi	r18, 0x00	; 0
    5fa4:	30 e0       	ldi	r19, 0x00	; 0
    5fa6:	a0 e0       	ldi	r26, 0x00	; 0
    5fa8:	b0 e0       	ldi	r27, 0x00	; 0
    5faa:	30 97       	sbiw	r30, 0x00	; 0
    5fac:	19 f1       	breq	.+70     	; 0x5ff4 <malloc+0x6c>
    5fae:	40 81       	ld	r20, Z
    5fb0:	51 81       	ldd	r21, Z+1	; 0x01
    5fb2:	02 81       	ldd	r16, Z+2	; 0x02
    5fb4:	13 81       	ldd	r17, Z+3	; 0x03
    5fb6:	48 17       	cp	r20, r24
    5fb8:	59 07       	cpc	r21, r25
    5fba:	c8 f0       	brcs	.+50     	; 0x5fee <malloc+0x66>
    5fbc:	84 17       	cp	r24, r20
    5fbe:	95 07       	cpc	r25, r21
    5fc0:	69 f4       	brne	.+26     	; 0x5fdc <malloc+0x54>
    5fc2:	10 97       	sbiw	r26, 0x00	; 0
    5fc4:	31 f0       	breq	.+12     	; 0x5fd2 <malloc+0x4a>
    5fc6:	12 96       	adiw	r26, 0x02	; 2
    5fc8:	0c 93       	st	X, r16
    5fca:	12 97       	sbiw	r26, 0x02	; 2
    5fcc:	13 96       	adiw	r26, 0x03	; 3
    5fce:	1c 93       	st	X, r17
    5fd0:	27 c0       	rjmp	.+78     	; 0x6020 <malloc+0x98>
    5fd2:	00 93 14 0c 	sts	0x0C14, r16	; 0x800c14 <__flp>
    5fd6:	10 93 15 0c 	sts	0x0C15, r17	; 0x800c15 <__flp+0x1>
    5fda:	22 c0       	rjmp	.+68     	; 0x6020 <malloc+0x98>
    5fdc:	21 15       	cp	r18, r1
    5fde:	31 05       	cpc	r19, r1
    5fe0:	19 f0       	breq	.+6      	; 0x5fe8 <malloc+0x60>
    5fe2:	42 17       	cp	r20, r18
    5fe4:	53 07       	cpc	r21, r19
    5fe6:	18 f4       	brcc	.+6      	; 0x5fee <malloc+0x66>
    5fe8:	9a 01       	movw	r18, r20
    5fea:	bd 01       	movw	r22, r26
    5fec:	ef 01       	movw	r28, r30
    5fee:	df 01       	movw	r26, r30
    5ff0:	f8 01       	movw	r30, r16
    5ff2:	db cf       	rjmp	.-74     	; 0x5faa <malloc+0x22>
    5ff4:	21 15       	cp	r18, r1
    5ff6:	31 05       	cpc	r19, r1
    5ff8:	f9 f0       	breq	.+62     	; 0x6038 <malloc+0xb0>
    5ffa:	28 1b       	sub	r18, r24
    5ffc:	39 0b       	sbc	r19, r25
    5ffe:	24 30       	cpi	r18, 0x04	; 4
    6000:	31 05       	cpc	r19, r1
    6002:	80 f4       	brcc	.+32     	; 0x6024 <malloc+0x9c>
    6004:	8a 81       	ldd	r24, Y+2	; 0x02
    6006:	9b 81       	ldd	r25, Y+3	; 0x03
    6008:	61 15       	cp	r22, r1
    600a:	71 05       	cpc	r23, r1
    600c:	21 f0       	breq	.+8      	; 0x6016 <malloc+0x8e>
    600e:	fb 01       	movw	r30, r22
    6010:	93 83       	std	Z+3, r25	; 0x03
    6012:	82 83       	std	Z+2, r24	; 0x02
    6014:	04 c0       	rjmp	.+8      	; 0x601e <malloc+0x96>
    6016:	90 93 15 0c 	sts	0x0C15, r25	; 0x800c15 <__flp+0x1>
    601a:	80 93 14 0c 	sts	0x0C14, r24	; 0x800c14 <__flp>
    601e:	fe 01       	movw	r30, r28
    6020:	32 96       	adiw	r30, 0x02	; 2
    6022:	44 c0       	rjmp	.+136    	; 0x60ac <malloc+0x124>
    6024:	fe 01       	movw	r30, r28
    6026:	e2 0f       	add	r30, r18
    6028:	f3 1f       	adc	r31, r19
    602a:	81 93       	st	Z+, r24
    602c:	91 93       	st	Z+, r25
    602e:	22 50       	subi	r18, 0x02	; 2
    6030:	31 09       	sbc	r19, r1
    6032:	39 83       	std	Y+1, r19	; 0x01
    6034:	28 83       	st	Y, r18
    6036:	3a c0       	rjmp	.+116    	; 0x60ac <malloc+0x124>
    6038:	20 91 12 0c 	lds	r18, 0x0C12	; 0x800c12 <__brkval>
    603c:	30 91 13 0c 	lds	r19, 0x0C13	; 0x800c13 <__brkval+0x1>
    6040:	23 2b       	or	r18, r19
    6042:	41 f4       	brne	.+16     	; 0x6054 <malloc+0xcc>
    6044:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6048:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    604c:	30 93 13 0c 	sts	0x0C13, r19	; 0x800c13 <__brkval+0x1>
    6050:	20 93 12 0c 	sts	0x0C12, r18	; 0x800c12 <__brkval>
    6054:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6058:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    605c:	21 15       	cp	r18, r1
    605e:	31 05       	cpc	r19, r1
    6060:	41 f4       	brne	.+16     	; 0x6072 <malloc+0xea>
    6062:	2d b7       	in	r18, 0x3d	; 61
    6064:	3e b7       	in	r19, 0x3e	; 62
    6066:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    606a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    606e:	24 1b       	sub	r18, r20
    6070:	35 0b       	sbc	r19, r21
    6072:	e0 91 12 0c 	lds	r30, 0x0C12	; 0x800c12 <__brkval>
    6076:	f0 91 13 0c 	lds	r31, 0x0C13	; 0x800c13 <__brkval+0x1>
    607a:	e2 17       	cp	r30, r18
    607c:	f3 07       	cpc	r31, r19
    607e:	a0 f4       	brcc	.+40     	; 0x60a8 <malloc+0x120>
    6080:	2e 1b       	sub	r18, r30
    6082:	3f 0b       	sbc	r19, r31
    6084:	28 17       	cp	r18, r24
    6086:	39 07       	cpc	r19, r25
    6088:	78 f0       	brcs	.+30     	; 0x60a8 <malloc+0x120>
    608a:	ac 01       	movw	r20, r24
    608c:	4e 5f       	subi	r20, 0xFE	; 254
    608e:	5f 4f       	sbci	r21, 0xFF	; 255
    6090:	24 17       	cp	r18, r20
    6092:	35 07       	cpc	r19, r21
    6094:	48 f0       	brcs	.+18     	; 0x60a8 <malloc+0x120>
    6096:	4e 0f       	add	r20, r30
    6098:	5f 1f       	adc	r21, r31
    609a:	50 93 13 0c 	sts	0x0C13, r21	; 0x800c13 <__brkval+0x1>
    609e:	40 93 12 0c 	sts	0x0C12, r20	; 0x800c12 <__brkval>
    60a2:	81 93       	st	Z+, r24
    60a4:	91 93       	st	Z+, r25
    60a6:	02 c0       	rjmp	.+4      	; 0x60ac <malloc+0x124>
    60a8:	e0 e0       	ldi	r30, 0x00	; 0
    60aa:	f0 e0       	ldi	r31, 0x00	; 0
    60ac:	cf 01       	movw	r24, r30
    60ae:	df 91       	pop	r29
    60b0:	cf 91       	pop	r28
    60b2:	1f 91       	pop	r17
    60b4:	0f 91       	pop	r16
    60b6:	08 95       	ret

000060b8 <free>:
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
    60bc:	00 97       	sbiw	r24, 0x00	; 0
    60be:	09 f4       	brne	.+2      	; 0x60c2 <free+0xa>
    60c0:	81 c0       	rjmp	.+258    	; 0x61c4 <free+0x10c>
    60c2:	fc 01       	movw	r30, r24
    60c4:	32 97       	sbiw	r30, 0x02	; 2
    60c6:	13 82       	std	Z+3, r1	; 0x03
    60c8:	12 82       	std	Z+2, r1	; 0x02
    60ca:	a0 91 14 0c 	lds	r26, 0x0C14	; 0x800c14 <__flp>
    60ce:	b0 91 15 0c 	lds	r27, 0x0C15	; 0x800c15 <__flp+0x1>
    60d2:	10 97       	sbiw	r26, 0x00	; 0
    60d4:	81 f4       	brne	.+32     	; 0x60f6 <free+0x3e>
    60d6:	20 81       	ld	r18, Z
    60d8:	31 81       	ldd	r19, Z+1	; 0x01
    60da:	82 0f       	add	r24, r18
    60dc:	93 1f       	adc	r25, r19
    60de:	20 91 12 0c 	lds	r18, 0x0C12	; 0x800c12 <__brkval>
    60e2:	30 91 13 0c 	lds	r19, 0x0C13	; 0x800c13 <__brkval+0x1>
    60e6:	28 17       	cp	r18, r24
    60e8:	39 07       	cpc	r19, r25
    60ea:	51 f5       	brne	.+84     	; 0x6140 <free+0x88>
    60ec:	f0 93 13 0c 	sts	0x0C13, r31	; 0x800c13 <__brkval+0x1>
    60f0:	e0 93 12 0c 	sts	0x0C12, r30	; 0x800c12 <__brkval>
    60f4:	67 c0       	rjmp	.+206    	; 0x61c4 <free+0x10c>
    60f6:	ed 01       	movw	r28, r26
    60f8:	20 e0       	ldi	r18, 0x00	; 0
    60fa:	30 e0       	ldi	r19, 0x00	; 0
    60fc:	ce 17       	cp	r28, r30
    60fe:	df 07       	cpc	r29, r31
    6100:	40 f4       	brcc	.+16     	; 0x6112 <free+0x5a>
    6102:	4a 81       	ldd	r20, Y+2	; 0x02
    6104:	5b 81       	ldd	r21, Y+3	; 0x03
    6106:	9e 01       	movw	r18, r28
    6108:	41 15       	cp	r20, r1
    610a:	51 05       	cpc	r21, r1
    610c:	f1 f0       	breq	.+60     	; 0x614a <free+0x92>
    610e:	ea 01       	movw	r28, r20
    6110:	f5 cf       	rjmp	.-22     	; 0x60fc <free+0x44>
    6112:	d3 83       	std	Z+3, r29	; 0x03
    6114:	c2 83       	std	Z+2, r28	; 0x02
    6116:	40 81       	ld	r20, Z
    6118:	51 81       	ldd	r21, Z+1	; 0x01
    611a:	84 0f       	add	r24, r20
    611c:	95 1f       	adc	r25, r21
    611e:	c8 17       	cp	r28, r24
    6120:	d9 07       	cpc	r29, r25
    6122:	59 f4       	brne	.+22     	; 0x613a <free+0x82>
    6124:	88 81       	ld	r24, Y
    6126:	99 81       	ldd	r25, Y+1	; 0x01
    6128:	84 0f       	add	r24, r20
    612a:	95 1f       	adc	r25, r21
    612c:	02 96       	adiw	r24, 0x02	; 2
    612e:	91 83       	std	Z+1, r25	; 0x01
    6130:	80 83       	st	Z, r24
    6132:	8a 81       	ldd	r24, Y+2	; 0x02
    6134:	9b 81       	ldd	r25, Y+3	; 0x03
    6136:	93 83       	std	Z+3, r25	; 0x03
    6138:	82 83       	std	Z+2, r24	; 0x02
    613a:	21 15       	cp	r18, r1
    613c:	31 05       	cpc	r19, r1
    613e:	29 f4       	brne	.+10     	; 0x614a <free+0x92>
    6140:	f0 93 15 0c 	sts	0x0C15, r31	; 0x800c15 <__flp+0x1>
    6144:	e0 93 14 0c 	sts	0x0C14, r30	; 0x800c14 <__flp>
    6148:	3d c0       	rjmp	.+122    	; 0x61c4 <free+0x10c>
    614a:	e9 01       	movw	r28, r18
    614c:	fb 83       	std	Y+3, r31	; 0x03
    614e:	ea 83       	std	Y+2, r30	; 0x02
    6150:	49 91       	ld	r20, Y+
    6152:	59 91       	ld	r21, Y+
    6154:	c4 0f       	add	r28, r20
    6156:	d5 1f       	adc	r29, r21
    6158:	ec 17       	cp	r30, r28
    615a:	fd 07       	cpc	r31, r29
    615c:	61 f4       	brne	.+24     	; 0x6176 <free+0xbe>
    615e:	80 81       	ld	r24, Z
    6160:	91 81       	ldd	r25, Z+1	; 0x01
    6162:	84 0f       	add	r24, r20
    6164:	95 1f       	adc	r25, r21
    6166:	02 96       	adiw	r24, 0x02	; 2
    6168:	e9 01       	movw	r28, r18
    616a:	99 83       	std	Y+1, r25	; 0x01
    616c:	88 83       	st	Y, r24
    616e:	82 81       	ldd	r24, Z+2	; 0x02
    6170:	93 81       	ldd	r25, Z+3	; 0x03
    6172:	9b 83       	std	Y+3, r25	; 0x03
    6174:	8a 83       	std	Y+2, r24	; 0x02
    6176:	e0 e0       	ldi	r30, 0x00	; 0
    6178:	f0 e0       	ldi	r31, 0x00	; 0
    617a:	12 96       	adiw	r26, 0x02	; 2
    617c:	8d 91       	ld	r24, X+
    617e:	9c 91       	ld	r25, X
    6180:	13 97       	sbiw	r26, 0x03	; 3
    6182:	00 97       	sbiw	r24, 0x00	; 0
    6184:	19 f0       	breq	.+6      	; 0x618c <free+0xd4>
    6186:	fd 01       	movw	r30, r26
    6188:	dc 01       	movw	r26, r24
    618a:	f7 cf       	rjmp	.-18     	; 0x617a <free+0xc2>
    618c:	8d 91       	ld	r24, X+
    618e:	9c 91       	ld	r25, X
    6190:	11 97       	sbiw	r26, 0x01	; 1
    6192:	9d 01       	movw	r18, r26
    6194:	2e 5f       	subi	r18, 0xFE	; 254
    6196:	3f 4f       	sbci	r19, 0xFF	; 255
    6198:	82 0f       	add	r24, r18
    619a:	93 1f       	adc	r25, r19
    619c:	20 91 12 0c 	lds	r18, 0x0C12	; 0x800c12 <__brkval>
    61a0:	30 91 13 0c 	lds	r19, 0x0C13	; 0x800c13 <__brkval+0x1>
    61a4:	28 17       	cp	r18, r24
    61a6:	39 07       	cpc	r19, r25
    61a8:	69 f4       	brne	.+26     	; 0x61c4 <free+0x10c>
    61aa:	30 97       	sbiw	r30, 0x00	; 0
    61ac:	29 f4       	brne	.+10     	; 0x61b8 <free+0x100>
    61ae:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <__flp+0x1>
    61b2:	10 92 14 0c 	sts	0x0C14, r1	; 0x800c14 <__flp>
    61b6:	02 c0       	rjmp	.+4      	; 0x61bc <free+0x104>
    61b8:	13 82       	std	Z+3, r1	; 0x03
    61ba:	12 82       	std	Z+2, r1	; 0x02
    61bc:	b0 93 13 0c 	sts	0x0C13, r27	; 0x800c13 <__brkval+0x1>
    61c0:	a0 93 12 0c 	sts	0x0C12, r26	; 0x800c12 <__brkval>
    61c4:	df 91       	pop	r29
    61c6:	cf 91       	pop	r28
    61c8:	08 95       	ret

000061ca <random_r>:
    61ca:	8f 92       	push	r8
    61cc:	9f 92       	push	r9
    61ce:	af 92       	push	r10
    61d0:	bf 92       	push	r11
    61d2:	cf 92       	push	r12
    61d4:	df 92       	push	r13
    61d6:	ef 92       	push	r14
    61d8:	ff 92       	push	r15
    61da:	cf 93       	push	r28
    61dc:	df 93       	push	r29
    61de:	ec 01       	movw	r28, r24
    61e0:	68 81       	ld	r22, Y
    61e2:	79 81       	ldd	r23, Y+1	; 0x01
    61e4:	8a 81       	ldd	r24, Y+2	; 0x02
    61e6:	9b 81       	ldd	r25, Y+3	; 0x03
    61e8:	61 15       	cp	r22, r1
    61ea:	71 05       	cpc	r23, r1
    61ec:	81 05       	cpc	r24, r1
    61ee:	91 05       	cpc	r25, r1
    61f0:	21 f4       	brne	.+8      	; 0x61fa <random_r+0x30>
    61f2:	64 e2       	ldi	r22, 0x24	; 36
    61f4:	79 ed       	ldi	r23, 0xD9	; 217
    61f6:	8b e5       	ldi	r24, 0x5B	; 91
    61f8:	97 e0       	ldi	r25, 0x07	; 7
    61fa:	2d e1       	ldi	r18, 0x1D	; 29
    61fc:	33 ef       	ldi	r19, 0xF3	; 243
    61fe:	41 e0       	ldi	r20, 0x01	; 1
    6200:	50 e0       	ldi	r21, 0x00	; 0
    6202:	71 de       	rcall	.-798    	; 0x5ee6 <__divmodsi4>
    6204:	49 01       	movw	r8, r18
    6206:	5a 01       	movw	r10, r20
    6208:	9b 01       	movw	r18, r22
    620a:	ac 01       	movw	r20, r24
    620c:	a7 ea       	ldi	r26, 0xA7	; 167
    620e:	b1 e4       	ldi	r27, 0x41	; 65
    6210:	9d de       	rcall	.-710    	; 0x5f4c <__muluhisi3>
    6212:	6b 01       	movw	r12, r22
    6214:	7c 01       	movw	r14, r24
    6216:	ac ee       	ldi	r26, 0xEC	; 236
    6218:	b4 ef       	ldi	r27, 0xF4	; 244
    621a:	a5 01       	movw	r20, r10
    621c:	94 01       	movw	r18, r8
    621e:	cd d4       	rcall	.+2458   	; 0x6bba <__mulohisi3>
    6220:	dc 01       	movw	r26, r24
    6222:	cb 01       	movw	r24, r22
    6224:	8c 0d       	add	r24, r12
    6226:	9d 1d       	adc	r25, r13
    6228:	ae 1d       	adc	r26, r14
    622a:	bf 1d       	adc	r27, r15
    622c:	b7 ff       	sbrs	r27, 7
    622e:	03 c0       	rjmp	.+6      	; 0x6236 <random_r+0x6c>
    6230:	01 97       	sbiw	r24, 0x01	; 1
    6232:	a1 09       	sbc	r26, r1
    6234:	b0 48       	sbci	r27, 0x80	; 128
    6236:	88 83       	st	Y, r24
    6238:	99 83       	std	Y+1, r25	; 0x01
    623a:	aa 83       	std	Y+2, r26	; 0x02
    623c:	bb 83       	std	Y+3, r27	; 0x03
    623e:	bc 01       	movw	r22, r24
    6240:	cd 01       	movw	r24, r26
    6242:	9f 77       	andi	r25, 0x7F	; 127
    6244:	df 91       	pop	r29
    6246:	cf 91       	pop	r28
    6248:	ff 90       	pop	r15
    624a:	ef 90       	pop	r14
    624c:	df 90       	pop	r13
    624e:	cf 90       	pop	r12
    6250:	bf 90       	pop	r11
    6252:	af 90       	pop	r10
    6254:	9f 90       	pop	r9
    6256:	8f 90       	pop	r8
    6258:	08 95       	ret

0000625a <random>:
    625a:	8f 92       	push	r8
    625c:	9f 92       	push	r9
    625e:	af 92       	push	r10
    6260:	bf 92       	push	r11
    6262:	cf 92       	push	r12
    6264:	df 92       	push	r13
    6266:	ef 92       	push	r14
    6268:	ff 92       	push	r15
    626a:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <next>
    626e:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <next+0x1>
    6272:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <next+0x2>
    6276:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <next+0x3>
    627a:	61 15       	cp	r22, r1
    627c:	71 05       	cpc	r23, r1
    627e:	81 05       	cpc	r24, r1
    6280:	91 05       	cpc	r25, r1
    6282:	21 f4       	brne	.+8      	; 0x628c <random+0x32>
    6284:	64 e2       	ldi	r22, 0x24	; 36
    6286:	79 ed       	ldi	r23, 0xD9	; 217
    6288:	8b e5       	ldi	r24, 0x5B	; 91
    628a:	97 e0       	ldi	r25, 0x07	; 7
    628c:	2d e1       	ldi	r18, 0x1D	; 29
    628e:	33 ef       	ldi	r19, 0xF3	; 243
    6290:	41 e0       	ldi	r20, 0x01	; 1
    6292:	50 e0       	ldi	r21, 0x00	; 0
    6294:	28 de       	rcall	.-944    	; 0x5ee6 <__divmodsi4>
    6296:	49 01       	movw	r8, r18
    6298:	5a 01       	movw	r10, r20
    629a:	9b 01       	movw	r18, r22
    629c:	ac 01       	movw	r20, r24
    629e:	a7 ea       	ldi	r26, 0xA7	; 167
    62a0:	b1 e4       	ldi	r27, 0x41	; 65
    62a2:	54 de       	rcall	.-856    	; 0x5f4c <__muluhisi3>
    62a4:	6b 01       	movw	r12, r22
    62a6:	7c 01       	movw	r14, r24
    62a8:	ac ee       	ldi	r26, 0xEC	; 236
    62aa:	b4 ef       	ldi	r27, 0xF4	; 244
    62ac:	a5 01       	movw	r20, r10
    62ae:	94 01       	movw	r18, r8
    62b0:	84 d4       	rcall	.+2312   	; 0x6bba <__mulohisi3>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	8c 0d       	add	r24, r12
    62b8:	9d 1d       	adc	r25, r13
    62ba:	ae 1d       	adc	r26, r14
    62bc:	bf 1d       	adc	r27, r15
    62be:	b7 ff       	sbrs	r27, 7
    62c0:	03 c0       	rjmp	.+6      	; 0x62c8 <random+0x6e>
    62c2:	01 97       	sbiw	r24, 0x01	; 1
    62c4:	a1 09       	sbc	r26, r1
    62c6:	b0 48       	sbci	r27, 0x80	; 128
    62c8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    62cc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    62d0:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    62d4:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    62d8:	bc 01       	movw	r22, r24
    62da:	cd 01       	movw	r24, r26
    62dc:	9f 77       	andi	r25, 0x7F	; 127
    62de:	ff 90       	pop	r15
    62e0:	ef 90       	pop	r14
    62e2:	df 90       	pop	r13
    62e4:	cf 90       	pop	r12
    62e6:	bf 90       	pop	r11
    62e8:	af 90       	pop	r10
    62ea:	9f 90       	pop	r9
    62ec:	8f 90       	pop	r8
    62ee:	08 95       	ret

000062f0 <srandom>:
    62f0:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <next>
    62f4:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <next+0x1>
    62f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <next+0x2>
    62fc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <next+0x3>
    6300:	08 95       	ret

00006302 <realloc>:
    6302:	6f 92       	push	r6
    6304:	7f 92       	push	r7
    6306:	8f 92       	push	r8
    6308:	9f 92       	push	r9
    630a:	af 92       	push	r10
    630c:	bf 92       	push	r11
    630e:	cf 92       	push	r12
    6310:	df 92       	push	r13
    6312:	ef 92       	push	r14
    6314:	ff 92       	push	r15
    6316:	0f 93       	push	r16
    6318:	1f 93       	push	r17
    631a:	cf 93       	push	r28
    631c:	df 93       	push	r29
    631e:	00 97       	sbiw	r24, 0x00	; 0
    6320:	81 f4       	brne	.+32     	; 0x6342 <realloc+0x40>
    6322:	cb 01       	movw	r24, r22
    6324:	df 91       	pop	r29
    6326:	cf 91       	pop	r28
    6328:	1f 91       	pop	r17
    632a:	0f 91       	pop	r16
    632c:	ff 90       	pop	r15
    632e:	ef 90       	pop	r14
    6330:	df 90       	pop	r13
    6332:	cf 90       	pop	r12
    6334:	bf 90       	pop	r11
    6336:	af 90       	pop	r10
    6338:	9f 90       	pop	r9
    633a:	8f 90       	pop	r8
    633c:	7f 90       	pop	r7
    633e:	6f 90       	pop	r6
    6340:	23 ce       	rjmp	.-954    	; 0x5f88 <malloc>
    6342:	fc 01       	movw	r30, r24
    6344:	e6 0f       	add	r30, r22
    6346:	f7 1f       	adc	r31, r23
    6348:	9c 01       	movw	r18, r24
    634a:	22 50       	subi	r18, 0x02	; 2
    634c:	31 09       	sbc	r19, r1
    634e:	e2 17       	cp	r30, r18
    6350:	f3 07       	cpc	r31, r19
    6352:	08 f4       	brcc	.+2      	; 0x6356 <realloc+0x54>
    6354:	a5 c0       	rjmp	.+330    	; 0x64a0 <realloc+0x19e>
    6356:	ec 01       	movw	r28, r24
    6358:	d9 01       	movw	r26, r18
    635a:	0d 91       	ld	r16, X+
    635c:	1c 91       	ld	r17, X
    635e:	11 97       	sbiw	r26, 0x01	; 1
    6360:	06 17       	cp	r16, r22
    6362:	17 07       	cpc	r17, r23
    6364:	a8 f0       	brcs	.+42     	; 0x6390 <realloc+0x8e>
    6366:	05 30       	cpi	r16, 0x05	; 5
    6368:	11 05       	cpc	r17, r1
    636a:	08 f4       	brcc	.+2      	; 0x636e <realloc+0x6c>
    636c:	97 c0       	rjmp	.+302    	; 0x649c <realloc+0x19a>
    636e:	c8 01       	movw	r24, r16
    6370:	04 97       	sbiw	r24, 0x04	; 4
    6372:	86 17       	cp	r24, r22
    6374:	97 07       	cpc	r25, r23
    6376:	08 f4       	brcc	.+2      	; 0x637a <realloc+0x78>
    6378:	91 c0       	rjmp	.+290    	; 0x649c <realloc+0x19a>
    637a:	02 50       	subi	r16, 0x02	; 2
    637c:	11 09       	sbc	r17, r1
    637e:	06 1b       	sub	r16, r22
    6380:	17 0b       	sbc	r17, r23
    6382:	01 93       	st	Z+, r16
    6384:	11 93       	st	Z+, r17
    6386:	6d 93       	st	X+, r22
    6388:	7c 93       	st	X, r23
    638a:	cf 01       	movw	r24, r30
    638c:	95 de       	rcall	.-726    	; 0x60b8 <free>
    638e:	86 c0       	rjmp	.+268    	; 0x649c <realloc+0x19a>
    6390:	5b 01       	movw	r10, r22
    6392:	a0 1a       	sub	r10, r16
    6394:	b1 0a       	sbc	r11, r17
    6396:	4c 01       	movw	r8, r24
    6398:	80 0e       	add	r8, r16
    639a:	91 1e       	adc	r9, r17
    639c:	a0 91 14 0c 	lds	r26, 0x0C14	; 0x800c14 <__flp>
    63a0:	b0 91 15 0c 	lds	r27, 0x0C15	; 0x800c15 <__flp+0x1>
    63a4:	61 2c       	mov	r6, r1
    63a6:	71 2c       	mov	r7, r1
    63a8:	e1 2c       	mov	r14, r1
    63aa:	f1 2c       	mov	r15, r1
    63ac:	10 97       	sbiw	r26, 0x00	; 0
    63ae:	09 f4       	brne	.+2      	; 0x63b2 <realloc+0xb0>
    63b0:	46 c0       	rjmp	.+140    	; 0x643e <realloc+0x13c>
    63b2:	8d 91       	ld	r24, X+
    63b4:	9c 91       	ld	r25, X
    63b6:	11 97       	sbiw	r26, 0x01	; 1
    63b8:	a8 15       	cp	r26, r8
    63ba:	b9 05       	cpc	r27, r9
    63bc:	b1 f5       	brne	.+108    	; 0x642a <realloc+0x128>
    63be:	6c 01       	movw	r12, r24
    63c0:	42 e0       	ldi	r20, 0x02	; 2
    63c2:	c4 0e       	add	r12, r20
    63c4:	d1 1c       	adc	r13, r1
    63c6:	ca 14       	cp	r12, r10
    63c8:	db 04       	cpc	r13, r11
    63ca:	78 f1       	brcs	.+94     	; 0x642a <realloc+0x128>
    63cc:	4c 01       	movw	r8, r24
    63ce:	8a 18       	sub	r8, r10
    63d0:	9b 08       	sbc	r9, r11
    63d2:	64 01       	movw	r12, r8
    63d4:	42 e0       	ldi	r20, 0x02	; 2
    63d6:	c4 0e       	add	r12, r20
    63d8:	d1 1c       	adc	r13, r1
    63da:	12 96       	adiw	r26, 0x02	; 2
    63dc:	bc 90       	ld	r11, X
    63de:	12 97       	sbiw	r26, 0x02	; 2
    63e0:	13 96       	adiw	r26, 0x03	; 3
    63e2:	ac 91       	ld	r26, X
    63e4:	b5 e0       	ldi	r27, 0x05	; 5
    63e6:	cb 16       	cp	r12, r27
    63e8:	d1 04       	cpc	r13, r1
    63ea:	40 f0       	brcs	.+16     	; 0x63fc <realloc+0xfa>
    63ec:	b2 82       	std	Z+2, r11	; 0x02
    63ee:	a3 83       	std	Z+3, r26	; 0x03
    63f0:	91 82       	std	Z+1, r9	; 0x01
    63f2:	80 82       	st	Z, r8
    63f4:	d9 01       	movw	r26, r18
    63f6:	6d 93       	st	X+, r22
    63f8:	7c 93       	st	X, r23
    63fa:	09 c0       	rjmp	.+18     	; 0x640e <realloc+0x10c>
    63fc:	0e 5f       	subi	r16, 0xFE	; 254
    63fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6400:	80 0f       	add	r24, r16
    6402:	91 1f       	adc	r25, r17
    6404:	f9 01       	movw	r30, r18
    6406:	91 83       	std	Z+1, r25	; 0x01
    6408:	80 83       	st	Z, r24
    640a:	eb 2d       	mov	r30, r11
    640c:	fa 2f       	mov	r31, r26
    640e:	e1 14       	cp	r14, r1
    6410:	f1 04       	cpc	r15, r1
    6412:	31 f0       	breq	.+12     	; 0x6420 <realloc+0x11e>
    6414:	d7 01       	movw	r26, r14
    6416:	13 96       	adiw	r26, 0x03	; 3
    6418:	fc 93       	st	X, r31
    641a:	ee 93       	st	-X, r30
    641c:	12 97       	sbiw	r26, 0x02	; 2
    641e:	3e c0       	rjmp	.+124    	; 0x649c <realloc+0x19a>
    6420:	f0 93 15 0c 	sts	0x0C15, r31	; 0x800c15 <__flp+0x1>
    6424:	e0 93 14 0c 	sts	0x0C14, r30	; 0x800c14 <__flp>
    6428:	39 c0       	rjmp	.+114    	; 0x649c <realloc+0x19a>
    642a:	68 16       	cp	r6, r24
    642c:	79 06       	cpc	r7, r25
    642e:	08 f4       	brcc	.+2      	; 0x6432 <realloc+0x130>
    6430:	3c 01       	movw	r6, r24
    6432:	7d 01       	movw	r14, r26
    6434:	12 96       	adiw	r26, 0x02	; 2
    6436:	0d 90       	ld	r0, X+
    6438:	bc 91       	ld	r27, X
    643a:	a0 2d       	mov	r26, r0
    643c:	b7 cf       	rjmp	.-146    	; 0x63ac <realloc+0xaa>
    643e:	80 91 12 0c 	lds	r24, 0x0C12	; 0x800c12 <__brkval>
    6442:	90 91 13 0c 	lds	r25, 0x0C13	; 0x800c13 <__brkval+0x1>
    6446:	88 16       	cp	r8, r24
    6448:	99 06       	cpc	r9, r25
    644a:	e1 f4       	brne	.+56     	; 0x6484 <realloc+0x182>
    644c:	66 16       	cp	r6, r22
    644e:	77 06       	cpc	r7, r23
    6450:	c8 f4       	brcc	.+50     	; 0x6484 <realloc+0x182>
    6452:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    6456:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    645a:	00 97       	sbiw	r24, 0x00	; 0
    645c:	41 f4       	brne	.+16     	; 0x646e <realloc+0x16c>
    645e:	8d b7       	in	r24, 0x3d	; 61
    6460:	9e b7       	in	r25, 0x3e	; 62
    6462:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6466:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    646a:	84 1b       	sub	r24, r20
    646c:	95 0b       	sbc	r25, r21
    646e:	e8 17       	cp	r30, r24
    6470:	f9 07       	cpc	r31, r25
    6472:	b0 f4       	brcc	.+44     	; 0x64a0 <realloc+0x19e>
    6474:	f0 93 13 0c 	sts	0x0C13, r31	; 0x800c13 <__brkval+0x1>
    6478:	e0 93 12 0c 	sts	0x0C12, r30	; 0x800c12 <__brkval>
    647c:	f9 01       	movw	r30, r18
    647e:	71 83       	std	Z+1, r23	; 0x01
    6480:	60 83       	st	Z, r22
    6482:	0c c0       	rjmp	.+24     	; 0x649c <realloc+0x19a>
    6484:	cb 01       	movw	r24, r22
    6486:	80 dd       	rcall	.-1280   	; 0x5f88 <malloc>
    6488:	7c 01       	movw	r14, r24
    648a:	00 97       	sbiw	r24, 0x00	; 0
    648c:	49 f0       	breq	.+18     	; 0x64a0 <realloc+0x19e>
    648e:	a8 01       	movw	r20, r16
    6490:	be 01       	movw	r22, r28
    6492:	24 d0       	rcall	.+72     	; 0x64dc <memcpy>
    6494:	ce 01       	movw	r24, r28
    6496:	10 de       	rcall	.-992    	; 0x60b8 <free>
    6498:	c7 01       	movw	r24, r14
    649a:	04 c0       	rjmp	.+8      	; 0x64a4 <realloc+0x1a2>
    649c:	ce 01       	movw	r24, r28
    649e:	02 c0       	rjmp	.+4      	; 0x64a4 <realloc+0x1a2>
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	df 91       	pop	r29
    64a6:	cf 91       	pop	r28
    64a8:	1f 91       	pop	r17
    64aa:	0f 91       	pop	r16
    64ac:	ff 90       	pop	r15
    64ae:	ef 90       	pop	r14
    64b0:	df 90       	pop	r13
    64b2:	cf 90       	pop	r12
    64b4:	bf 90       	pop	r11
    64b6:	af 90       	pop	r10
    64b8:	9f 90       	pop	r9
    64ba:	8f 90       	pop	r8
    64bc:	7f 90       	pop	r7
    64be:	6f 90       	pop	r6
    64c0:	08 95       	ret

000064c2 <memcmp>:
    64c2:	fb 01       	movw	r30, r22
    64c4:	dc 01       	movw	r26, r24
    64c6:	04 c0       	rjmp	.+8      	; 0x64d0 <memcmp+0xe>
    64c8:	8d 91       	ld	r24, X+
    64ca:	01 90       	ld	r0, Z+
    64cc:	80 19       	sub	r24, r0
    64ce:	21 f4       	brne	.+8      	; 0x64d8 <memcmp+0x16>
    64d0:	41 50       	subi	r20, 0x01	; 1
    64d2:	50 40       	sbci	r21, 0x00	; 0
    64d4:	c8 f7       	brcc	.-14     	; 0x64c8 <memcmp+0x6>
    64d6:	88 1b       	sub	r24, r24
    64d8:	99 0b       	sbc	r25, r25
    64da:	08 95       	ret

000064dc <memcpy>:
    64dc:	fb 01       	movw	r30, r22
    64de:	dc 01       	movw	r26, r24
    64e0:	02 c0       	rjmp	.+4      	; 0x64e6 <memcpy+0xa>
    64e2:	01 90       	ld	r0, Z+
    64e4:	0d 92       	st	X+, r0
    64e6:	41 50       	subi	r20, 0x01	; 1
    64e8:	50 40       	sbci	r21, 0x00	; 0
    64ea:	d8 f7       	brcc	.-10     	; 0x64e2 <memcpy+0x6>
    64ec:	08 95       	ret

000064ee <strchr>:
    64ee:	fc 01       	movw	r30, r24
    64f0:	81 91       	ld	r24, Z+
    64f2:	86 17       	cp	r24, r22
    64f4:	21 f0       	breq	.+8      	; 0x64fe <strchr+0x10>
    64f6:	88 23       	and	r24, r24
    64f8:	d9 f7       	brne	.-10     	; 0x64f0 <strchr+0x2>
    64fa:	99 27       	eor	r25, r25
    64fc:	08 95       	ret
    64fe:	31 97       	sbiw	r30, 0x01	; 1
    6500:	cf 01       	movw	r24, r30
    6502:	08 95       	ret

00006504 <strcpy>:
    6504:	fb 01       	movw	r30, r22
    6506:	dc 01       	movw	r26, r24
    6508:	01 90       	ld	r0, Z+
    650a:	0d 92       	st	X+, r0
    650c:	00 20       	and	r0, r0
    650e:	e1 f7       	brne	.-8      	; 0x6508 <strcpy+0x4>
    6510:	08 95       	ret

00006512 <strncpy>:
    6512:	fb 01       	movw	r30, r22
    6514:	dc 01       	movw	r26, r24
    6516:	41 50       	subi	r20, 0x01	; 1
    6518:	50 40       	sbci	r21, 0x00	; 0
    651a:	48 f0       	brcs	.+18     	; 0x652e <strncpy+0x1c>
    651c:	01 90       	ld	r0, Z+
    651e:	0d 92       	st	X+, r0
    6520:	00 20       	and	r0, r0
    6522:	c9 f7       	brne	.-14     	; 0x6516 <strncpy+0x4>
    6524:	01 c0       	rjmp	.+2      	; 0x6528 <strncpy+0x16>
    6526:	1d 92       	st	X+, r1
    6528:	41 50       	subi	r20, 0x01	; 1
    652a:	50 40       	sbci	r21, 0x00	; 0
    652c:	e0 f7       	brcc	.-8      	; 0x6526 <strncpy+0x14>
    652e:	08 95       	ret

00006530 <itoa>:
    6530:	45 32       	cpi	r20, 0x25	; 37
    6532:	51 05       	cpc	r21, r1
    6534:	18 f4       	brcc	.+6      	; 0x653c <itoa+0xc>
    6536:	42 30       	cpi	r20, 0x02	; 2
    6538:	08 f0       	brcs	.+2      	; 0x653c <itoa+0xc>
    653a:	04 c0       	rjmp	.+8      	; 0x6544 <__itoa_ncheck>
    653c:	fb 01       	movw	r30, r22
    653e:	10 82       	st	Z, r1
    6540:	cb 01       	movw	r24, r22
    6542:	08 95       	ret

00006544 <__itoa_ncheck>:
    6544:	bb 27       	eor	r27, r27
    6546:	4a 30       	cpi	r20, 0x0A	; 10
    6548:	31 f4       	brne	.+12     	; 0x6556 <__itoa_ncheck+0x12>
    654a:	99 23       	and	r25, r25
    654c:	22 f4       	brpl	.+8      	; 0x6556 <__itoa_ncheck+0x12>
    654e:	bd e2       	ldi	r27, 0x2D	; 45
    6550:	90 95       	com	r25
    6552:	81 95       	neg	r24
    6554:	9f 4f       	sbci	r25, 0xFF	; 255
    6556:	2c c0       	rjmp	.+88     	; 0x65b0 <__utoa_common>

00006558 <ultoa>:
    6558:	25 32       	cpi	r18, 0x25	; 37
    655a:	31 05       	cpc	r19, r1
    655c:	18 f4       	brcc	.+6      	; 0x6564 <ultoa+0xc>
    655e:	22 30       	cpi	r18, 0x02	; 2
    6560:	08 f0       	brcs	.+2      	; 0x6564 <ultoa+0xc>
    6562:	04 c0       	rjmp	.+8      	; 0x656c <__ultoa_ncheck>
    6564:	fa 01       	movw	r30, r20
    6566:	10 82       	st	Z, r1
    6568:	ca 01       	movw	r24, r20
    656a:	08 95       	ret

0000656c <__ultoa_ncheck>:
    656c:	bb 27       	eor	r27, r27

0000656e <__ultoa_common>:
    656e:	fa 01       	movw	r30, r20
    6570:	a6 2f       	mov	r26, r22
    6572:	62 17       	cp	r22, r18
    6574:	71 05       	cpc	r23, r1
    6576:	81 05       	cpc	r24, r1
    6578:	91 05       	cpc	r25, r1
    657a:	33 0b       	sbc	r19, r19
    657c:	30 fb       	bst	r19, 0
    657e:	66 f0       	brts	.+24     	; 0x6598 <__ultoa_common+0x2a>
    6580:	aa 27       	eor	r26, r26
    6582:	66 0f       	add	r22, r22
    6584:	77 1f       	adc	r23, r23
    6586:	88 1f       	adc	r24, r24
    6588:	99 1f       	adc	r25, r25
    658a:	aa 1f       	adc	r26, r26
    658c:	a2 17       	cp	r26, r18
    658e:	10 f0       	brcs	.+4      	; 0x6594 <__ultoa_common+0x26>
    6590:	a2 1b       	sub	r26, r18
    6592:	63 95       	inc	r22
    6594:	38 50       	subi	r19, 0x08	; 8
    6596:	a9 f7       	brne	.-22     	; 0x6582 <__ultoa_common+0x14>
    6598:	a0 5d       	subi	r26, 0xD0	; 208
    659a:	aa 33       	cpi	r26, 0x3A	; 58
    659c:	08 f0       	brcs	.+2      	; 0x65a0 <__ultoa_common+0x32>
    659e:	a9 5d       	subi	r26, 0xD9	; 217
    65a0:	a1 93       	st	Z+, r26
    65a2:	36 f7       	brtc	.-52     	; 0x6570 <__ultoa_common+0x2>
    65a4:	b1 11       	cpse	r27, r1
    65a6:	b1 93       	st	Z+, r27
    65a8:	10 82       	st	Z, r1
    65aa:	ca 01       	movw	r24, r20
    65ac:	5a c2       	rjmp	.+1204   	; 0x6a62 <strrev>

000065ae <__utoa_ncheck>:
    65ae:	bb 27       	eor	r27, r27

000065b0 <__utoa_common>:
    65b0:	fb 01       	movw	r30, r22
    65b2:	55 27       	eor	r21, r21
    65b4:	aa 27       	eor	r26, r26
    65b6:	88 0f       	add	r24, r24
    65b8:	99 1f       	adc	r25, r25
    65ba:	aa 1f       	adc	r26, r26
    65bc:	a4 17       	cp	r26, r20
    65be:	10 f0       	brcs	.+4      	; 0x65c4 <__utoa_common+0x14>
    65c0:	a4 1b       	sub	r26, r20
    65c2:	83 95       	inc	r24
    65c4:	50 51       	subi	r21, 0x10	; 16
    65c6:	b9 f7       	brne	.-18     	; 0x65b6 <__utoa_common+0x6>
    65c8:	a0 5d       	subi	r26, 0xD0	; 208
    65ca:	aa 33       	cpi	r26, 0x3A	; 58
    65cc:	08 f0       	brcs	.+2      	; 0x65d0 <__utoa_common+0x20>
    65ce:	a9 5d       	subi	r26, 0xD9	; 217
    65d0:	a1 93       	st	Z+, r26
    65d2:	00 97       	sbiw	r24, 0x00	; 0
    65d4:	79 f7       	brne	.-34     	; 0x65b4 <__utoa_common+0x4>
    65d6:	b1 11       	cpse	r27, r1
    65d8:	b1 93       	st	Z+, r27
    65da:	11 92       	st	Z+, r1
    65dc:	cb 01       	movw	r24, r22
    65de:	41 c2       	rjmp	.+1154   	; 0x6a62 <strrev>

000065e0 <sprintf>:
    65e0:	0f 93       	push	r16
    65e2:	1f 93       	push	r17
    65e4:	cf 93       	push	r28
    65e6:	df 93       	push	r29
    65e8:	cd b7       	in	r28, 0x3d	; 61
    65ea:	de b7       	in	r29, 0x3e	; 62
    65ec:	2e 97       	sbiw	r28, 0x0e	; 14
    65ee:	0f b6       	in	r0, 0x3f	; 63
    65f0:	f8 94       	cli
    65f2:	de bf       	out	0x3e, r29	; 62
    65f4:	0f be       	out	0x3f, r0	; 63
    65f6:	cd bf       	out	0x3d, r28	; 61
    65f8:	0e 89       	ldd	r16, Y+22	; 0x16
    65fa:	1f 89       	ldd	r17, Y+23	; 0x17
    65fc:	86 e0       	ldi	r24, 0x06	; 6
    65fe:	8c 83       	std	Y+4, r24	; 0x04
    6600:	1a 83       	std	Y+2, r17	; 0x02
    6602:	09 83       	std	Y+1, r16	; 0x01
    6604:	8f ef       	ldi	r24, 0xFF	; 255
    6606:	9f e7       	ldi	r25, 0x7F	; 127
    6608:	9e 83       	std	Y+6, r25	; 0x06
    660a:	8d 83       	std	Y+5, r24	; 0x05
    660c:	ae 01       	movw	r20, r28
    660e:	46 5e       	subi	r20, 0xE6	; 230
    6610:	5f 4f       	sbci	r21, 0xFF	; 255
    6612:	68 8d       	ldd	r22, Y+24	; 0x18
    6614:	79 8d       	ldd	r23, Y+25	; 0x19
    6616:	ce 01       	movw	r24, r28
    6618:	01 96       	adiw	r24, 0x01	; 1
    661a:	10 d0       	rcall	.+32     	; 0x663c <vfprintf>
    661c:	ef 81       	ldd	r30, Y+7	; 0x07
    661e:	f8 85       	ldd	r31, Y+8	; 0x08
    6620:	e0 0f       	add	r30, r16
    6622:	f1 1f       	adc	r31, r17
    6624:	10 82       	st	Z, r1
    6626:	2e 96       	adiw	r28, 0x0e	; 14
    6628:	0f b6       	in	r0, 0x3f	; 63
    662a:	f8 94       	cli
    662c:	de bf       	out	0x3e, r29	; 62
    662e:	0f be       	out	0x3f, r0	; 63
    6630:	cd bf       	out	0x3d, r28	; 61
    6632:	df 91       	pop	r29
    6634:	cf 91       	pop	r28
    6636:	1f 91       	pop	r17
    6638:	0f 91       	pop	r16
    663a:	08 95       	ret

0000663c <vfprintf>:
    663c:	2f 92       	push	r2
    663e:	3f 92       	push	r3
    6640:	4f 92       	push	r4
    6642:	5f 92       	push	r5
    6644:	6f 92       	push	r6
    6646:	7f 92       	push	r7
    6648:	8f 92       	push	r8
    664a:	9f 92       	push	r9
    664c:	af 92       	push	r10
    664e:	bf 92       	push	r11
    6650:	cf 92       	push	r12
    6652:	df 92       	push	r13
    6654:	ef 92       	push	r14
    6656:	ff 92       	push	r15
    6658:	0f 93       	push	r16
    665a:	1f 93       	push	r17
    665c:	cf 93       	push	r28
    665e:	df 93       	push	r29
    6660:	cd b7       	in	r28, 0x3d	; 61
    6662:	de b7       	in	r29, 0x3e	; 62
    6664:	2b 97       	sbiw	r28, 0x0b	; 11
    6666:	0f b6       	in	r0, 0x3f	; 63
    6668:	f8 94       	cli
    666a:	de bf       	out	0x3e, r29	; 62
    666c:	0f be       	out	0x3f, r0	; 63
    666e:	cd bf       	out	0x3d, r28	; 61
    6670:	6c 01       	movw	r12, r24
    6672:	7b 01       	movw	r14, r22
    6674:	8a 01       	movw	r16, r20
    6676:	fc 01       	movw	r30, r24
    6678:	17 82       	std	Z+7, r1	; 0x07
    667a:	16 82       	std	Z+6, r1	; 0x06
    667c:	83 81       	ldd	r24, Z+3	; 0x03
    667e:	81 ff       	sbrs	r24, 1
    6680:	bf c1       	rjmp	.+894    	; 0x6a00 <vfprintf+0x3c4>
    6682:	ce 01       	movw	r24, r28
    6684:	01 96       	adiw	r24, 0x01	; 1
    6686:	3c 01       	movw	r6, r24
    6688:	f6 01       	movw	r30, r12
    668a:	93 81       	ldd	r25, Z+3	; 0x03
    668c:	f7 01       	movw	r30, r14
    668e:	93 fd       	sbrc	r25, 3
    6690:	85 91       	lpm	r24, Z+
    6692:	93 ff       	sbrs	r25, 3
    6694:	81 91       	ld	r24, Z+
    6696:	7f 01       	movw	r14, r30
    6698:	88 23       	and	r24, r24
    669a:	09 f4       	brne	.+2      	; 0x669e <vfprintf+0x62>
    669c:	ad c1       	rjmp	.+858    	; 0x69f8 <vfprintf+0x3bc>
    669e:	85 32       	cpi	r24, 0x25	; 37
    66a0:	39 f4       	brne	.+14     	; 0x66b0 <vfprintf+0x74>
    66a2:	93 fd       	sbrc	r25, 3
    66a4:	85 91       	lpm	r24, Z+
    66a6:	93 ff       	sbrs	r25, 3
    66a8:	81 91       	ld	r24, Z+
    66aa:	7f 01       	movw	r14, r30
    66ac:	85 32       	cpi	r24, 0x25	; 37
    66ae:	21 f4       	brne	.+8      	; 0x66b8 <vfprintf+0x7c>
    66b0:	b6 01       	movw	r22, r12
    66b2:	90 e0       	ldi	r25, 0x00	; 0
    66b4:	e6 d1       	rcall	.+972    	; 0x6a82 <fputc>
    66b6:	e8 cf       	rjmp	.-48     	; 0x6688 <vfprintf+0x4c>
    66b8:	91 2c       	mov	r9, r1
    66ba:	21 2c       	mov	r2, r1
    66bc:	31 2c       	mov	r3, r1
    66be:	ff e1       	ldi	r31, 0x1F	; 31
    66c0:	f3 15       	cp	r31, r3
    66c2:	d8 f0       	brcs	.+54     	; 0x66fa <vfprintf+0xbe>
    66c4:	8b 32       	cpi	r24, 0x2B	; 43
    66c6:	79 f0       	breq	.+30     	; 0x66e6 <vfprintf+0xaa>
    66c8:	38 f4       	brcc	.+14     	; 0x66d8 <vfprintf+0x9c>
    66ca:	80 32       	cpi	r24, 0x20	; 32
    66cc:	79 f0       	breq	.+30     	; 0x66ec <vfprintf+0xb0>
    66ce:	83 32       	cpi	r24, 0x23	; 35
    66d0:	a1 f4       	brne	.+40     	; 0x66fa <vfprintf+0xbe>
    66d2:	23 2d       	mov	r18, r3
    66d4:	20 61       	ori	r18, 0x10	; 16
    66d6:	1d c0       	rjmp	.+58     	; 0x6712 <vfprintf+0xd6>
    66d8:	8d 32       	cpi	r24, 0x2D	; 45
    66da:	61 f0       	breq	.+24     	; 0x66f4 <vfprintf+0xb8>
    66dc:	80 33       	cpi	r24, 0x30	; 48
    66de:	69 f4       	brne	.+26     	; 0x66fa <vfprintf+0xbe>
    66e0:	23 2d       	mov	r18, r3
    66e2:	21 60       	ori	r18, 0x01	; 1
    66e4:	16 c0       	rjmp	.+44     	; 0x6712 <vfprintf+0xd6>
    66e6:	83 2d       	mov	r24, r3
    66e8:	82 60       	ori	r24, 0x02	; 2
    66ea:	38 2e       	mov	r3, r24
    66ec:	e3 2d       	mov	r30, r3
    66ee:	e4 60       	ori	r30, 0x04	; 4
    66f0:	3e 2e       	mov	r3, r30
    66f2:	2a c0       	rjmp	.+84     	; 0x6748 <vfprintf+0x10c>
    66f4:	f3 2d       	mov	r31, r3
    66f6:	f8 60       	ori	r31, 0x08	; 8
    66f8:	1d c0       	rjmp	.+58     	; 0x6734 <vfprintf+0xf8>
    66fa:	37 fc       	sbrc	r3, 7
    66fc:	2d c0       	rjmp	.+90     	; 0x6758 <vfprintf+0x11c>
    66fe:	20 ed       	ldi	r18, 0xD0	; 208
    6700:	28 0f       	add	r18, r24
    6702:	2a 30       	cpi	r18, 0x0A	; 10
    6704:	40 f0       	brcs	.+16     	; 0x6716 <vfprintf+0xda>
    6706:	8e 32       	cpi	r24, 0x2E	; 46
    6708:	b9 f4       	brne	.+46     	; 0x6738 <vfprintf+0xfc>
    670a:	36 fc       	sbrc	r3, 6
    670c:	75 c1       	rjmp	.+746    	; 0x69f8 <vfprintf+0x3bc>
    670e:	23 2d       	mov	r18, r3
    6710:	20 64       	ori	r18, 0x40	; 64
    6712:	32 2e       	mov	r3, r18
    6714:	19 c0       	rjmp	.+50     	; 0x6748 <vfprintf+0x10c>
    6716:	36 fe       	sbrs	r3, 6
    6718:	06 c0       	rjmp	.+12     	; 0x6726 <vfprintf+0xea>
    671a:	8a e0       	ldi	r24, 0x0A	; 10
    671c:	98 9e       	mul	r9, r24
    671e:	20 0d       	add	r18, r0
    6720:	11 24       	eor	r1, r1
    6722:	92 2e       	mov	r9, r18
    6724:	11 c0       	rjmp	.+34     	; 0x6748 <vfprintf+0x10c>
    6726:	ea e0       	ldi	r30, 0x0A	; 10
    6728:	2e 9e       	mul	r2, r30
    672a:	20 0d       	add	r18, r0
    672c:	11 24       	eor	r1, r1
    672e:	22 2e       	mov	r2, r18
    6730:	f3 2d       	mov	r31, r3
    6732:	f0 62       	ori	r31, 0x20	; 32
    6734:	3f 2e       	mov	r3, r31
    6736:	08 c0       	rjmp	.+16     	; 0x6748 <vfprintf+0x10c>
    6738:	8c 36       	cpi	r24, 0x6C	; 108
    673a:	21 f4       	brne	.+8      	; 0x6744 <vfprintf+0x108>
    673c:	83 2d       	mov	r24, r3
    673e:	80 68       	ori	r24, 0x80	; 128
    6740:	38 2e       	mov	r3, r24
    6742:	02 c0       	rjmp	.+4      	; 0x6748 <vfprintf+0x10c>
    6744:	88 36       	cpi	r24, 0x68	; 104
    6746:	41 f4       	brne	.+16     	; 0x6758 <vfprintf+0x11c>
    6748:	f7 01       	movw	r30, r14
    674a:	93 fd       	sbrc	r25, 3
    674c:	85 91       	lpm	r24, Z+
    674e:	93 ff       	sbrs	r25, 3
    6750:	81 91       	ld	r24, Z+
    6752:	7f 01       	movw	r14, r30
    6754:	81 11       	cpse	r24, r1
    6756:	b3 cf       	rjmp	.-154    	; 0x66be <vfprintf+0x82>
    6758:	98 2f       	mov	r25, r24
    675a:	9f 7d       	andi	r25, 0xDF	; 223
    675c:	95 54       	subi	r25, 0x45	; 69
    675e:	93 30       	cpi	r25, 0x03	; 3
    6760:	28 f4       	brcc	.+10     	; 0x676c <vfprintf+0x130>
    6762:	0c 5f       	subi	r16, 0xFC	; 252
    6764:	1f 4f       	sbci	r17, 0xFF	; 255
    6766:	9f e3       	ldi	r25, 0x3F	; 63
    6768:	99 83       	std	Y+1, r25	; 0x01
    676a:	0d c0       	rjmp	.+26     	; 0x6786 <vfprintf+0x14a>
    676c:	83 36       	cpi	r24, 0x63	; 99
    676e:	31 f0       	breq	.+12     	; 0x677c <vfprintf+0x140>
    6770:	83 37       	cpi	r24, 0x73	; 115
    6772:	71 f0       	breq	.+28     	; 0x6790 <vfprintf+0x154>
    6774:	83 35       	cpi	r24, 0x53	; 83
    6776:	09 f0       	breq	.+2      	; 0x677a <vfprintf+0x13e>
    6778:	55 c0       	rjmp	.+170    	; 0x6824 <vfprintf+0x1e8>
    677a:	20 c0       	rjmp	.+64     	; 0x67bc <vfprintf+0x180>
    677c:	f8 01       	movw	r30, r16
    677e:	80 81       	ld	r24, Z
    6780:	89 83       	std	Y+1, r24	; 0x01
    6782:	0e 5f       	subi	r16, 0xFE	; 254
    6784:	1f 4f       	sbci	r17, 0xFF	; 255
    6786:	88 24       	eor	r8, r8
    6788:	83 94       	inc	r8
    678a:	91 2c       	mov	r9, r1
    678c:	53 01       	movw	r10, r6
    678e:	12 c0       	rjmp	.+36     	; 0x67b4 <vfprintf+0x178>
    6790:	28 01       	movw	r4, r16
    6792:	f2 e0       	ldi	r31, 0x02	; 2
    6794:	4f 0e       	add	r4, r31
    6796:	51 1c       	adc	r5, r1
    6798:	f8 01       	movw	r30, r16
    679a:	a0 80       	ld	r10, Z
    679c:	b1 80       	ldd	r11, Z+1	; 0x01
    679e:	36 fe       	sbrs	r3, 6
    67a0:	03 c0       	rjmp	.+6      	; 0x67a8 <vfprintf+0x16c>
    67a2:	69 2d       	mov	r22, r9
    67a4:	70 e0       	ldi	r23, 0x00	; 0
    67a6:	02 c0       	rjmp	.+4      	; 0x67ac <vfprintf+0x170>
    67a8:	6f ef       	ldi	r22, 0xFF	; 255
    67aa:	7f ef       	ldi	r23, 0xFF	; 255
    67ac:	c5 01       	movw	r24, r10
    67ae:	4e d1       	rcall	.+668    	; 0x6a4c <strnlen>
    67b0:	4c 01       	movw	r8, r24
    67b2:	82 01       	movw	r16, r4
    67b4:	f3 2d       	mov	r31, r3
    67b6:	ff 77       	andi	r31, 0x7F	; 127
    67b8:	3f 2e       	mov	r3, r31
    67ba:	15 c0       	rjmp	.+42     	; 0x67e6 <vfprintf+0x1aa>
    67bc:	28 01       	movw	r4, r16
    67be:	22 e0       	ldi	r18, 0x02	; 2
    67c0:	42 0e       	add	r4, r18
    67c2:	51 1c       	adc	r5, r1
    67c4:	f8 01       	movw	r30, r16
    67c6:	a0 80       	ld	r10, Z
    67c8:	b1 80       	ldd	r11, Z+1	; 0x01
    67ca:	36 fe       	sbrs	r3, 6
    67cc:	03 c0       	rjmp	.+6      	; 0x67d4 <vfprintf+0x198>
    67ce:	69 2d       	mov	r22, r9
    67d0:	70 e0       	ldi	r23, 0x00	; 0
    67d2:	02 c0       	rjmp	.+4      	; 0x67d8 <vfprintf+0x19c>
    67d4:	6f ef       	ldi	r22, 0xFF	; 255
    67d6:	7f ef       	ldi	r23, 0xFF	; 255
    67d8:	c5 01       	movw	r24, r10
    67da:	2d d1       	rcall	.+602    	; 0x6a36 <strnlen_P>
    67dc:	4c 01       	movw	r8, r24
    67de:	f3 2d       	mov	r31, r3
    67e0:	f0 68       	ori	r31, 0x80	; 128
    67e2:	3f 2e       	mov	r3, r31
    67e4:	82 01       	movw	r16, r4
    67e6:	33 fc       	sbrc	r3, 3
    67e8:	19 c0       	rjmp	.+50     	; 0x681c <vfprintf+0x1e0>
    67ea:	82 2d       	mov	r24, r2
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	88 16       	cp	r8, r24
    67f0:	99 06       	cpc	r9, r25
    67f2:	a0 f4       	brcc	.+40     	; 0x681c <vfprintf+0x1e0>
    67f4:	b6 01       	movw	r22, r12
    67f6:	80 e2       	ldi	r24, 0x20	; 32
    67f8:	90 e0       	ldi	r25, 0x00	; 0
    67fa:	43 d1       	rcall	.+646    	; 0x6a82 <fputc>
    67fc:	2a 94       	dec	r2
    67fe:	f5 cf       	rjmp	.-22     	; 0x67ea <vfprintf+0x1ae>
    6800:	f5 01       	movw	r30, r10
    6802:	37 fc       	sbrc	r3, 7
    6804:	85 91       	lpm	r24, Z+
    6806:	37 fe       	sbrs	r3, 7
    6808:	81 91       	ld	r24, Z+
    680a:	5f 01       	movw	r10, r30
    680c:	b6 01       	movw	r22, r12
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	38 d1       	rcall	.+624    	; 0x6a82 <fputc>
    6812:	21 10       	cpse	r2, r1
    6814:	2a 94       	dec	r2
    6816:	21 e0       	ldi	r18, 0x01	; 1
    6818:	82 1a       	sub	r8, r18
    681a:	91 08       	sbc	r9, r1
    681c:	81 14       	cp	r8, r1
    681e:	91 04       	cpc	r9, r1
    6820:	79 f7       	brne	.-34     	; 0x6800 <vfprintf+0x1c4>
    6822:	e1 c0       	rjmp	.+450    	; 0x69e6 <vfprintf+0x3aa>
    6824:	84 36       	cpi	r24, 0x64	; 100
    6826:	11 f0       	breq	.+4      	; 0x682c <vfprintf+0x1f0>
    6828:	89 36       	cpi	r24, 0x69	; 105
    682a:	39 f5       	brne	.+78     	; 0x687a <vfprintf+0x23e>
    682c:	f8 01       	movw	r30, r16
    682e:	37 fe       	sbrs	r3, 7
    6830:	07 c0       	rjmp	.+14     	; 0x6840 <vfprintf+0x204>
    6832:	60 81       	ld	r22, Z
    6834:	71 81       	ldd	r23, Z+1	; 0x01
    6836:	82 81       	ldd	r24, Z+2	; 0x02
    6838:	93 81       	ldd	r25, Z+3	; 0x03
    683a:	0c 5f       	subi	r16, 0xFC	; 252
    683c:	1f 4f       	sbci	r17, 0xFF	; 255
    683e:	08 c0       	rjmp	.+16     	; 0x6850 <vfprintf+0x214>
    6840:	60 81       	ld	r22, Z
    6842:	71 81       	ldd	r23, Z+1	; 0x01
    6844:	07 2e       	mov	r0, r23
    6846:	00 0c       	add	r0, r0
    6848:	88 0b       	sbc	r24, r24
    684a:	99 0b       	sbc	r25, r25
    684c:	0e 5f       	subi	r16, 0xFE	; 254
    684e:	1f 4f       	sbci	r17, 0xFF	; 255
    6850:	f3 2d       	mov	r31, r3
    6852:	ff 76       	andi	r31, 0x6F	; 111
    6854:	3f 2e       	mov	r3, r31
    6856:	97 ff       	sbrs	r25, 7
    6858:	09 c0       	rjmp	.+18     	; 0x686c <vfprintf+0x230>
    685a:	90 95       	com	r25
    685c:	80 95       	com	r24
    685e:	70 95       	com	r23
    6860:	61 95       	neg	r22
    6862:	7f 4f       	sbci	r23, 0xFF	; 255
    6864:	8f 4f       	sbci	r24, 0xFF	; 255
    6866:	9f 4f       	sbci	r25, 0xFF	; 255
    6868:	f0 68       	ori	r31, 0x80	; 128
    686a:	3f 2e       	mov	r3, r31
    686c:	2a e0       	ldi	r18, 0x0A	; 10
    686e:	30 e0       	ldi	r19, 0x00	; 0
    6870:	a3 01       	movw	r20, r6
    6872:	43 d1       	rcall	.+646    	; 0x6afa <__ultoa_invert>
    6874:	88 2e       	mov	r8, r24
    6876:	86 18       	sub	r8, r6
    6878:	44 c0       	rjmp	.+136    	; 0x6902 <vfprintf+0x2c6>
    687a:	85 37       	cpi	r24, 0x75	; 117
    687c:	31 f4       	brne	.+12     	; 0x688a <vfprintf+0x24e>
    687e:	23 2d       	mov	r18, r3
    6880:	2f 7e       	andi	r18, 0xEF	; 239
    6882:	b2 2e       	mov	r11, r18
    6884:	2a e0       	ldi	r18, 0x0A	; 10
    6886:	30 e0       	ldi	r19, 0x00	; 0
    6888:	25 c0       	rjmp	.+74     	; 0x68d4 <vfprintf+0x298>
    688a:	93 2d       	mov	r25, r3
    688c:	99 7f       	andi	r25, 0xF9	; 249
    688e:	b9 2e       	mov	r11, r25
    6890:	8f 36       	cpi	r24, 0x6F	; 111
    6892:	c1 f0       	breq	.+48     	; 0x68c4 <vfprintf+0x288>
    6894:	18 f4       	brcc	.+6      	; 0x689c <vfprintf+0x260>
    6896:	88 35       	cpi	r24, 0x58	; 88
    6898:	79 f0       	breq	.+30     	; 0x68b8 <vfprintf+0x27c>
    689a:	ae c0       	rjmp	.+348    	; 0x69f8 <vfprintf+0x3bc>
    689c:	80 37       	cpi	r24, 0x70	; 112
    689e:	19 f0       	breq	.+6      	; 0x68a6 <vfprintf+0x26a>
    68a0:	88 37       	cpi	r24, 0x78	; 120
    68a2:	21 f0       	breq	.+8      	; 0x68ac <vfprintf+0x270>
    68a4:	a9 c0       	rjmp	.+338    	; 0x69f8 <vfprintf+0x3bc>
    68a6:	e9 2f       	mov	r30, r25
    68a8:	e0 61       	ori	r30, 0x10	; 16
    68aa:	be 2e       	mov	r11, r30
    68ac:	b4 fe       	sbrs	r11, 4
    68ae:	0d c0       	rjmp	.+26     	; 0x68ca <vfprintf+0x28e>
    68b0:	fb 2d       	mov	r31, r11
    68b2:	f4 60       	ori	r31, 0x04	; 4
    68b4:	bf 2e       	mov	r11, r31
    68b6:	09 c0       	rjmp	.+18     	; 0x68ca <vfprintf+0x28e>
    68b8:	34 fe       	sbrs	r3, 4
    68ba:	0a c0       	rjmp	.+20     	; 0x68d0 <vfprintf+0x294>
    68bc:	29 2f       	mov	r18, r25
    68be:	26 60       	ori	r18, 0x06	; 6
    68c0:	b2 2e       	mov	r11, r18
    68c2:	06 c0       	rjmp	.+12     	; 0x68d0 <vfprintf+0x294>
    68c4:	28 e0       	ldi	r18, 0x08	; 8
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	05 c0       	rjmp	.+10     	; 0x68d4 <vfprintf+0x298>
    68ca:	20 e1       	ldi	r18, 0x10	; 16
    68cc:	30 e0       	ldi	r19, 0x00	; 0
    68ce:	02 c0       	rjmp	.+4      	; 0x68d4 <vfprintf+0x298>
    68d0:	20 e1       	ldi	r18, 0x10	; 16
    68d2:	32 e0       	ldi	r19, 0x02	; 2
    68d4:	f8 01       	movw	r30, r16
    68d6:	b7 fe       	sbrs	r11, 7
    68d8:	07 c0       	rjmp	.+14     	; 0x68e8 <vfprintf+0x2ac>
    68da:	60 81       	ld	r22, Z
    68dc:	71 81       	ldd	r23, Z+1	; 0x01
    68de:	82 81       	ldd	r24, Z+2	; 0x02
    68e0:	93 81       	ldd	r25, Z+3	; 0x03
    68e2:	0c 5f       	subi	r16, 0xFC	; 252
    68e4:	1f 4f       	sbci	r17, 0xFF	; 255
    68e6:	06 c0       	rjmp	.+12     	; 0x68f4 <vfprintf+0x2b8>
    68e8:	60 81       	ld	r22, Z
    68ea:	71 81       	ldd	r23, Z+1	; 0x01
    68ec:	80 e0       	ldi	r24, 0x00	; 0
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	0e 5f       	subi	r16, 0xFE	; 254
    68f2:	1f 4f       	sbci	r17, 0xFF	; 255
    68f4:	a3 01       	movw	r20, r6
    68f6:	01 d1       	rcall	.+514    	; 0x6afa <__ultoa_invert>
    68f8:	88 2e       	mov	r8, r24
    68fa:	86 18       	sub	r8, r6
    68fc:	fb 2d       	mov	r31, r11
    68fe:	ff 77       	andi	r31, 0x7F	; 127
    6900:	3f 2e       	mov	r3, r31
    6902:	36 fe       	sbrs	r3, 6
    6904:	0d c0       	rjmp	.+26     	; 0x6920 <vfprintf+0x2e4>
    6906:	23 2d       	mov	r18, r3
    6908:	2e 7f       	andi	r18, 0xFE	; 254
    690a:	a2 2e       	mov	r10, r18
    690c:	89 14       	cp	r8, r9
    690e:	58 f4       	brcc	.+22     	; 0x6926 <vfprintf+0x2ea>
    6910:	34 fe       	sbrs	r3, 4
    6912:	0b c0       	rjmp	.+22     	; 0x692a <vfprintf+0x2ee>
    6914:	32 fc       	sbrc	r3, 2
    6916:	09 c0       	rjmp	.+18     	; 0x692a <vfprintf+0x2ee>
    6918:	83 2d       	mov	r24, r3
    691a:	8e 7e       	andi	r24, 0xEE	; 238
    691c:	a8 2e       	mov	r10, r24
    691e:	05 c0       	rjmp	.+10     	; 0x692a <vfprintf+0x2ee>
    6920:	b8 2c       	mov	r11, r8
    6922:	a3 2c       	mov	r10, r3
    6924:	03 c0       	rjmp	.+6      	; 0x692c <vfprintf+0x2f0>
    6926:	b8 2c       	mov	r11, r8
    6928:	01 c0       	rjmp	.+2      	; 0x692c <vfprintf+0x2f0>
    692a:	b9 2c       	mov	r11, r9
    692c:	a4 fe       	sbrs	r10, 4
    692e:	0f c0       	rjmp	.+30     	; 0x694e <vfprintf+0x312>
    6930:	fe 01       	movw	r30, r28
    6932:	e8 0d       	add	r30, r8
    6934:	f1 1d       	adc	r31, r1
    6936:	80 81       	ld	r24, Z
    6938:	80 33       	cpi	r24, 0x30	; 48
    693a:	21 f4       	brne	.+8      	; 0x6944 <vfprintf+0x308>
    693c:	9a 2d       	mov	r25, r10
    693e:	99 7e       	andi	r25, 0xE9	; 233
    6940:	a9 2e       	mov	r10, r25
    6942:	09 c0       	rjmp	.+18     	; 0x6956 <vfprintf+0x31a>
    6944:	a2 fe       	sbrs	r10, 2
    6946:	06 c0       	rjmp	.+12     	; 0x6954 <vfprintf+0x318>
    6948:	b3 94       	inc	r11
    694a:	b3 94       	inc	r11
    694c:	04 c0       	rjmp	.+8      	; 0x6956 <vfprintf+0x31a>
    694e:	8a 2d       	mov	r24, r10
    6950:	86 78       	andi	r24, 0x86	; 134
    6952:	09 f0       	breq	.+2      	; 0x6956 <vfprintf+0x31a>
    6954:	b3 94       	inc	r11
    6956:	a3 fc       	sbrc	r10, 3
    6958:	10 c0       	rjmp	.+32     	; 0x697a <vfprintf+0x33e>
    695a:	a0 fe       	sbrs	r10, 0
    695c:	06 c0       	rjmp	.+12     	; 0x696a <vfprintf+0x32e>
    695e:	b2 14       	cp	r11, r2
    6960:	80 f4       	brcc	.+32     	; 0x6982 <vfprintf+0x346>
    6962:	28 0c       	add	r2, r8
    6964:	92 2c       	mov	r9, r2
    6966:	9b 18       	sub	r9, r11
    6968:	0d c0       	rjmp	.+26     	; 0x6984 <vfprintf+0x348>
    696a:	b2 14       	cp	r11, r2
    696c:	58 f4       	brcc	.+22     	; 0x6984 <vfprintf+0x348>
    696e:	b6 01       	movw	r22, r12
    6970:	80 e2       	ldi	r24, 0x20	; 32
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	86 d0       	rcall	.+268    	; 0x6a82 <fputc>
    6976:	b3 94       	inc	r11
    6978:	f8 cf       	rjmp	.-16     	; 0x696a <vfprintf+0x32e>
    697a:	b2 14       	cp	r11, r2
    697c:	18 f4       	brcc	.+6      	; 0x6984 <vfprintf+0x348>
    697e:	2b 18       	sub	r2, r11
    6980:	02 c0       	rjmp	.+4      	; 0x6986 <vfprintf+0x34a>
    6982:	98 2c       	mov	r9, r8
    6984:	21 2c       	mov	r2, r1
    6986:	a4 fe       	sbrs	r10, 4
    6988:	0f c0       	rjmp	.+30     	; 0x69a8 <vfprintf+0x36c>
    698a:	b6 01       	movw	r22, r12
    698c:	80 e3       	ldi	r24, 0x30	; 48
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	78 d0       	rcall	.+240    	; 0x6a82 <fputc>
    6992:	a2 fe       	sbrs	r10, 2
    6994:	16 c0       	rjmp	.+44     	; 0x69c2 <vfprintf+0x386>
    6996:	a1 fc       	sbrc	r10, 1
    6998:	03 c0       	rjmp	.+6      	; 0x69a0 <vfprintf+0x364>
    699a:	88 e7       	ldi	r24, 0x78	; 120
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	02 c0       	rjmp	.+4      	; 0x69a4 <vfprintf+0x368>
    69a0:	88 e5       	ldi	r24, 0x58	; 88
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	b6 01       	movw	r22, r12
    69a6:	0c c0       	rjmp	.+24     	; 0x69c0 <vfprintf+0x384>
    69a8:	8a 2d       	mov	r24, r10
    69aa:	86 78       	andi	r24, 0x86	; 134
    69ac:	51 f0       	breq	.+20     	; 0x69c2 <vfprintf+0x386>
    69ae:	a1 fe       	sbrs	r10, 1
    69b0:	02 c0       	rjmp	.+4      	; 0x69b6 <vfprintf+0x37a>
    69b2:	8b e2       	ldi	r24, 0x2B	; 43
    69b4:	01 c0       	rjmp	.+2      	; 0x69b8 <vfprintf+0x37c>
    69b6:	80 e2       	ldi	r24, 0x20	; 32
    69b8:	a7 fc       	sbrc	r10, 7
    69ba:	8d e2       	ldi	r24, 0x2D	; 45
    69bc:	b6 01       	movw	r22, r12
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	60 d0       	rcall	.+192    	; 0x6a82 <fputc>
    69c2:	89 14       	cp	r8, r9
    69c4:	30 f4       	brcc	.+12     	; 0x69d2 <vfprintf+0x396>
    69c6:	b6 01       	movw	r22, r12
    69c8:	80 e3       	ldi	r24, 0x30	; 48
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	5a d0       	rcall	.+180    	; 0x6a82 <fputc>
    69ce:	9a 94       	dec	r9
    69d0:	f8 cf       	rjmp	.-16     	; 0x69c2 <vfprintf+0x386>
    69d2:	8a 94       	dec	r8
    69d4:	f3 01       	movw	r30, r6
    69d6:	e8 0d       	add	r30, r8
    69d8:	f1 1d       	adc	r31, r1
    69da:	80 81       	ld	r24, Z
    69dc:	b6 01       	movw	r22, r12
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	50 d0       	rcall	.+160    	; 0x6a82 <fputc>
    69e2:	81 10       	cpse	r8, r1
    69e4:	f6 cf       	rjmp	.-20     	; 0x69d2 <vfprintf+0x396>
    69e6:	22 20       	and	r2, r2
    69e8:	09 f4       	brne	.+2      	; 0x69ec <vfprintf+0x3b0>
    69ea:	4e ce       	rjmp	.-868    	; 0x6688 <vfprintf+0x4c>
    69ec:	b6 01       	movw	r22, r12
    69ee:	80 e2       	ldi	r24, 0x20	; 32
    69f0:	90 e0       	ldi	r25, 0x00	; 0
    69f2:	47 d0       	rcall	.+142    	; 0x6a82 <fputc>
    69f4:	2a 94       	dec	r2
    69f6:	f7 cf       	rjmp	.-18     	; 0x69e6 <vfprintf+0x3aa>
    69f8:	f6 01       	movw	r30, r12
    69fa:	86 81       	ldd	r24, Z+6	; 0x06
    69fc:	97 81       	ldd	r25, Z+7	; 0x07
    69fe:	02 c0       	rjmp	.+4      	; 0x6a04 <vfprintf+0x3c8>
    6a00:	8f ef       	ldi	r24, 0xFF	; 255
    6a02:	9f ef       	ldi	r25, 0xFF	; 255
    6a04:	2b 96       	adiw	r28, 0x0b	; 11
    6a06:	0f b6       	in	r0, 0x3f	; 63
    6a08:	f8 94       	cli
    6a0a:	de bf       	out	0x3e, r29	; 62
    6a0c:	0f be       	out	0x3f, r0	; 63
    6a0e:	cd bf       	out	0x3d, r28	; 61
    6a10:	df 91       	pop	r29
    6a12:	cf 91       	pop	r28
    6a14:	1f 91       	pop	r17
    6a16:	0f 91       	pop	r16
    6a18:	ff 90       	pop	r15
    6a1a:	ef 90       	pop	r14
    6a1c:	df 90       	pop	r13
    6a1e:	cf 90       	pop	r12
    6a20:	bf 90       	pop	r11
    6a22:	af 90       	pop	r10
    6a24:	9f 90       	pop	r9
    6a26:	8f 90       	pop	r8
    6a28:	7f 90       	pop	r7
    6a2a:	6f 90       	pop	r6
    6a2c:	5f 90       	pop	r5
    6a2e:	4f 90       	pop	r4
    6a30:	3f 90       	pop	r3
    6a32:	2f 90       	pop	r2
    6a34:	08 95       	ret

00006a36 <strnlen_P>:
    6a36:	fc 01       	movw	r30, r24
    6a38:	05 90       	lpm	r0, Z+
    6a3a:	61 50       	subi	r22, 0x01	; 1
    6a3c:	70 40       	sbci	r23, 0x00	; 0
    6a3e:	01 10       	cpse	r0, r1
    6a40:	d8 f7       	brcc	.-10     	; 0x6a38 <strnlen_P+0x2>
    6a42:	80 95       	com	r24
    6a44:	90 95       	com	r25
    6a46:	8e 0f       	add	r24, r30
    6a48:	9f 1f       	adc	r25, r31
    6a4a:	08 95       	ret

00006a4c <strnlen>:
    6a4c:	fc 01       	movw	r30, r24
    6a4e:	61 50       	subi	r22, 0x01	; 1
    6a50:	70 40       	sbci	r23, 0x00	; 0
    6a52:	01 90       	ld	r0, Z+
    6a54:	01 10       	cpse	r0, r1
    6a56:	d8 f7       	brcc	.-10     	; 0x6a4e <strnlen+0x2>
    6a58:	80 95       	com	r24
    6a5a:	90 95       	com	r25
    6a5c:	8e 0f       	add	r24, r30
    6a5e:	9f 1f       	adc	r25, r31
    6a60:	08 95       	ret

00006a62 <strrev>:
    6a62:	dc 01       	movw	r26, r24
    6a64:	fc 01       	movw	r30, r24
    6a66:	67 2f       	mov	r22, r23
    6a68:	71 91       	ld	r23, Z+
    6a6a:	77 23       	and	r23, r23
    6a6c:	e1 f7       	brne	.-8      	; 0x6a66 <strrev+0x4>
    6a6e:	32 97       	sbiw	r30, 0x02	; 2
    6a70:	04 c0       	rjmp	.+8      	; 0x6a7a <strrev+0x18>
    6a72:	7c 91       	ld	r23, X
    6a74:	6d 93       	st	X+, r22
    6a76:	70 83       	st	Z, r23
    6a78:	62 91       	ld	r22, -Z
    6a7a:	ae 17       	cp	r26, r30
    6a7c:	bf 07       	cpc	r27, r31
    6a7e:	c8 f3       	brcs	.-14     	; 0x6a72 <strrev+0x10>
    6a80:	08 95       	ret

00006a82 <fputc>:
    6a82:	0f 93       	push	r16
    6a84:	1f 93       	push	r17
    6a86:	cf 93       	push	r28
    6a88:	df 93       	push	r29
    6a8a:	fb 01       	movw	r30, r22
    6a8c:	23 81       	ldd	r18, Z+3	; 0x03
    6a8e:	21 fd       	sbrc	r18, 1
    6a90:	03 c0       	rjmp	.+6      	; 0x6a98 <fputc+0x16>
    6a92:	8f ef       	ldi	r24, 0xFF	; 255
    6a94:	9f ef       	ldi	r25, 0xFF	; 255
    6a96:	2c c0       	rjmp	.+88     	; 0x6af0 <fputc+0x6e>
    6a98:	22 ff       	sbrs	r18, 2
    6a9a:	16 c0       	rjmp	.+44     	; 0x6ac8 <fputc+0x46>
    6a9c:	46 81       	ldd	r20, Z+6	; 0x06
    6a9e:	57 81       	ldd	r21, Z+7	; 0x07
    6aa0:	24 81       	ldd	r18, Z+4	; 0x04
    6aa2:	35 81       	ldd	r19, Z+5	; 0x05
    6aa4:	42 17       	cp	r20, r18
    6aa6:	53 07       	cpc	r21, r19
    6aa8:	44 f4       	brge	.+16     	; 0x6aba <fputc+0x38>
    6aaa:	a0 81       	ld	r26, Z
    6aac:	b1 81       	ldd	r27, Z+1	; 0x01
    6aae:	9d 01       	movw	r18, r26
    6ab0:	2f 5f       	subi	r18, 0xFF	; 255
    6ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ab4:	31 83       	std	Z+1, r19	; 0x01
    6ab6:	20 83       	st	Z, r18
    6ab8:	8c 93       	st	X, r24
    6aba:	26 81       	ldd	r18, Z+6	; 0x06
    6abc:	37 81       	ldd	r19, Z+7	; 0x07
    6abe:	2f 5f       	subi	r18, 0xFF	; 255
    6ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac2:	37 83       	std	Z+7, r19	; 0x07
    6ac4:	26 83       	std	Z+6, r18	; 0x06
    6ac6:	14 c0       	rjmp	.+40     	; 0x6af0 <fputc+0x6e>
    6ac8:	8b 01       	movw	r16, r22
    6aca:	ec 01       	movw	r28, r24
    6acc:	fb 01       	movw	r30, r22
    6ace:	00 84       	ldd	r0, Z+8	; 0x08
    6ad0:	f1 85       	ldd	r31, Z+9	; 0x09
    6ad2:	e0 2d       	mov	r30, r0
    6ad4:	19 95       	eicall
    6ad6:	89 2b       	or	r24, r25
    6ad8:	e1 f6       	brne	.-72     	; 0x6a92 <fputc+0x10>
    6ada:	d8 01       	movw	r26, r16
    6adc:	16 96       	adiw	r26, 0x06	; 6
    6ade:	8d 91       	ld	r24, X+
    6ae0:	9c 91       	ld	r25, X
    6ae2:	17 97       	sbiw	r26, 0x07	; 7
    6ae4:	01 96       	adiw	r24, 0x01	; 1
    6ae6:	17 96       	adiw	r26, 0x07	; 7
    6ae8:	9c 93       	st	X, r25
    6aea:	8e 93       	st	-X, r24
    6aec:	16 97       	sbiw	r26, 0x06	; 6
    6aee:	ce 01       	movw	r24, r28
    6af0:	df 91       	pop	r29
    6af2:	cf 91       	pop	r28
    6af4:	1f 91       	pop	r17
    6af6:	0f 91       	pop	r16
    6af8:	08 95       	ret

00006afa <__ultoa_invert>:
    6afa:	fa 01       	movw	r30, r20
    6afc:	aa 27       	eor	r26, r26
    6afe:	28 30       	cpi	r18, 0x08	; 8
    6b00:	51 f1       	breq	.+84     	; 0x6b56 <__ultoa_invert+0x5c>
    6b02:	20 31       	cpi	r18, 0x10	; 16
    6b04:	81 f1       	breq	.+96     	; 0x6b66 <__ultoa_invert+0x6c>
    6b06:	e8 94       	clt
    6b08:	6f 93       	push	r22
    6b0a:	6e 7f       	andi	r22, 0xFE	; 254
    6b0c:	6e 5f       	subi	r22, 0xFE	; 254
    6b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b10:	8f 4f       	sbci	r24, 0xFF	; 255
    6b12:	9f 4f       	sbci	r25, 0xFF	; 255
    6b14:	af 4f       	sbci	r26, 0xFF	; 255
    6b16:	b1 e0       	ldi	r27, 0x01	; 1
    6b18:	3e d0       	rcall	.+124    	; 0x6b96 <__ultoa_invert+0x9c>
    6b1a:	b4 e0       	ldi	r27, 0x04	; 4
    6b1c:	3c d0       	rcall	.+120    	; 0x6b96 <__ultoa_invert+0x9c>
    6b1e:	67 0f       	add	r22, r23
    6b20:	78 1f       	adc	r23, r24
    6b22:	89 1f       	adc	r24, r25
    6b24:	9a 1f       	adc	r25, r26
    6b26:	a1 1d       	adc	r26, r1
    6b28:	68 0f       	add	r22, r24
    6b2a:	79 1f       	adc	r23, r25
    6b2c:	8a 1f       	adc	r24, r26
    6b2e:	91 1d       	adc	r25, r1
    6b30:	a1 1d       	adc	r26, r1
    6b32:	6a 0f       	add	r22, r26
    6b34:	71 1d       	adc	r23, r1
    6b36:	81 1d       	adc	r24, r1
    6b38:	91 1d       	adc	r25, r1
    6b3a:	a1 1d       	adc	r26, r1
    6b3c:	20 d0       	rcall	.+64     	; 0x6b7e <__ultoa_invert+0x84>
    6b3e:	09 f4       	brne	.+2      	; 0x6b42 <__ultoa_invert+0x48>
    6b40:	68 94       	set
    6b42:	3f 91       	pop	r19
    6b44:	2a e0       	ldi	r18, 0x0A	; 10
    6b46:	26 9f       	mul	r18, r22
    6b48:	11 24       	eor	r1, r1
    6b4a:	30 19       	sub	r19, r0
    6b4c:	30 5d       	subi	r19, 0xD0	; 208
    6b4e:	31 93       	st	Z+, r19
    6b50:	de f6       	brtc	.-74     	; 0x6b08 <__ultoa_invert+0xe>
    6b52:	cf 01       	movw	r24, r30
    6b54:	08 95       	ret
    6b56:	46 2f       	mov	r20, r22
    6b58:	47 70       	andi	r20, 0x07	; 7
    6b5a:	40 5d       	subi	r20, 0xD0	; 208
    6b5c:	41 93       	st	Z+, r20
    6b5e:	b3 e0       	ldi	r27, 0x03	; 3
    6b60:	0f d0       	rcall	.+30     	; 0x6b80 <__ultoa_invert+0x86>
    6b62:	c9 f7       	brne	.-14     	; 0x6b56 <__ultoa_invert+0x5c>
    6b64:	f6 cf       	rjmp	.-20     	; 0x6b52 <__ultoa_invert+0x58>
    6b66:	46 2f       	mov	r20, r22
    6b68:	4f 70       	andi	r20, 0x0F	; 15
    6b6a:	40 5d       	subi	r20, 0xD0	; 208
    6b6c:	4a 33       	cpi	r20, 0x3A	; 58
    6b6e:	18 f0       	brcs	.+6      	; 0x6b76 <__ultoa_invert+0x7c>
    6b70:	49 5d       	subi	r20, 0xD9	; 217
    6b72:	31 fd       	sbrc	r19, 1
    6b74:	40 52       	subi	r20, 0x20	; 32
    6b76:	41 93       	st	Z+, r20
    6b78:	02 d0       	rcall	.+4      	; 0x6b7e <__ultoa_invert+0x84>
    6b7a:	a9 f7       	brne	.-22     	; 0x6b66 <__ultoa_invert+0x6c>
    6b7c:	ea cf       	rjmp	.-44     	; 0x6b52 <__ultoa_invert+0x58>
    6b7e:	b4 e0       	ldi	r27, 0x04	; 4
    6b80:	a6 95       	lsr	r26
    6b82:	97 95       	ror	r25
    6b84:	87 95       	ror	r24
    6b86:	77 95       	ror	r23
    6b88:	67 95       	ror	r22
    6b8a:	ba 95       	dec	r27
    6b8c:	c9 f7       	brne	.-14     	; 0x6b80 <__ultoa_invert+0x86>
    6b8e:	00 97       	sbiw	r24, 0x00	; 0
    6b90:	61 05       	cpc	r22, r1
    6b92:	71 05       	cpc	r23, r1
    6b94:	08 95       	ret
    6b96:	9b 01       	movw	r18, r22
    6b98:	ac 01       	movw	r20, r24
    6b9a:	0a 2e       	mov	r0, r26
    6b9c:	06 94       	lsr	r0
    6b9e:	57 95       	ror	r21
    6ba0:	47 95       	ror	r20
    6ba2:	37 95       	ror	r19
    6ba4:	27 95       	ror	r18
    6ba6:	ba 95       	dec	r27
    6ba8:	c9 f7       	brne	.-14     	; 0x6b9c <__ultoa_invert+0xa2>
    6baa:	62 0f       	add	r22, r18
    6bac:	73 1f       	adc	r23, r19
    6bae:	84 1f       	adc	r24, r20
    6bb0:	95 1f       	adc	r25, r21
    6bb2:	a0 1d       	adc	r26, r0
    6bb4:	08 95       	ret

00006bb6 <__mulshisi3>:
    6bb6:	b7 ff       	sbrs	r27, 7
    6bb8:	c9 c9       	rjmp	.-3182   	; 0x5f4c <__muluhisi3>

00006bba <__mulohisi3>:
    6bba:	c8 d9       	rcall	.-3184   	; 0x5f4c <__muluhisi3>
    6bbc:	82 1b       	sub	r24, r18
    6bbe:	93 0b       	sbc	r25, r19
    6bc0:	08 95       	ret

00006bc2 <_exit>:
    6bc2:	f8 94       	cli

00006bc4 <__stop_program>:
    6bc4:	ff cf       	rjmp	.-2      	; 0x6bc4 <__stop_program>
